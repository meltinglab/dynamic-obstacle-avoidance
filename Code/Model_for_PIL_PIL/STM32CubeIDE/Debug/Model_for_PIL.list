
Model_for_PIL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097d4  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08009968  08009968  00019968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bf8  08009bf8  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08009bf8  08009bf8  00019bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c00  08009c00  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c00  08009c00  00019c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c04  08009c04  00019c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08009c08  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  20000098  08009c9c  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  08009c9c  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_line   00013d4d  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0001ab44  00000000  00000000  00033e11  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00003d15  00000000  00000000  0004e955  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000013c0  00000000  00000000  00052670  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000db4f4  00000000  00000000  00053a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000011e0  00000000  00000000  0012ef28  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00024eef  00000000  00000000  00130108  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154ff7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000538c  00000000  00000000  00155074  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800994c 	.word	0x0800994c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800994c 	.word	0x0800994c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b972 	b.w	8000e94 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	4688      	mov	r8, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14b      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4615      	mov	r5, r2
 8000bda:	d967      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0720 	rsb	r7, r2, #32
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	fa20 f707 	lsr.w	r7, r0, r7
 8000bee:	4095      	lsls	r5, r2
 8000bf0:	ea47 0803 	orr.w	r8, r7, r3
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c00:	fa1f fc85 	uxth.w	ip, r5
 8000c04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18eb      	adds	r3, r5, r3
 8000c16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c1a:	f080 811b 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8118 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c24:	3f02      	subs	r7, #2
 8000c26:	442b      	add	r3, r5
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	192c      	adds	r4, r5, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8107 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	f240 8104 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c50:	3802      	subs	r0, #2
 8000c52:	442c      	add	r4, r5
 8000c54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c58:	eba4 040c 	sub.w	r4, r4, ip
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	b11e      	cbz	r6, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c6 4300 	strd	r4, r3, [r6]
 8000c68:	4639      	mov	r1, r7
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0xbe>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80eb 	beq.w	8000e4e <__udivmoddi4+0x286>
 8000c78:	2700      	movs	r7, #0
 8000c7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c7e:	4638      	mov	r0, r7
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	fab3 f783 	clz	r7, r3
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d147      	bne.n	8000d1e <__udivmoddi4+0x156>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d302      	bcc.n	8000c98 <__udivmoddi4+0xd0>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	f200 80fa 	bhi.w	8000e8c <__udivmoddi4+0x2c4>
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4698      	mov	r8, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d0e0      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000ca6:	e9c6 4800 	strd	r4, r8, [r6]
 8000caa:	e7dd      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000cac:	b902      	cbnz	r2, 8000cb0 <__udivmoddi4+0xe8>
 8000cae:	deff      	udf	#255	; 0xff
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f040 808f 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cba:	1b49      	subs	r1, r1, r5
 8000cbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc0:	fa1f f885 	uxth.w	r8, r5
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cdc:	18eb      	adds	r3, r5, r3
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cf8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x14c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x14a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80b6 	bhi.w	8000e7e <__udivmoddi4+0x2b6>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e79f      	b.n	8000c5e <__udivmoddi4+0x96>
 8000d1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d22:	40bb      	lsls	r3, r7
 8000d24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d3c:	4325      	orrs	r5, r4
 8000d3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d42:	0c2c      	lsrs	r4, r5, #16
 8000d44:	fb08 3319 	mls	r3, r8, r9, r3
 8000d48:	fa1f fa8e 	uxth.w	sl, lr
 8000d4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d50:	fb09 f40a 	mul.w	r4, r9, sl
 8000d54:	429c      	cmp	r4, r3
 8000d56:	fa02 f207 	lsl.w	r2, r2, r7
 8000d5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1e 0303 	adds.w	r3, lr, r3
 8000d64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d68:	f080 8087 	bcs.w	8000e7a <__udivmoddi4+0x2b2>
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	f240 8084 	bls.w	8000e7a <__udivmoddi4+0x2b2>
 8000d72:	f1a9 0902 	sub.w	r9, r9, #2
 8000d76:	4473      	add	r3, lr
 8000d78:	1b1b      	subs	r3, r3, r4
 8000d7a:	b2ad      	uxth	r5, r5
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d8c:	45a2      	cmp	sl, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1e 0404 	adds.w	r4, lr, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d98:	d26b      	bcs.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9a:	45a2      	cmp	sl, r4
 8000d9c:	d969      	bls.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4474      	add	r4, lr
 8000da2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000da6:	fba0 8902 	umull	r8, r9, r0, r2
 8000daa:	eba4 040a 	sub.w	r4, r4, sl
 8000dae:	454c      	cmp	r4, r9
 8000db0:	46c2      	mov	sl, r8
 8000db2:	464b      	mov	r3, r9
 8000db4:	d354      	bcc.n	8000e60 <__udivmoddi4+0x298>
 8000db6:	d051      	beq.n	8000e5c <__udivmoddi4+0x294>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d069      	beq.n	8000e90 <__udivmoddi4+0x2c8>
 8000dbc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dc4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dc8:	40fd      	lsrs	r5, r7
 8000dca:	40fc      	lsrs	r4, r7
 8000dcc:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd0:	e9c6 5400 	strd	r5, r4, [r6]
 8000dd4:	2700      	movs	r7, #0
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f703 	lsr.w	r7, r0, r3
 8000de0:	4095      	lsls	r5, r2
 8000de2:	fa01 f002 	lsl.w	r0, r1, r2
 8000de6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dee:	4338      	orrs	r0, r7
 8000df0:	0c01      	lsrs	r1, r0, #16
 8000df2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000df6:	fa1f f885 	uxth.w	r8, r5
 8000dfa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb07 f308 	mul.w	r3, r7, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d907      	bls.n	8000e1e <__udivmoddi4+0x256>
 8000e0e:	1869      	adds	r1, r5, r1
 8000e10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e14:	d22f      	bcs.n	8000e76 <__udivmoddi4+0x2ae>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d92d      	bls.n	8000e76 <__udivmoddi4+0x2ae>
 8000e1a:	3f02      	subs	r7, #2
 8000e1c:	4429      	add	r1, r5
 8000e1e:	1acb      	subs	r3, r1, r3
 8000e20:	b281      	uxth	r1, r0
 8000e22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2e:	fb00 f308 	mul.w	r3, r0, r8
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x27e>
 8000e36:	1869      	adds	r1, r5, r1
 8000e38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e3c:	d217      	bcs.n	8000e6e <__udivmoddi4+0x2a6>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d915      	bls.n	8000e6e <__udivmoddi4+0x2a6>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4429      	add	r1, r5
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e4c:	e73b      	b.n	8000cc6 <__udivmoddi4+0xfe>
 8000e4e:	4637      	mov	r7, r6
 8000e50:	4630      	mov	r0, r6
 8000e52:	e709      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e54:	4607      	mov	r7, r0
 8000e56:	e6e7      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6fb      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e5c:	4541      	cmp	r1, r8
 8000e5e:	d2ab      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e64:	eb69 020e 	sbc.w	r2, r9, lr
 8000e68:	3801      	subs	r0, #1
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	e7a4      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e6e:	4660      	mov	r0, ip
 8000e70:	e7e9      	b.n	8000e46 <__udivmoddi4+0x27e>
 8000e72:	4618      	mov	r0, r3
 8000e74:	e795      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e76:	4667      	mov	r7, ip
 8000e78:	e7d1      	b.n	8000e1e <__udivmoddi4+0x256>
 8000e7a:	4681      	mov	r9, r0
 8000e7c:	e77c      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	442c      	add	r4, r5
 8000e82:	e747      	b.n	8000d14 <__udivmoddi4+0x14c>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	442b      	add	r3, r5
 8000e8a:	e72f      	b.n	8000cec <__udivmoddi4+0x124>
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	e708      	b.n	8000ca2 <__udivmoddi4+0xda>
 8000e90:	4637      	mov	r7, r6
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0xa0>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e9c:	f000 fa36 	bl	800130c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ea0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ea2:	e003      	b.n	8000eac <LoopCopyDataInit>

08000ea4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ea6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ea8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000eaa:	3104      	adds	r1, #4

08000eac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000eac:	480a      	ldr	r0, [pc, #40]	; (8000ed8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000eb0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000eb2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000eb4:	d3f6      	bcc.n	8000ea4 <CopyDataInit>
	ldr	r2, =_sbss
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000eb8:	e002      	b.n	8000ec0 <LoopFillZerobss>

08000eba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000eba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ebc:	f842 3b04 	str.w	r3, [r2], #4

08000ec0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <LoopForever+0x16>)
	cmp	r2, r3
 8000ec2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ec4:	d3f9      	bcc.n	8000eba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f007 f93b 	bl	8008140 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eca:	f000 f80e 	bl	8000eea <main>

08000ece <LoopForever>:

LoopForever:
    b LoopForever
 8000ece:	e7fe      	b.n	8000ece <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ed0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000ed4:	08009c08 	.word	0x08009c08
	ldr	r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000edc:	20000094 	.word	0x20000094
	ldr	r2, =_sbss
 8000ee0:	20000098 	.word	0x20000098
	ldr	r3, = _ebss
 8000ee4:	20000560 	.word	0x20000560

08000ee8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC1_IRQHandler>

08000eea <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  XIL_INTERFACE_LIB_ERROR_CODE errorCode = XIL_INTERFACE_LIB_SUCCESS;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	74fb      	strb	r3, [r7, #19]
  int errorOccurred = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]

  /* Avoid warnings about infinite loops */
  volatile int loop = 1;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efc:	f000 fa38 	bl	8001370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f00:	f000 f840 	bl	8000f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f04:	f000 f8e2 	bl	80010cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f08:	f000 f8b0 	bl	800106c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Profiling settings: set reload SysTick timer to max value 0x00FFFFFF */
  profileTimerInit();
 8000f0c:	f004 fb9e 	bl	800564c <profileTimerInit>

  /* XIL initialization */
  const int argc = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
  void * argv = (void *) 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
  errorCode = xilInit(argc, argv);
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	f007 f83e 	bl	8007f9c <xilInit>
 8000f20:	4603      	mov	r3, r0
 8000f22:	74fb      	strb	r3, [r7, #19]
  errorOccurred = (errorCode != XIL_INTERFACE_LIB_SUCCESS);
 8000f24:	7cfb      	ldrb	r3, [r7, #19]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	bf14      	ite	ne
 8000f2a:	2301      	movne	r3, #1
 8000f2c:	2300      	moveq	r3, #0
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	617b      	str	r3, [r7, #20]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* main XIL loop */
  while (loop && !errorOccurred) {
 8000f32:	e015      	b.n	8000f60 <main+0x76>
    errorCode = xilRun();
 8000f34:	f006 ffc4 	bl	8007ec0 <xilRun>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	74fb      	strb	r3, [r7, #19]
    if (errorCode != XIL_INTERFACE_LIB_SUCCESS) {
 8000f3c:	7cfb      	ldrb	r3, [r7, #19]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00e      	beq.n	8000f60 <main+0x76>
      if (errorCode == XIL_INTERFACE_LIB_TERMINATE) {
 8000f42:	7cfb      	ldrb	r3, [r7, #19]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d109      	bne.n	8000f5c <main+0x72>
        /* orderly shutdown of rtiostream */
        errorOccurred = (xilTerminateComms() != XIL_INTERFACE_LIB_SUCCESS);
 8000f48:	f007 f84a 	bl	8007fe0 <xilTerminateComms>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bf14      	ite	ne
 8000f52:	2301      	movne	r3, #1
 8000f54:	2300      	moveq	r3, #0
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	e001      	b.n	8000f60 <main+0x76>
      } else {
        errorOccurred = 1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
  while (loop && !errorOccurred) {
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d002      	beq.n	8000f6c <main+0x82>
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0e3      	beq.n	8000f34 <main+0x4a>
      }
    }
  }

  /* trap error with infinite loop */
  if (errorOccurred)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <main+0x90>
    while (loop) {
 8000f72:	bf00      	nop
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1fc      	bne.n	8000f74 <main+0x8a>
 8000f7a:	2300      	movs	r3, #0

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0ae      	sub	sp, #184	; 0xb8
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f8e:	2244      	movs	r2, #68	; 0x44
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f007 f903 	bl	800819e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa8:	463b      	mov	r3, r7
 8000faa:	2260      	movs	r2, #96	; 0x60
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f007 f8f5 	bl	800819e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fc4:	2360      	movs	r3, #96	; 0x60
 8000fc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000fdc:	2328      	movs	r3, #40	; 0x28
 8000fde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fd31 	bl	8001a60 <HAL_RCC_OscConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001004:	f000 f889 	bl	800111a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001008:	230f      	movs	r3, #15
 800100a:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100c:	2303      	movs	r3, #3
 800100e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001014:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001018:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800101a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800101e:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001020:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001024:	2104      	movs	r1, #4
 8001026:	4618      	mov	r0, r3
 8001028:	f001 f93a 	bl	80022a0 <HAL_RCC_ClockConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001032:	f000 f872 	bl	800111a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001036:	2302      	movs	r3, #2
 8001038:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	4618      	mov	r0, r3
 8001042:	f001 fb63 	bl	800270c <HAL_RCCEx_PeriphCLKConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800104c:	f000 f865 	bl	800111a <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001050:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001054:	f000 fcae 	bl	80019b4 <HAL_PWREx_ControlVoltageScaling>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0xde>
  {
    Error_Handler();
 800105e:	f000 f85c 	bl	800111a <Error_Handler>
  }
}
 8001062:	bf00      	nop
 8001064:	37b8      	adds	r7, #184	; 0xb8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 8001072:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <MX_USART2_UART_Init+0x5c>)
 8001074:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 8001078:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800107c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 8001092:	220c      	movs	r2, #12
 8001094:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_USART2_UART_Init+0x58>)
 80010b0:	f002 f8e0 	bl	8003274 <HAL_UART_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010ba:	f000 f82e 	bl	800111a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200002d4 	.word	0x200002d4
 80010c8:	40004400 	.word	0x40004400

080010cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_GPIO_Init+0x2c>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <MX_GPIO_Init+0x2c>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_GPIO_Init+0x2c>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000

080010fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800110c:	d101      	bne.n	8001112 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800110e:	f000 f947 	bl	80013a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800111e:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001120:	e7fe      	b.n	8001120 <Error_Handler+0x6>
	...

08001124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <HAL_MspInit+0x44>)
 800112c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112e:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <HAL_MspInit+0x44>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6613      	str	r3, [r2, #96]	; 0x60
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <HAL_MspInit+0x44>)
 8001138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_MspInit+0x44>)
 8001144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <HAL_MspInit+0x44>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114c:	6593      	str	r3, [r2, #88]	; 0x58
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_MspInit+0x44>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000

0800116c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a24      	ldr	r2, [pc, #144]	; (800121c <HAL_UART_MspInit+0xb0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d141      	bne.n	8001212 <HAL_UART_MspInit+0xa6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <HAL_UART_MspInit+0xb4>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001192:	4a23      	ldr	r2, [pc, #140]	; (8001220 <HAL_UART_MspInit+0xb4>)
 8001194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001198:	6593      	str	r3, [r2, #88]	; 0x58
 800119a:	4b21      	ldr	r3, [pc, #132]	; (8001220 <HAL_UART_MspInit+0xb4>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <HAL_UART_MspInit+0xb4>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	4a1d      	ldr	r2, [pc, #116]	; (8001220 <HAL_UART_MspInit+0xb4>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b2:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <HAL_UART_MspInit+0xb4>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011be:	2304      	movs	r3, #4
 80011c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011ce:	2307      	movs	r3, #7
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011dc:	f000 fa62 	bl	80016a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011e0:	2308      	movs	r3, #8
 80011e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011f0:	2307      	movs	r3, #7
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fe:	f000 fa51 	bl	80016a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2026      	movs	r0, #38	; 0x26
 8001208:	f000 f9a2 	bl	8001550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800120c:	2026      	movs	r0, #38	; 0x26
 800120e:	f000 f9bb 	bl	8001588 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001212:	bf00      	nop
 8001214:	3728      	adds	r7, #40	; 0x28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40004400 	.word	0x40004400
 8001220:	40021000 	.word	0x40021000

08001224 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08c      	sub	sp, #48	; 0x30
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	201c      	movs	r0, #28
 800123a:	f000 f989 	bl	8001550 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800123e:	201c      	movs	r0, #28
 8001240:	f000 f9a2 	bl	8001588 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001244:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <HAL_InitTick+0xa4>)
 8001246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001248:	4a1f      	ldr	r2, [pc, #124]	; (80012c8 <HAL_InitTick+0xa4>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6593      	str	r3, [r2, #88]	; 0x58
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <HAL_InitTick+0xa4>)
 8001252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800125c:	f107 0210 	add.w	r2, r7, #16
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f001 f9be 	bl	80025e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800126c:	f001 f990 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 8001270:	4603      	mov	r3, r0
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001278:	4a14      	ldr	r2, [pc, #80]	; (80012cc <HAL_InitTick+0xa8>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	0c9b      	lsrs	r3, r3, #18
 8001280:	3b01      	subs	r3, #1
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_InitTick+0xac>)
 8001286:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800128a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <HAL_InitTick+0xac>)
 800128e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001292:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001294:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <HAL_InitTick+0xac>)
 8001296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001298:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <HAL_InitTick+0xac>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_InitTick+0xac>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80012a6:	480a      	ldr	r0, [pc, #40]	; (80012d0 <HAL_InitTick+0xac>)
 80012a8:	f001 fd64 	bl	8002d74 <HAL_TIM_Base_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d104      	bne.n	80012bc <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80012b2:	4807      	ldr	r0, [pc, #28]	; (80012d0 <HAL_InitTick+0xac>)
 80012b4:	f001 fdc0 	bl	8002e38 <HAL_TIM_Base_Start_IT>
 80012b8:	4603      	mov	r3, r0
 80012ba:	e000      	b.n	80012be <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3730      	adds	r7, #48	; 0x30
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	431bde83 	.word	0x431bde83
 80012d0:	20000358 	.word	0x20000358

080012d4 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <TIM2_IRQHandler+0x10>)
 80012ea:	f001 fdf9 	bl	8002ee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000358 	.word	0x20000358

080012f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <USART2_IRQHandler+0x10>)
 80012fe:	f002 f8a7 	bl	8003450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200002d4 	.word	0x200002d4

0800130c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <SystemInit+0x5c>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001316:	4a14      	ldr	r2, [pc, #80]	; (8001368 <SystemInit+0x5c>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <SystemInit+0x60>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a11      	ldr	r2, [pc, #68]	; (800136c <SystemInit+0x60>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <SystemInit+0x60>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <SystemInit+0x60>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a0d      	ldr	r2, [pc, #52]	; (800136c <SystemInit+0x60>)
 8001338:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800133c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001340:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <SystemInit+0x60>)
 8001344:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001348:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <SystemInit+0x60>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a07      	ldr	r2, [pc, #28]	; (800136c <SystemInit+0x60>)
 8001350:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001354:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <SystemInit+0x60>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00
 800136c:	40021000 	.word	0x40021000

08001370 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800137a:	2003      	movs	r0, #3
 800137c:	f000 f8dd 	bl	800153a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001380:	2000      	movs	r0, #0
 8001382:	f7ff ff4f 	bl	8001224 <HAL_InitTick>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d002      	beq.n	8001392 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	71fb      	strb	r3, [r7, #7]
 8001390:	e001      	b.n	8001396 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001392:	f7ff fec7 	bl	8001124 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001396:	79fb      	ldrb	r3, [r7, #7]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_IncTick+0x20>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_IncTick+0x24>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <HAL_IncTick+0x24>)
 80013b2:	6013      	str	r3, [r2, #0]
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000008 	.word	0x20000008
 80013c4:	200003a4 	.word	0x200003a4

080013c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return uwTick;
 80013cc:	4b03      	ldr	r3, [pc, #12]	; (80013dc <HAL_GetTick+0x14>)
 80013ce:	681b      	ldr	r3, [r3, #0]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	200003a4 	.word	0x200003a4

080013e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013fc:	4013      	ands	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001412:	4a04      	ldr	r2, [pc, #16]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	60d3      	str	r3, [r2, #12]
}
 8001418:	bf00      	nop
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <__NVIC_GetPriorityGrouping+0x18>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	f003 0307 	and.w	r3, r3, #7
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	2b00      	cmp	r3, #0
 8001454:	db0b      	blt.n	800146e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	f003 021f 	and.w	r2, r3, #31
 800145c:	4907      	ldr	r1, [pc, #28]	; (800147c <__NVIC_EnableIRQ+0x38>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	095b      	lsrs	r3, r3, #5
 8001464:	2001      	movs	r0, #1
 8001466:	fa00 f202 	lsl.w	r2, r0, r2
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000e100 	.word	0xe000e100

08001480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	2b00      	cmp	r3, #0
 8001492:	db0a      	blt.n	80014aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	490c      	ldr	r1, [pc, #48]	; (80014cc <__NVIC_SetPriority+0x4c>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	0112      	lsls	r2, r2, #4
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	440b      	add	r3, r1
 80014a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a8:	e00a      	b.n	80014c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4908      	ldr	r1, [pc, #32]	; (80014d0 <__NVIC_SetPriority+0x50>)
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	3b04      	subs	r3, #4
 80014b8:	0112      	lsls	r2, r2, #4
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	440b      	add	r3, r1
 80014be:	761a      	strb	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000e100 	.word	0xe000e100
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f1c3 0307 	rsb	r3, r3, #7
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	bf28      	it	cs
 80014f2:	2304      	movcs	r3, #4
 80014f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d902      	bls.n	8001504 <NVIC_EncodePriority+0x30>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3b03      	subs	r3, #3
 8001502:	e000      	b.n	8001506 <NVIC_EncodePriority+0x32>
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800151c:	f04f 31ff 	mov.w	r1, #4294967295
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43d9      	mvns	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	4313      	orrs	r3, r2
         );
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff ff4c 	bl	80013e0 <__NVIC_SetPriorityGrouping>
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001562:	f7ff ff61 	bl	8001428 <__NVIC_GetPriorityGrouping>
 8001566:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	68b9      	ldr	r1, [r7, #8]
 800156c:	6978      	ldr	r0, [r7, #20]
 800156e:	f7ff ffb1 	bl	80014d4 <NVIC_EncodePriority>
 8001572:	4602      	mov	r2, r0
 8001574:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001578:	4611      	mov	r1, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ff80 	bl	8001480 <__NVIC_SetPriority>
}
 8001580:	bf00      	nop
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ff54 	bl	8001444 <__NVIC_EnableIRQ>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d008      	beq.n	80015ce <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2204      	movs	r2, #4
 80015c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e022      	b.n	8001614 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 020e 	bic.w	r2, r2, #14
 80015dc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0201 	bic.w	r2, r2, #1
 80015ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f003 021c 	and.w	r2, r3, #28
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	2101      	movs	r1, #1
 80015fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001600:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001614:	4618      	mov	r0, r3
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d005      	beq.n	8001644 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2204      	movs	r2, #4
 800163c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	e029      	b.n	8001698 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 020e 	bic.w	r2, r2, #14
 8001652:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	f003 021c 	and.w	r2, r3, #28
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	2101      	movs	r1, #1
 8001672:	fa01 f202 	lsl.w	r2, r1, r2
 8001676:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	4798      	blx	r3
    }
  }
  return status;
 8001698:	7bfb      	ldrb	r3, [r7, #15]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b2:	e154      	b.n	800195e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2101      	movs	r1, #1
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	4013      	ands	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 8146 	beq.w	8001958 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d00b      	beq.n	80016ec <HAL_GPIO_Init+0x48>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d007      	beq.n	80016ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016e0:	2b11      	cmp	r3, #17
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b12      	cmp	r3, #18
 80016ea:	d130      	bne.n	800174e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001722:	2201      	movs	r2, #1
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4013      	ands	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	091b      	lsrs	r3, r3, #4
 8001738:	f003 0201 	and.w	r2, r3, #1
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0xea>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b12      	cmp	r3, #18
 800178c:	d123      	bne.n	80017d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	08da      	lsrs	r2, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3208      	adds	r2, #8
 8001796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	220f      	movs	r2, #15
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	08da      	lsrs	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3208      	adds	r2, #8
 80017d0:	6939      	ldr	r1, [r7, #16]
 80017d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0203 	and.w	r2, r3, #3
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 80a0 	beq.w	8001958 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001818:	4b58      	ldr	r3, [pc, #352]	; (800197c <HAL_GPIO_Init+0x2d8>)
 800181a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181c:	4a57      	ldr	r2, [pc, #348]	; (800197c <HAL_GPIO_Init+0x2d8>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6613      	str	r3, [r2, #96]	; 0x60
 8001824:	4b55      	ldr	r3, [pc, #340]	; (800197c <HAL_GPIO_Init+0x2d8>)
 8001826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001830:	4a53      	ldr	r2, [pc, #332]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	089b      	lsrs	r3, r3, #2
 8001836:	3302      	adds	r3, #2
 8001838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	220f      	movs	r2, #15
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800185a:	d019      	beq.n	8001890 <HAL_GPIO_Init+0x1ec>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a49      	ldr	r2, [pc, #292]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d013      	beq.n	800188c <HAL_GPIO_Init+0x1e8>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a48      	ldr	r2, [pc, #288]	; (8001988 <HAL_GPIO_Init+0x2e4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d00d      	beq.n	8001888 <HAL_GPIO_Init+0x1e4>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a47      	ldr	r2, [pc, #284]	; (800198c <HAL_GPIO_Init+0x2e8>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d007      	beq.n	8001884 <HAL_GPIO_Init+0x1e0>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a46      	ldr	r2, [pc, #280]	; (8001990 <HAL_GPIO_Init+0x2ec>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d101      	bne.n	8001880 <HAL_GPIO_Init+0x1dc>
 800187c:	2304      	movs	r3, #4
 800187e:	e008      	b.n	8001892 <HAL_GPIO_Init+0x1ee>
 8001880:	2307      	movs	r3, #7
 8001882:	e006      	b.n	8001892 <HAL_GPIO_Init+0x1ee>
 8001884:	2303      	movs	r3, #3
 8001886:	e004      	b.n	8001892 <HAL_GPIO_Init+0x1ee>
 8001888:	2302      	movs	r3, #2
 800188a:	e002      	b.n	8001892 <HAL_GPIO_Init+0x1ee>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <HAL_GPIO_Init+0x1ee>
 8001890:	2300      	movs	r3, #0
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	f002 0203 	and.w	r2, r2, #3
 8001898:	0092      	lsls	r2, r2, #2
 800189a:	4093      	lsls	r3, r2
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018a2:	4937      	ldr	r1, [pc, #220]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	3302      	adds	r3, #2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018b0:	4b38      	ldr	r3, [pc, #224]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018d4:	4a2f      	ldr	r2, [pc, #188]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80018da:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018fe:	4a25      	ldr	r2, [pc, #148]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001904:	4b23      	ldr	r3, [pc, #140]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001928:	4a1a      	ldr	r2, [pc, #104]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	43db      	mvns	r3, r3
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4013      	ands	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001952:	4a10      	ldr	r2, [pc, #64]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3301      	adds	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	f47f aea3 	bne.w	80016b4 <HAL_GPIO_Init+0x10>
  }
}
 800196e:	bf00      	nop
 8001970:	371c      	adds	r7, #28
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000
 8001980:	40010000 	.word	0x40010000
 8001984:	48000400 	.word	0x48000400
 8001988:	48000800 	.word	0x48000800
 800198c:	48000c00 	.word	0x48000c00
 8001990:	48001000 	.word	0x48001000
 8001994:	40010400 	.word	0x40010400

08001998 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40007000 	.word	0x40007000

080019b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c2:	d130      	bne.n	8001a26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019c4:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019d0:	d038      	beq.n	8001a44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d2:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019da:	4a1e      	ldr	r2, [pc, #120]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019e2:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2232      	movs	r2, #50	; 0x32
 80019e8:	fb02 f303 	mul.w	r3, r2, r3
 80019ec:	4a1b      	ldr	r2, [pc, #108]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	0c9b      	lsrs	r3, r3, #18
 80019f4:	3301      	adds	r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019f8:	e002      	b.n	8001a00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0c:	d102      	bne.n	8001a14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1f2      	bne.n	80019fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a20:	d110      	bne.n	8001a44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e00f      	b.n	8001a46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a32:	d007      	beq.n	8001a44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a3c:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40007000 	.word	0x40007000
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	431bde83 	.word	0x431bde83

08001a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d102      	bne.n	8001a74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	f000 bc11 	b.w	8002296 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a74:	4ba0      	ldr	r3, [pc, #640]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a7e:	4b9e      	ldr	r3, [pc, #632]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0310 	and.w	r3, r3, #16
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80e4 	beq.w	8001c5e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d007      	beq.n	8001aac <HAL_RCC_OscConfig+0x4c>
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	f040 808b 	bne.w	8001bba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	f040 8087 	bne.w	8001bba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aac:	4b92      	ldr	r3, [pc, #584]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x64>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e3e8      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1a      	ldr	r2, [r3, #32]
 8001ac8:	4b8b      	ldr	r3, [pc, #556]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d004      	beq.n	8001ade <HAL_RCC_OscConfig+0x7e>
 8001ad4:	4b88      	ldr	r3, [pc, #544]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001adc:	e005      	b.n	8001aea <HAL_RCC_OscConfig+0x8a>
 8001ade:	4b86      	ldr	r3, [pc, #536]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae4:	091b      	lsrs	r3, r3, #4
 8001ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d223      	bcs.n	8001b36 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 fdaa 	bl	800264c <RCC_SetFlashLatencyFromMSIRange>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e3c9      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b02:	4b7d      	ldr	r3, [pc, #500]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a7c      	ldr	r2, [pc, #496]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001b08:	f043 0308 	orr.w	r3, r3, #8
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b7a      	ldr	r3, [pc, #488]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	4977      	ldr	r1, [pc, #476]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b20:	4b75      	ldr	r3, [pc, #468]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	021b      	lsls	r3, r3, #8
 8001b2e:	4972      	ldr	r1, [pc, #456]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
 8001b34:	e025      	b.n	8001b82 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b36:	4b70      	ldr	r3, [pc, #448]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a6f      	ldr	r2, [pc, #444]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001b3c:	f043 0308 	orr.w	r3, r3, #8
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	4b6d      	ldr	r3, [pc, #436]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	496a      	ldr	r1, [pc, #424]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b54:	4b68      	ldr	r3, [pc, #416]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	4965      	ldr	r1, [pc, #404]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d109      	bne.n	8001b82 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 fd6a 	bl	800264c <RCC_SetFlashLatencyFromMSIRange>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e389      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b82:	f000 fc6f 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8001b86:	4601      	mov	r1, r0
 8001b88:	4b5b      	ldr	r3, [pc, #364]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	4a5a      	ldr	r2, [pc, #360]	; (8001cfc <HAL_RCC_OscConfig+0x29c>)
 8001b94:	5cd3      	ldrb	r3, [r2, r3]
 8001b96:	f003 031f 	and.w	r3, r3, #31
 8001b9a:	fa21 f303 	lsr.w	r3, r1, r3
 8001b9e:	4a58      	ldr	r2, [pc, #352]	; (8001d00 <HAL_RCC_OscConfig+0x2a0>)
 8001ba0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ba2:	4b58      	ldr	r3, [pc, #352]	; (8001d04 <HAL_RCC_OscConfig+0x2a4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fb3c 	bl	8001224 <HAL_InitTick>
 8001bac:	4603      	mov	r3, r0
 8001bae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d052      	beq.n	8001c5c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	e36d      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d032      	beq.n	8001c28 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bc2:	4b4d      	ldr	r3, [pc, #308]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a4c      	ldr	r2, [pc, #304]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bce:	f7ff fbfb 	bl	80013c8 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bd6:	f7ff fbf7 	bl	80013c8 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e356      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001be8:	4b43      	ldr	r3, [pc, #268]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bf4:	4b40      	ldr	r3, [pc, #256]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a3f      	ldr	r2, [pc, #252]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001bfa:	f043 0308 	orr.w	r3, r3, #8
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b3d      	ldr	r3, [pc, #244]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	493a      	ldr	r1, [pc, #232]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c12:	4b39      	ldr	r3, [pc, #228]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	4935      	ldr	r1, [pc, #212]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
 8001c26:	e01a      	b.n	8001c5e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c28:	4b33      	ldr	r3, [pc, #204]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a32      	ldr	r2, [pc, #200]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001c2e:	f023 0301 	bic.w	r3, r3, #1
 8001c32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c34:	f7ff fbc8 	bl	80013c8 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c3c:	f7ff fbc4 	bl	80013c8 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e323      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c4e:	4b2a      	ldr	r3, [pc, #168]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x1dc>
 8001c5a:	e000      	b.n	8001c5e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d073      	beq.n	8001d52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_OscConfig+0x21c>
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	2b0c      	cmp	r3, #12
 8001c74:	d10e      	bne.n	8001c94 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d10b      	bne.n	8001c94 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7c:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d063      	beq.n	8001d50 <HAL_RCC_OscConfig+0x2f0>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d15f      	bne.n	8001d50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e300      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c9c:	d106      	bne.n	8001cac <HAL_RCC_OscConfig+0x24c>
 8001c9e:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a15      	ldr	r2, [pc, #84]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e01d      	b.n	8001ce8 <HAL_RCC_OscConfig+0x288>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x270>
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a0f      	ldr	r2, [pc, #60]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a0c      	ldr	r2, [pc, #48]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e00b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x288>
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a08      	ldr	r2, [pc, #32]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <HAL_RCC_OscConfig+0x298>)
 8001ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d01b      	beq.n	8001d28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fb6a 	bl	80013c8 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cf6:	e010      	b.n	8001d1a <HAL_RCC_OscConfig+0x2ba>
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	08009978 	.word	0x08009978
 8001d00:	20000000 	.word	0x20000000
 8001d04:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff fb5e 	bl	80013c8 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	; 0x64
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e2bd      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1a:	4baf      	ldr	r3, [pc, #700]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0x2a8>
 8001d26:	e014      	b.n	8001d52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff fb4e 	bl	80013c8 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff fb4a 	bl	80013c8 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e2a9      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d42:	4ba5      	ldr	r3, [pc, #660]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x2d0>
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d060      	beq.n	8001e20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_OscConfig+0x310>
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d119      	bne.n	8001d9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d116      	bne.n	8001d9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d70:	4b99      	ldr	r3, [pc, #612]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_OscConfig+0x328>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e286      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d88:	4b93      	ldr	r3, [pc, #588]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	061b      	lsls	r3, r3, #24
 8001d96:	4990      	ldr	r1, [pc, #576]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d9c:	e040      	b.n	8001e20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d023      	beq.n	8001dee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da6:	4b8c      	ldr	r3, [pc, #560]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a8b      	ldr	r2, [pc, #556]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db2:	f7ff fb09 	bl	80013c8 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dba:	f7ff fb05 	bl	80013c8 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e264      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dcc:	4b82      	ldr	r3, [pc, #520]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd8:	4b7f      	ldr	r3, [pc, #508]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	061b      	lsls	r3, r3, #24
 8001de6:	497c      	ldr	r1, [pc, #496]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
 8001dec:	e018      	b.n	8001e20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dee:	4b7a      	ldr	r3, [pc, #488]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a79      	ldr	r2, [pc, #484]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfa:	f7ff fae5 	bl	80013c8 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e02:	f7ff fae1 	bl	80013c8 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e240      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e14:	4b70      	ldr	r3, [pc, #448]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f0      	bne.n	8001e02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d03c      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d01c      	beq.n	8001e6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e34:	4b68      	ldr	r3, [pc, #416]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3a:	4a67      	ldr	r2, [pc, #412]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e44:	f7ff fac0 	bl	80013c8 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4c:	f7ff fabc 	bl	80013c8 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e21b      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e5e:	4b5e      	ldr	r3, [pc, #376]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0ef      	beq.n	8001e4c <HAL_RCC_OscConfig+0x3ec>
 8001e6c:	e01b      	b.n	8001ea6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e6e:	4b5a      	ldr	r3, [pc, #360]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e74:	4a58      	ldr	r2, [pc, #352]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001e76:	f023 0301 	bic.w	r3, r3, #1
 8001e7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7e:	f7ff faa3 	bl	80013c8 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e86:	f7ff fa9f 	bl	80013c8 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e1fe      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e98:	4b4f      	ldr	r3, [pc, #316]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1ef      	bne.n	8001e86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 80a6 	beq.w	8002000 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001eb8:	4b47      	ldr	r3, [pc, #284]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10d      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec4:	4b44      	ldr	r3, [pc, #272]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	4a43      	ldr	r2, [pc, #268]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ece:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed0:	4b41      	ldr	r3, [pc, #260]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001edc:	2301      	movs	r3, #1
 8001ede:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee0:	4b3e      	ldr	r3, [pc, #248]	; (8001fdc <HAL_RCC_OscConfig+0x57c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d118      	bne.n	8001f1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eec:	4b3b      	ldr	r3, [pc, #236]	; (8001fdc <HAL_RCC_OscConfig+0x57c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a3a      	ldr	r2, [pc, #232]	; (8001fdc <HAL_RCC_OscConfig+0x57c>)
 8001ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef8:	f7ff fa66 	bl	80013c8 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f00:	f7ff fa62 	bl	80013c8 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e1c1      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f12:	4b32      	ldr	r3, [pc, #200]	; (8001fdc <HAL_RCC_OscConfig+0x57c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d108      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4d8>
 8001f26:	4b2c      	ldr	r3, [pc, #176]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2c:	4a2a      	ldr	r2, [pc, #168]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f36:	e024      	b.n	8001f82 <HAL_RCC_OscConfig+0x522>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	d110      	bne.n	8001f62 <HAL_RCC_OscConfig+0x502>
 8001f40:	4b25      	ldr	r3, [pc, #148]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	4a24      	ldr	r2, [pc, #144]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f50:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f56:	4a20      	ldr	r2, [pc, #128]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f60:	e00f      	b.n	8001f82 <HAL_RCC_OscConfig+0x522>
 8001f62:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f68:	4a1b      	ldr	r2, [pc, #108]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001f6a:	f023 0301 	bic.w	r3, r3, #1
 8001f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f72:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f78:	4a17      	ldr	r2, [pc, #92]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001f7a:	f023 0304 	bic.w	r3, r3, #4
 8001f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d016      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8a:	f7ff fa1d 	bl	80013c8 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f92:	f7ff fa19 	bl	80013c8 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e176      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_OscConfig+0x578>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0ed      	beq.n	8001f92 <HAL_RCC_OscConfig+0x532>
 8001fb6:	e01a      	b.n	8001fee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb8:	f7ff fa06 	bl	80013c8 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fbe:	e00f      	b.n	8001fe0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc0:	f7ff fa02 	bl	80013c8 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d906      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e15f      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fe0:	4baa      	ldr	r3, [pc, #680]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1e8      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fee:	7ffb      	ldrb	r3, [r7, #31]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d105      	bne.n	8002000 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff4:	4ba5      	ldr	r3, [pc, #660]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	4aa4      	ldr	r2, [pc, #656]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 8001ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0320 	and.w	r3, r3, #32
 8002008:	2b00      	cmp	r3, #0
 800200a:	d03c      	beq.n	8002086 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01c      	beq.n	800204e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002014:	4b9d      	ldr	r3, [pc, #628]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 8002016:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800201a:	4a9c      	ldr	r2, [pc, #624]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7ff f9d0 	bl	80013c8 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800202c:	f7ff f9cc 	bl	80013c8 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e12b      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800203e:	4b93      	ldr	r3, [pc, #588]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 8002040:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0ef      	beq.n	800202c <HAL_RCC_OscConfig+0x5cc>
 800204c:	e01b      	b.n	8002086 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800204e:	4b8f      	ldr	r3, [pc, #572]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 8002050:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002054:	4a8d      	ldr	r2, [pc, #564]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 8002056:	f023 0301 	bic.w	r3, r3, #1
 800205a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205e:	f7ff f9b3 	bl	80013c8 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002066:	f7ff f9af 	bl	80013c8 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e10e      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002078:	4b84      	ldr	r3, [pc, #528]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 800207a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1ef      	bne.n	8002066 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8102 	beq.w	8002294 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	2b02      	cmp	r3, #2
 8002096:	f040 80c5 	bne.w	8002224 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800209a:	4b7c      	ldr	r3, [pc, #496]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f003 0203 	and.w	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d12c      	bne.n	8002108 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	3b01      	subs	r3, #1
 80020ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020bc:	429a      	cmp	r2, r3
 80020be:	d123      	bne.n	8002108 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d11b      	bne.n	8002108 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d113      	bne.n	8002108 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	3b01      	subs	r3, #1
 80020ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d109      	bne.n	8002108 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	085b      	lsrs	r3, r3, #1
 8002100:	3b01      	subs	r3, #1
 8002102:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002104:	429a      	cmp	r2, r3
 8002106:	d067      	beq.n	80021d8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2b0c      	cmp	r3, #12
 800210c:	d062      	beq.n	80021d4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800210e:	4b5f      	ldr	r3, [pc, #380]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e0bb      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800211e:	4b5b      	ldr	r3, [pc, #364]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a5a      	ldr	r2, [pc, #360]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 8002124:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002128:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800212a:	f7ff f94d 	bl	80013c8 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002132:	f7ff f949 	bl	80013c8 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e0a8      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002144:	4b51      	ldr	r3, [pc, #324]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1f0      	bne.n	8002132 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002150:	4b4e      	ldr	r3, [pc, #312]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	4b4e      	ldr	r3, [pc, #312]	; (8002290 <HAL_RCC_OscConfig+0x830>)
 8002156:	4013      	ands	r3, r2
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002160:	3a01      	subs	r2, #1
 8002162:	0112      	lsls	r2, r2, #4
 8002164:	4311      	orrs	r1, r2
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800216a:	0212      	lsls	r2, r2, #8
 800216c:	4311      	orrs	r1, r2
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002172:	0852      	lsrs	r2, r2, #1
 8002174:	3a01      	subs	r2, #1
 8002176:	0552      	lsls	r2, r2, #21
 8002178:	4311      	orrs	r1, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800217e:	0852      	lsrs	r2, r2, #1
 8002180:	3a01      	subs	r2, #1
 8002182:	0652      	lsls	r2, r2, #25
 8002184:	4311      	orrs	r1, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800218a:	06d2      	lsls	r2, r2, #27
 800218c:	430a      	orrs	r2, r1
 800218e:	493f      	ldr	r1, [pc, #252]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 8002190:	4313      	orrs	r3, r2
 8002192:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002194:	4b3d      	ldr	r3, [pc, #244]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a3c      	ldr	r2, [pc, #240]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 800219a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021a0:	4b3a      	ldr	r3, [pc, #232]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4a39      	ldr	r2, [pc, #228]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 80021a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021ac:	f7ff f90c 	bl	80013c8 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b4:	f7ff f908 	bl	80013c8 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e067      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c6:	4b31      	ldr	r3, [pc, #196]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021d2:	e05f      	b.n	8002294 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e05e      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d8:	4b2c      	ldr	r3, [pc, #176]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d157      	bne.n	8002294 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021e4:	4b29      	ldr	r3, [pc, #164]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a28      	ldr	r2, [pc, #160]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 80021ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021f0:	4b26      	ldr	r3, [pc, #152]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4a25      	ldr	r2, [pc, #148]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 80021f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021fc:	f7ff f8e4 	bl	80013c8 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002204:	f7ff f8e0 	bl	80013c8 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e03f      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002216:	4b1d      	ldr	r3, [pc, #116]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0x7a4>
 8002222:	e037      	b.n	8002294 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d02d      	beq.n	8002286 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222a:	4b18      	ldr	r3, [pc, #96]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a17      	ldr	r2, [pc, #92]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 8002230:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002234:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002236:	4b15      	ldr	r3, [pc, #84]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002242:	4b12      	ldr	r3, [pc, #72]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	4a11      	ldr	r2, [pc, #68]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 8002248:	f023 0303 	bic.w	r3, r3, #3
 800224c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800224e:	4b0f      	ldr	r3, [pc, #60]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	4a0e      	ldr	r2, [pc, #56]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 8002254:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7ff f8b3 	bl	80013c8 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002266:	f7ff f8af 	bl	80013c8 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e00e      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <HAL_RCC_OscConfig+0x82c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f0      	bne.n	8002266 <HAL_RCC_OscConfig+0x806>
 8002284:	e006      	b.n	8002294 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e005      	b.n	8002296 <HAL_RCC_OscConfig+0x836>
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
 8002290:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3720      	adds	r7, #32
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop

080022a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0c8      	b.n	8002446 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022b4:	4b66      	ldr	r3, [pc, #408]	; (8002450 <HAL_RCC_ClockConfig+0x1b0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d910      	bls.n	80022e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c2:	4b63      	ldr	r3, [pc, #396]	; (8002450 <HAL_RCC_ClockConfig+0x1b0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 0207 	bic.w	r2, r3, #7
 80022ca:	4961      	ldr	r1, [pc, #388]	; (8002450 <HAL_RCC_ClockConfig+0x1b0>)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d2:	4b5f      	ldr	r3, [pc, #380]	; (8002450 <HAL_RCC_ClockConfig+0x1b0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0b0      	b.n	8002446 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d04c      	beq.n	800238a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d107      	bne.n	8002308 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f8:	4b56      	ldr	r3, [pc, #344]	; (8002454 <HAL_RCC_ClockConfig+0x1b4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d121      	bne.n	8002348 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e09e      	b.n	8002446 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d107      	bne.n	8002320 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002310:	4b50      	ldr	r3, [pc, #320]	; (8002454 <HAL_RCC_ClockConfig+0x1b4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d115      	bne.n	8002348 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e092      	b.n	8002446 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d107      	bne.n	8002338 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002328:	4b4a      	ldr	r3, [pc, #296]	; (8002454 <HAL_RCC_ClockConfig+0x1b4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d109      	bne.n	8002348 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e086      	b.n	8002446 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002338:	4b46      	ldr	r3, [pc, #280]	; (8002454 <HAL_RCC_ClockConfig+0x1b4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e07e      	b.n	8002446 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002348:	4b42      	ldr	r3, [pc, #264]	; (8002454 <HAL_RCC_ClockConfig+0x1b4>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f023 0203 	bic.w	r2, r3, #3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	493f      	ldr	r1, [pc, #252]	; (8002454 <HAL_RCC_ClockConfig+0x1b4>)
 8002356:	4313      	orrs	r3, r2
 8002358:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800235a:	f7ff f835 	bl	80013c8 <HAL_GetTick>
 800235e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002360:	e00a      	b.n	8002378 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002362:	f7ff f831 	bl	80013c8 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e066      	b.n	8002446 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002378:	4b36      	ldr	r3, [pc, #216]	; (8002454 <HAL_RCC_ClockConfig+0x1b4>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 020c 	and.w	r2, r3, #12
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	429a      	cmp	r2, r3
 8002388:	d1eb      	bne.n	8002362 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d008      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002396:	4b2f      	ldr	r3, [pc, #188]	; (8002454 <HAL_RCC_ClockConfig+0x1b4>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	492c      	ldr	r1, [pc, #176]	; (8002454 <HAL_RCC_ClockConfig+0x1b4>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a8:	4b29      	ldr	r3, [pc, #164]	; (8002450 <HAL_RCC_ClockConfig+0x1b0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d210      	bcs.n	80023d8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	4b26      	ldr	r3, [pc, #152]	; (8002450 <HAL_RCC_ClockConfig+0x1b0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 0207 	bic.w	r2, r3, #7
 80023be:	4924      	ldr	r1, [pc, #144]	; (8002450 <HAL_RCC_ClockConfig+0x1b0>)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c6:	4b22      	ldr	r3, [pc, #136]	; (8002450 <HAL_RCC_ClockConfig+0x1b0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e036      	b.n	8002446 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e4:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <HAL_RCC_ClockConfig+0x1b4>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4918      	ldr	r1, [pc, #96]	; (8002454 <HAL_RCC_ClockConfig+0x1b4>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d009      	beq.n	8002416 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <HAL_RCC_ClockConfig+0x1b4>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4910      	ldr	r1, [pc, #64]	; (8002454 <HAL_RCC_ClockConfig+0x1b4>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002416:	f000 f825 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 800241a:	4601      	mov	r1, r0
 800241c:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <HAL_RCC_ClockConfig+0x1b4>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	4a0c      	ldr	r2, [pc, #48]	; (8002458 <HAL_RCC_ClockConfig+0x1b8>)
 8002428:	5cd3      	ldrb	r3, [r2, r3]
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	fa21 f303 	lsr.w	r3, r1, r3
 8002432:	4a0a      	ldr	r2, [pc, #40]	; (800245c <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <HAL_RCC_ClockConfig+0x1c0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fef2 	bl	8001224 <HAL_InitTick>
 8002440:	4603      	mov	r3, r0
 8002442:	72fb      	strb	r3, [r7, #11]

  return status;
 8002444:	7afb      	ldrb	r3, [r7, #11]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40022000 	.word	0x40022000
 8002454:	40021000 	.word	0x40021000
 8002458:	08009978 	.word	0x08009978
 800245c:	20000000 	.word	0x20000000
 8002460:	20000004 	.word	0x20000004

08002464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002472:	4b3d      	ldr	r3, [pc, #244]	; (8002568 <HAL_RCC_GetSysClockFreq+0x104>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800247c:	4b3a      	ldr	r3, [pc, #232]	; (8002568 <HAL_RCC_GetSysClockFreq+0x104>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0x34>
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	2b0c      	cmp	r3, #12
 8002490:	d121      	bne.n	80024d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d11e      	bne.n	80024d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002498:	4b33      	ldr	r3, [pc, #204]	; (8002568 <HAL_RCC_GetSysClockFreq+0x104>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0308 	and.w	r3, r3, #8
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d107      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024a4:	4b30      	ldr	r3, [pc, #192]	; (8002568 <HAL_RCC_GetSysClockFreq+0x104>)
 80024a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024aa:	0a1b      	lsrs	r3, r3, #8
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	e005      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024b4:	4b2c      	ldr	r3, [pc, #176]	; (8002568 <HAL_RCC_GetSysClockFreq+0x104>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024c0:	4a2a      	ldr	r2, [pc, #168]	; (800256c <HAL_RCC_GetSysClockFreq+0x108>)
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10d      	bne.n	80024ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024d4:	e00a      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d102      	bne.n	80024e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024dc:	4b24      	ldr	r3, [pc, #144]	; (8002570 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024de:	61bb      	str	r3, [r7, #24]
 80024e0:	e004      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024e8:	4b22      	ldr	r3, [pc, #136]	; (8002574 <HAL_RCC_GetSysClockFreq+0x110>)
 80024ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	2b0c      	cmp	r3, #12
 80024f0:	d133      	bne.n	800255a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024f2:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <HAL_RCC_GetSysClockFreq+0x104>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d002      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0xa4>
 8002502:	2b03      	cmp	r3, #3
 8002504:	d003      	beq.n	800250e <HAL_RCC_GetSysClockFreq+0xaa>
 8002506:	e005      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_RCC_GetSysClockFreq+0x10c>)
 800250a:	617b      	str	r3, [r7, #20]
      break;
 800250c:	e005      	b.n	800251a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800250e:	4b19      	ldr	r3, [pc, #100]	; (8002574 <HAL_RCC_GetSysClockFreq+0x110>)
 8002510:	617b      	str	r3, [r7, #20]
      break;
 8002512:	e002      	b.n	800251a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	617b      	str	r3, [r7, #20]
      break;
 8002518:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800251a:	4b13      	ldr	r3, [pc, #76]	; (8002568 <HAL_RCC_GetSysClockFreq+0x104>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	3301      	adds	r3, #1
 8002526:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <HAL_RCC_GetSysClockFreq+0x104>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	fb02 f203 	mul.w	r2, r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002540:	4b09      	ldr	r3, [pc, #36]	; (8002568 <HAL_RCC_GetSysClockFreq+0x104>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	0e5b      	lsrs	r3, r3, #25
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	3301      	adds	r3, #1
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	fbb2 f3f3 	udiv	r3, r2, r3
 8002558:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800255a:	69bb      	ldr	r3, [r7, #24]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3724      	adds	r7, #36	; 0x24
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	40021000 	.word	0x40021000
 800256c:	08009990 	.word	0x08009990
 8002570:	00f42400 	.word	0x00f42400
 8002574:	007a1200 	.word	0x007a1200

08002578 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <HAL_RCC_GetHCLKFreq+0x14>)
 800257e:	681b      	ldr	r3, [r3, #0]
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	20000000 	.word	0x20000000

08002590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002594:	f7ff fff0 	bl	8002578 <HAL_RCC_GetHCLKFreq>
 8002598:	4601      	mov	r1, r0
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	0a1b      	lsrs	r3, r3, #8
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025a6:	5cd3      	ldrb	r3, [r2, r3]
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000
 80025b8:	08009988 	.word	0x08009988

080025bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025c0:	f7ff ffda 	bl	8002578 <HAL_RCC_GetHCLKFreq>
 80025c4:	4601      	mov	r1, r0
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	0adb      	lsrs	r3, r3, #11
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025d2:	5cd3      	ldrb	r3, [r2, r3]
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025dc:	4618      	mov	r0, r3
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000
 80025e4:	08009988 	.word	0x08009988

080025e8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	220f      	movs	r2, #15
 80025f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80025f8:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_RCC_GetClockConfig+0x5c>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0203 	and.w	r2, r3, #3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002604:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <HAL_RCC_GetClockConfig+0x5c>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <HAL_RCC_GetClockConfig+0x5c>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <HAL_RCC_GetClockConfig+0x5c>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	08db      	lsrs	r3, r3, #3
 8002622:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <HAL_RCC_GetClockConfig+0x60>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0207 	and.w	r2, r3, #7
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	601a      	str	r2, [r3, #0]
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
 8002648:	40022000 	.word	0x40022000

0800264c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002654:	2300      	movs	r3, #0
 8002656:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002658:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002664:	f7ff f998 	bl	8001998 <HAL_PWREx_GetVoltageRange>
 8002668:	6178      	str	r0, [r7, #20]
 800266a:	e014      	b.n	8002696 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800266c:	4b25      	ldr	r3, [pc, #148]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800266e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002670:	4a24      	ldr	r2, [pc, #144]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002676:	6593      	str	r3, [r2, #88]	; 0x58
 8002678:	4b22      	ldr	r3, [pc, #136]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002684:	f7ff f988 	bl	8001998 <HAL_PWREx_GetVoltageRange>
 8002688:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800268a:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	4a1d      	ldr	r2, [pc, #116]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002694:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800269c:	d10b      	bne.n	80026b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b80      	cmp	r3, #128	; 0x80
 80026a2:	d919      	bls.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2ba0      	cmp	r3, #160	; 0xa0
 80026a8:	d902      	bls.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026aa:	2302      	movs	r3, #2
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	e013      	b.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026b0:	2301      	movs	r3, #1
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	e010      	b.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b80      	cmp	r3, #128	; 0x80
 80026ba:	d902      	bls.n	80026c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026bc:	2303      	movs	r3, #3
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	e00a      	b.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b80      	cmp	r3, #128	; 0x80
 80026c6:	d102      	bne.n	80026ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026c8:	2302      	movs	r3, #2
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	e004      	b.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b70      	cmp	r3, #112	; 0x70
 80026d2:	d101      	bne.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026d4:	2301      	movs	r3, #1
 80026d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f023 0207 	bic.w	r2, r3, #7
 80026e0:	4909      	ldr	r1, [pc, #36]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026e8:	4b07      	ldr	r3, [pc, #28]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d001      	beq.n	80026fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000
 8002708:	40022000 	.word	0x40022000

0800270c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002714:	2300      	movs	r3, #0
 8002716:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002718:	2300      	movs	r3, #0
 800271a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002724:	2b00      	cmp	r3, #0
 8002726:	d02f      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002730:	d005      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002732:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002736:	d015      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002738:	2b00      	cmp	r3, #0
 800273a:	d007      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800273c:	e00f      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800273e:	4b5d      	ldr	r3, [pc, #372]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	4a5c      	ldr	r2, [pc, #368]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002748:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800274a:	e00c      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3304      	adds	r3, #4
 8002750:	2100      	movs	r1, #0
 8002752:	4618      	mov	r0, r3
 8002754:	f000 fa1e 	bl	8002b94 <RCCEx_PLLSAI1_Config>
 8002758:	4603      	mov	r3, r0
 800275a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800275c:	e003      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	74fb      	strb	r3, [r7, #19]
      break;
 8002762:	e000      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002766:	7cfb      	ldrb	r3, [r7, #19]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10b      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800276c:	4b51      	ldr	r3, [pc, #324]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002772:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	494e      	ldr	r1, [pc, #312]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002782:	e001      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002784:	7cfb      	ldrb	r3, [r7, #19]
 8002786:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 809e 	beq.w	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002796:	2300      	movs	r3, #0
 8002798:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800279a:	4b46      	ldr	r3, [pc, #280]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800279c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80027aa:	2300      	movs	r3, #0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00d      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b0:	4b40      	ldr	r3, [pc, #256]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b4:	4a3f      	ldr	r2, [pc, #252]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ba:	6593      	str	r3, [r2, #88]	; 0x58
 80027bc:	4b3d      	ldr	r3, [pc, #244]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c8:	2301      	movs	r3, #1
 80027ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027cc:	4b3a      	ldr	r3, [pc, #232]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a39      	ldr	r2, [pc, #228]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027d8:	f7fe fdf6 	bl	80013c8 <HAL_GetTick>
 80027dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027de:	e009      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e0:	f7fe fdf2 	bl	80013c8 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d902      	bls.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	74fb      	strb	r3, [r7, #19]
        break;
 80027f2:	e005      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027f4:	4b30      	ldr	r3, [pc, #192]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0ef      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002800:	7cfb      	ldrb	r3, [r7, #19]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d15a      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002806:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002810:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01e      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	429a      	cmp	r2, r3
 8002820:	d019      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002822:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800282c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800282e:	4b21      	ldr	r3, [pc, #132]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002834:	4a1f      	ldr	r2, [pc, #124]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800283e:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	4a1b      	ldr	r2, [pc, #108]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800284e:	4a19      	ldr	r2, [pc, #100]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d016      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe fdb2 	bl	80013c8 <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002866:	e00b      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002868:	f7fe fdae 	bl	80013c8 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	; 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d902      	bls.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	74fb      	strb	r3, [r7, #19]
            break;
 800287e:	e006      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0ec      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800288e:	7cfb      	ldrb	r3, [r7, #19]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10b      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002894:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a2:	4904      	ldr	r1, [pc, #16]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028aa:	e009      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
 80028ae:	74bb      	strb	r3, [r7, #18]
 80028b0:	e006      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028c0:	7c7b      	ldrb	r3, [r7, #17]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d105      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c6:	4bb2      	ldr	r3, [pc, #712]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ca:	4ab1      	ldr	r2, [pc, #708]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80028cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028de:	4bac      	ldr	r3, [pc, #688]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80028e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e4:	f023 0203 	bic.w	r2, r3, #3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	49a8      	ldr	r1, [pc, #672]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002900:	4ba3      	ldr	r3, [pc, #652]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	f023 020c 	bic.w	r2, r3, #12
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	49a0      	ldr	r1, [pc, #640]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002922:	4b9b      	ldr	r3, [pc, #620]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002928:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002930:	4997      	ldr	r1, [pc, #604]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00a      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002944:	4b92      	ldr	r3, [pc, #584]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002952:	498f      	ldr	r1, [pc, #572]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002966:	4b8a      	ldr	r3, [pc, #552]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002974:	4986      	ldr	r1, [pc, #536]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002988:	4b81      	ldr	r3, [pc, #516]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	497e      	ldr	r1, [pc, #504]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029aa:	4b79      	ldr	r3, [pc, #484]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	4975      	ldr	r1, [pc, #468]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029cc:	4b70      	ldr	r3, [pc, #448]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029da:	496d      	ldr	r1, [pc, #436]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029ee:	4b68      	ldr	r3, [pc, #416]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80029f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	4964      	ldr	r1, [pc, #400]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d028      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a10:	4b5f      	ldr	r3, [pc, #380]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1e:	495c      	ldr	r1, [pc, #368]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a2e:	d106      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a30:	4b57      	ldr	r3, [pc, #348]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4a56      	ldr	r2, [pc, #344]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3a:	60d3      	str	r3, [r2, #12]
 8002a3c:	e011      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a46:	d10c      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f8a0 	bl	8002b94 <RCCEx_PLLSAI1_Config>
 8002a54:	4603      	mov	r3, r0
 8002a56:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 8002a5e:	7cfb      	ldrb	r3, [r7, #19]
 8002a60:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d028      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a6e:	4b48      	ldr	r3, [pc, #288]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7c:	4944      	ldr	r1, [pc, #272]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a8c:	d106      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a8e:	4b40      	ldr	r3, [pc, #256]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	4a3f      	ldr	r2, [pc, #252]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002a94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a98:	60d3      	str	r3, [r2, #12]
 8002a9a:	e011      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	2101      	movs	r1, #1
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 f871 	bl	8002b94 <RCCEx_PLLSAI1_Config>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ab6:	7cfb      	ldrb	r3, [r7, #19]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002abc:	7cfb      	ldrb	r3, [r7, #19]
 8002abe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d028      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002acc:	4b30      	ldr	r3, [pc, #192]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ada:	492d      	ldr	r1, [pc, #180]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aea:	d106      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aec:	4b28      	ldr	r3, [pc, #160]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4a27      	ldr	r2, [pc, #156]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002af6:	60d3      	str	r3, [r2, #12]
 8002af8:	e011      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b02:	d10c      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3304      	adds	r3, #4
 8002b08:	2101      	movs	r1, #1
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 f842 	bl	8002b94 <RCCEx_PLLSAI1_Config>
 8002b10:	4603      	mov	r3, r0
 8002b12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b14:	7cfb      	ldrb	r3, [r7, #19]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 8002b1a:	7cfb      	ldrb	r3, [r7, #19]
 8002b1c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d01c      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b2a:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b30:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b38:	4915      	ldr	r1, [pc, #84]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	2102      	movs	r1, #2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 f81f 	bl	8002b94 <RCCEx_PLLSAI1_Config>
 8002b56:	4603      	mov	r3, r0
 8002b58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b5a:	7cfb      	ldrb	r3, [r7, #19]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 8002b60:	7cfb      	ldrb	r3, [r7, #19]
 8002b62:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00a      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b70:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b76:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7e:	4904      	ldr	r1, [pc, #16]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b86:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40021000 	.word	0x40021000

08002b94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ba2:	4b73      	ldr	r3, [pc, #460]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d018      	beq.n	8002be0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bae:	4b70      	ldr	r3, [pc, #448]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f003 0203 	and.w	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d10d      	bne.n	8002bda <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
       ||
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bc6:	4b6a      	ldr	r3, [pc, #424]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	091b      	lsrs	r3, r3, #4
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
       ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d044      	beq.n	8002c64 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	e041      	b.n	8002c64 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d00c      	beq.n	8002c02 <RCCEx_PLLSAI1_Config+0x6e>
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d013      	beq.n	8002c14 <RCCEx_PLLSAI1_Config+0x80>
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d120      	bne.n	8002c32 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bf0:	4b5f      	ldr	r3, [pc, #380]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d11d      	bne.n	8002c38 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c00:	e01a      	b.n	8002c38 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c02:	4b5b      	ldr	r3, [pc, #364]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d116      	bne.n	8002c3c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c12:	e013      	b.n	8002c3c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c14:	4b56      	ldr	r3, [pc, #344]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10f      	bne.n	8002c40 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c20:	4b53      	ldr	r3, [pc, #332]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d109      	bne.n	8002c40 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c30:	e006      	b.n	8002c40 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
      break;
 8002c36:	e004      	b.n	8002c42 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c38:	bf00      	nop
 8002c3a:	e002      	b.n	8002c42 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c3c:	bf00      	nop
 8002c3e:	e000      	b.n	8002c42 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c40:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10d      	bne.n	8002c64 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c48:	4b49      	ldr	r3, [pc, #292]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6819      	ldr	r1, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	4944      	ldr	r1, [pc, #272]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d17c      	bne.n	8002d64 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c6a:	4b41      	ldr	r3, [pc, #260]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a40      	ldr	r2, [pc, #256]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c76:	f7fe fba7 	bl	80013c8 <HAL_GetTick>
 8002c7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c7c:	e009      	b.n	8002c92 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c7e:	f7fe fba3 	bl	80013c8 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d902      	bls.n	8002c92 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	73fb      	strb	r3, [r7, #15]
        break;
 8002c90:	e005      	b.n	8002c9e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c92:	4b37      	ldr	r3, [pc, #220]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1ef      	bne.n	8002c7e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d15f      	bne.n	8002d64 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d110      	bne.n	8002ccc <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002caa:	4b31      	ldr	r3, [pc, #196]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002cb2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6892      	ldr	r2, [r2, #8]
 8002cba:	0211      	lsls	r1, r2, #8
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	68d2      	ldr	r2, [r2, #12]
 8002cc0:	06d2      	lsls	r2, r2, #27
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	492a      	ldr	r1, [pc, #168]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	610b      	str	r3, [r1, #16]
 8002cca:	e027      	b.n	8002d1c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d112      	bne.n	8002cf8 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cd2:	4b27      	ldr	r3, [pc, #156]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002cda:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6892      	ldr	r2, [r2, #8]
 8002ce2:	0211      	lsls	r1, r2, #8
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6912      	ldr	r2, [r2, #16]
 8002ce8:	0852      	lsrs	r2, r2, #1
 8002cea:	3a01      	subs	r2, #1
 8002cec:	0552      	lsls	r2, r2, #21
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	491f      	ldr	r1, [pc, #124]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	610b      	str	r3, [r1, #16]
 8002cf6:	e011      	b.n	8002d1c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6892      	ldr	r2, [r2, #8]
 8002d08:	0211      	lsls	r1, r2, #8
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6952      	ldr	r2, [r2, #20]
 8002d0e:	0852      	lsrs	r2, r2, #1
 8002d10:	3a01      	subs	r2, #1
 8002d12:	0652      	lsls	r2, r2, #25
 8002d14:	430a      	orrs	r2, r1
 8002d16:	4916      	ldr	r1, [pc, #88]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d1c:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a13      	ldr	r2, [pc, #76]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d28:	f7fe fb4e 	bl	80013c8 <HAL_GetTick>
 8002d2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d2e:	e009      	b.n	8002d44 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d30:	f7fe fb4a 	bl	80013c8 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d902      	bls.n	8002d44 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	73fb      	strb	r3, [r7, #15]
          break;
 8002d42:	e005      	b.n	8002d50 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d44:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0ef      	beq.n	8002d30 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	4904      	ldr	r1, [pc, #16]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000

08002d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e049      	b.n	8002e1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d106      	bne.n	8002da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f841 	bl	8002e22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3304      	adds	r3, #4
 8002db0:	4619      	mov	r1, r3
 8002db2:	4610      	mov	r0, r2
 8002db4:	f000 f9dc 	bl	8003170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d001      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e03b      	b.n	8002ec8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a19      	ldr	r2, [pc, #100]	; (8002ed4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d009      	beq.n	8002e86 <HAL_TIM_Base_Start_IT+0x4e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7a:	d004      	beq.n	8002e86 <HAL_TIM_Base_Start_IT+0x4e>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a15      	ldr	r2, [pc, #84]	; (8002ed8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d115      	bne.n	8002eb2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	4b13      	ldr	r3, [pc, #76]	; (8002edc <HAL_TIM_Base_Start_IT+0xa4>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b06      	cmp	r3, #6
 8002e96:	d015      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0x8c>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9e:	d011      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb0:	e008      	b.n	8002ec4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f042 0201 	orr.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	e000      	b.n	8002ec6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	40012c00 	.word	0x40012c00
 8002ed8:	40014000 	.word	0x40014000
 8002edc:	00010007 	.word	0x00010007

08002ee0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d122      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d11b      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0202 	mvn.w	r2, #2
 8002f0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f905 	bl	8003132 <HAL_TIM_IC_CaptureCallback>
 8002f28:	e005      	b.n	8002f36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f8f7 	bl	800311e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f908 	bl	8003146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d122      	bne.n	8002f90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d11b      	bne.n	8002f90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0204 	mvn.w	r2, #4
 8002f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2202      	movs	r2, #2
 8002f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f8db 	bl	8003132 <HAL_TIM_IC_CaptureCallback>
 8002f7c:	e005      	b.n	8002f8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f8cd 	bl	800311e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f8de 	bl	8003146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d122      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d11b      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0208 	mvn.w	r2, #8
 8002fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2204      	movs	r2, #4
 8002fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f8b1 	bl	8003132 <HAL_TIM_IC_CaptureCallback>
 8002fd0:	e005      	b.n	8002fde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f8a3 	bl	800311e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f8b4 	bl	8003146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d122      	bne.n	8003038 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b10      	cmp	r3, #16
 8002ffe:	d11b      	bne.n	8003038 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0210 	mvn.w	r2, #16
 8003008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2208      	movs	r2, #8
 800300e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f887 	bl	8003132 <HAL_TIM_IC_CaptureCallback>
 8003024:	e005      	b.n	8003032 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f879 	bl	800311e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f88a 	bl	8003146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b01      	cmp	r3, #1
 8003044:	d10e      	bne.n	8003064 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b01      	cmp	r3, #1
 8003052:	d107      	bne.n	8003064 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0201 	mvn.w	r2, #1
 800305c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fe f84c 	bl	80010fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306e:	2b80      	cmp	r3, #128	; 0x80
 8003070:	d10e      	bne.n	8003090 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307c:	2b80      	cmp	r3, #128	; 0x80
 800307e:	d107      	bne.n	8003090 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f8de 	bl	800324c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800309e:	d10e      	bne.n	80030be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030aa:	2b80      	cmp	r3, #128	; 0x80
 80030ac:	d107      	bne.n	80030be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f8d1 	bl	8003260 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c8:	2b40      	cmp	r3, #64	; 0x40
 80030ca:	d10e      	bne.n	80030ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d6:	2b40      	cmp	r3, #64	; 0x40
 80030d8:	d107      	bne.n	80030ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f838 	bl	800315a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d10e      	bne.n	8003116 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b20      	cmp	r3, #32
 8003104:	d107      	bne.n	8003116 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f06f 0220 	mvn.w	r2, #32
 800310e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f891 	bl	8003238 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a2a      	ldr	r2, [pc, #168]	; (800322c <TIM_Base_SetConfig+0xbc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d003      	beq.n	8003190 <TIM_Base_SetConfig+0x20>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318e:	d108      	bne.n	80031a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a21      	ldr	r2, [pc, #132]	; (800322c <TIM_Base_SetConfig+0xbc>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00b      	beq.n	80031c2 <TIM_Base_SetConfig+0x52>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b0:	d007      	beq.n	80031c2 <TIM_Base_SetConfig+0x52>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a1e      	ldr	r2, [pc, #120]	; (8003230 <TIM_Base_SetConfig+0xc0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d003      	beq.n	80031c2 <TIM_Base_SetConfig+0x52>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a1d      	ldr	r2, [pc, #116]	; (8003234 <TIM_Base_SetConfig+0xc4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d108      	bne.n	80031d4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a0c      	ldr	r2, [pc, #48]	; (800322c <TIM_Base_SetConfig+0xbc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d007      	beq.n	8003210 <TIM_Base_SetConfig+0xa0>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a0b      	ldr	r2, [pc, #44]	; (8003230 <TIM_Base_SetConfig+0xc0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d003      	beq.n	8003210 <TIM_Base_SetConfig+0xa0>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <TIM_Base_SetConfig+0xc4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d103      	bne.n	8003218 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	615a      	str	r2, [r3, #20]
}
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40012c00 	.word	0x40012c00
 8003230:	40014000 	.word	0x40014000
 8003234:	40014400 	.word	0x40014400

08003238 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e040      	b.n	8003308 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fd ff68 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2224      	movs	r2, #36	; 0x24
 80032a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0201 	bic.w	r2, r2, #1
 80032b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fae4 	bl	8003880 <UART_SetConfig>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e022      	b.n	8003308 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fd0e 	bl	8003cec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fd95 	bl	8003e30 <UART_CheckIdleState>
 8003306:	4603      	mov	r3, r0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	4613      	mov	r3, r2
 800331c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003322:	2b20      	cmp	r3, #32
 8003324:	d145      	bne.n	80033b2 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <HAL_UART_Transmit_IT+0x22>
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e03e      	b.n	80033b4 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_UART_Transmit_IT+0x34>
 8003340:	2302      	movs	r3, #2
 8003342:	e037      	b.n	80033b4 <HAL_UART_Transmit_IT+0xa4>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	88fa      	ldrh	r2, [r7, #6]
 8003356:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	88fa      	ldrh	r2, [r7, #6]
 800335e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2221      	movs	r2, #33	; 0x21
 8003374:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337e:	d107      	bne.n	8003390 <HAL_UART_Transmit_IT+0x80>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d103      	bne.n	8003390 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <HAL_UART_Transmit_IT+0xb0>)
 800338c:	669a      	str	r2, [r3, #104]	; 0x68
 800338e:	e002      	b.n	8003396 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4a0c      	ldr	r2, [pc, #48]	; (80033c4 <HAL_UART_Transmit_IT+0xb4>)
 8003394:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033ac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e000      	b.n	80033b4 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 80033b2:	2302      	movs	r3, #2
  }
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	080041cb 	.word	0x080041cb
 80033c4:	08004157 	.word	0x08004157

080033c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	4613      	mov	r3, r2
 80033d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033da:	2b20      	cmp	r3, #32
 80033dc:	d131      	bne.n	8003442 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <HAL_UART_Receive_IT+0x22>
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e02a      	b.n	8003444 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_UART_Receive_IT+0x34>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e023      	b.n	8003444 <HAL_UART_Receive_IT+0x7c>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a0f      	ldr	r2, [pc, #60]	; (800344c <HAL_UART_Receive_IT+0x84>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00e      	beq.n	8003432 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003430:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	461a      	mov	r2, r3
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 fdbf 	bl	8003fbc <UART_Start_Receive_IT>
 800343e:	4603      	mov	r3, r0
 8003440:	e000      	b.n	8003444 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003442:	2302      	movs	r3, #2
  }
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40008000 	.word	0x40008000

08003450 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	f640 030f 	movw	r3, #2063	; 0x80f
 8003476:	4013      	ands	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d113      	bne.n	80034a8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00e      	beq.n	80034a8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	f003 0320 	and.w	r3, r3, #32
 8003490:	2b00      	cmp	r3, #0
 8003492:	d009      	beq.n	80034a8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 81cf 	beq.w	800383c <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	4798      	blx	r3
      }
      return;
 80034a6:	e1c9      	b.n	800383c <HAL_UART_IRQHandler+0x3ec>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 80e3 	beq.w	8003676 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d105      	bne.n	80034c6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4ba6      	ldr	r3, [pc, #664]	; (8003758 <HAL_UART_IRQHandler+0x308>)
 80034be:	4013      	ands	r3, r2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 80d8 	beq.w	8003676 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d010      	beq.n	80034f2 <HAL_UART_IRQHandler+0xa2>
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00b      	beq.n	80034f2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2201      	movs	r2, #1
 80034e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034e8:	f043 0201 	orr.w	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d010      	beq.n	800351e <HAL_UART_IRQHandler+0xce>
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2202      	movs	r2, #2
 800350c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003514:	f043 0204 	orr.w	r2, r3, #4
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d010      	beq.n	800354a <HAL_UART_IRQHandler+0xfa>
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00b      	beq.n	800354a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2204      	movs	r2, #4
 8003538:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003540:	f043 0202 	orr.w	r2, r3, #2
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d015      	beq.n	8003580 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b00      	cmp	r3, #0
 800355c:	d104      	bne.n	8003568 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00b      	beq.n	8003580 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2208      	movs	r2, #8
 800356e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003576:	f043 0208 	orr.w	r2, r3, #8
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	2b00      	cmp	r3, #0
 8003588:	d011      	beq.n	80035ae <HAL_UART_IRQHandler+0x15e>
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00c      	beq.n	80035ae <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800359c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035a4:	f043 0220 	orr.w	r2, r3, #32
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 8143 	beq.w	8003840 <HAL_UART_IRQHandler+0x3f0>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f003 0320 	and.w	r3, r3, #32
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00c      	beq.n	80035de <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d007      	beq.n	80035de <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035e4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f0:	2b40      	cmp	r3, #64	; 0x40
 80035f2:	d004      	beq.n	80035fe <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d031      	beq.n	8003662 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fd64 	bl	80040cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360e:	2b40      	cmp	r3, #64	; 0x40
 8003610:	d123      	bne.n	800365a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003620:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003626:	2b00      	cmp	r3, #0
 8003628:	d013      	beq.n	8003652 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	4a4b      	ldr	r2, [pc, #300]	; (800375c <HAL_UART_IRQHandler+0x30c>)
 8003630:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	4618      	mov	r0, r3
 8003638:	f7fd fff2 	bl	8001620 <HAL_DMA_Abort_IT>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d017      	beq.n	8003672 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800364c:	4610      	mov	r0, r2
 800364e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003650:	e00f      	b.n	8003672 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f8fe 	bl	8003854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003658:	e00b      	b.n	8003672 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f8fa 	bl	8003854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003660:	e007      	b.n	8003672 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f8f6 	bl	8003854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003670:	e0e6      	b.n	8003840 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003672:	bf00      	nop
    return;
 8003674:	e0e4      	b.n	8003840 <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367a:	2b01      	cmp	r3, #1
 800367c:	f040 80a9 	bne.w	80037d2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80a3 	beq.w	80037d2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 809d 	beq.w	80037d2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2210      	movs	r2, #16
 800369e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036aa:	2b40      	cmp	r3, #64	; 0x40
 80036ac:	d158      	bne.n	8003760 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80036b8:	893b      	ldrh	r3, [r7, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 80c2 	beq.w	8003844 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80036c6:	893a      	ldrh	r2, [r7, #8]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	f080 80bb 	bcs.w	8003844 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	893a      	ldrh	r2, [r7, #8]
 80036d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d12a      	bne.n	800373c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036f4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0201 	bic.w	r2, r2, #1
 8003704:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003714:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0210 	bic.w	r2, r2, #16
 8003730:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	4618      	mov	r0, r3
 8003738:	f7fd ff34 	bl	80015a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003748:	b29b      	uxth	r3, r3
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	b29b      	uxth	r3, r3
 800374e:	4619      	mov	r1, r3
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f889 	bl	8003868 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003756:	e075      	b.n	8003844 <HAL_UART_IRQHandler+0x3f4>
 8003758:	04000120 	.word	0x04000120
 800375c:	0800412b 	.word	0x0800412b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800376c:	b29b      	uxth	r3, r3
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d064      	beq.n	8003848 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 800377e:	897b      	ldrh	r3, [r7, #10]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d061      	beq.n	8003848 <HAL_UART_IRQHandler+0x3f8>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003792:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0210 	bic.w	r2, r2, #16
 80037c4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037c6:	897b      	ldrh	r3, [r7, #10]
 80037c8:	4619      	mov	r1, r3
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f84c 	bl	8003868 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80037d0:	e03a      	b.n	8003848 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00d      	beq.n	80037f8 <HAL_UART_IRQHandler+0x3a8>
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d008      	beq.n	80037f8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fe19 	bl	8004428 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037f6:	e02a      	b.n	800384e <HAL_UART_IRQHandler+0x3fe>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00d      	beq.n	800381e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01b      	beq.n	800384c <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	4798      	blx	r3
    }
    return;
 800381c:	e016      	b.n	800384c <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d012      	beq.n	800384e <HAL_UART_IRQHandler+0x3fe>
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00d      	beq.n	800384e <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fd07 	bl	8004246 <UART_EndTransmit_IT>
    return;
 8003838:	bf00      	nop
 800383a:	e008      	b.n	800384e <HAL_UART_IRQHandler+0x3fe>
      return;
 800383c:	bf00      	nop
 800383e:	e006      	b.n	800384e <HAL_UART_IRQHandler+0x3fe>
    return;
 8003840:	bf00      	nop
 8003842:	e004      	b.n	800384e <HAL_UART_IRQHandler+0x3fe>
      return;
 8003844:	bf00      	nop
 8003846:	e002      	b.n	800384e <HAL_UART_IRQHandler+0x3fe>
      return;
 8003848:	bf00      	nop
 800384a:	e000      	b.n	800384e <HAL_UART_IRQHandler+0x3fe>
    return;
 800384c:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800384e:	3720      	adds	r7, #32
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003880:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003884:	b088      	sub	sp, #32
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4baa      	ldr	r3, [pc, #680]	; (8003b58 <UART_SetConfig+0x2d8>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	69f9      	ldr	r1, [r7, #28]
 80038b6:	430b      	orrs	r3, r1
 80038b8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4aa0      	ldr	r2, [pc, #640]	; (8003b5c <UART_SetConfig+0x2dc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d004      	beq.n	80038ea <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	69fa      	ldr	r2, [r7, #28]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a97      	ldr	r2, [pc, #604]	; (8003b60 <UART_SetConfig+0x2e0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d121      	bne.n	800394c <UART_SetConfig+0xcc>
 8003908:	4b96      	ldr	r3, [pc, #600]	; (8003b64 <UART_SetConfig+0x2e4>)
 800390a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	2b03      	cmp	r3, #3
 8003914:	d816      	bhi.n	8003944 <UART_SetConfig+0xc4>
 8003916:	a201      	add	r2, pc, #4	; (adr r2, 800391c <UART_SetConfig+0x9c>)
 8003918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391c:	0800392d 	.word	0x0800392d
 8003920:	08003939 	.word	0x08003939
 8003924:	08003933 	.word	0x08003933
 8003928:	0800393f 	.word	0x0800393f
 800392c:	2301      	movs	r3, #1
 800392e:	76fb      	strb	r3, [r7, #27]
 8003930:	e098      	b.n	8003a64 <UART_SetConfig+0x1e4>
 8003932:	2302      	movs	r3, #2
 8003934:	76fb      	strb	r3, [r7, #27]
 8003936:	e095      	b.n	8003a64 <UART_SetConfig+0x1e4>
 8003938:	2304      	movs	r3, #4
 800393a:	76fb      	strb	r3, [r7, #27]
 800393c:	e092      	b.n	8003a64 <UART_SetConfig+0x1e4>
 800393e:	2308      	movs	r3, #8
 8003940:	76fb      	strb	r3, [r7, #27]
 8003942:	e08f      	b.n	8003a64 <UART_SetConfig+0x1e4>
 8003944:	2310      	movs	r3, #16
 8003946:	76fb      	strb	r3, [r7, #27]
 8003948:	bf00      	nop
 800394a:	e08b      	b.n	8003a64 <UART_SetConfig+0x1e4>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a85      	ldr	r2, [pc, #532]	; (8003b68 <UART_SetConfig+0x2e8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d134      	bne.n	80039c0 <UART_SetConfig+0x140>
 8003956:	4b83      	ldr	r3, [pc, #524]	; (8003b64 <UART_SetConfig+0x2e4>)
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395c:	f003 030c 	and.w	r3, r3, #12
 8003960:	2b0c      	cmp	r3, #12
 8003962:	d829      	bhi.n	80039b8 <UART_SetConfig+0x138>
 8003964:	a201      	add	r2, pc, #4	; (adr r2, 800396c <UART_SetConfig+0xec>)
 8003966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396a:	bf00      	nop
 800396c:	080039a1 	.word	0x080039a1
 8003970:	080039b9 	.word	0x080039b9
 8003974:	080039b9 	.word	0x080039b9
 8003978:	080039b9 	.word	0x080039b9
 800397c:	080039ad 	.word	0x080039ad
 8003980:	080039b9 	.word	0x080039b9
 8003984:	080039b9 	.word	0x080039b9
 8003988:	080039b9 	.word	0x080039b9
 800398c:	080039a7 	.word	0x080039a7
 8003990:	080039b9 	.word	0x080039b9
 8003994:	080039b9 	.word	0x080039b9
 8003998:	080039b9 	.word	0x080039b9
 800399c:	080039b3 	.word	0x080039b3
 80039a0:	2300      	movs	r3, #0
 80039a2:	76fb      	strb	r3, [r7, #27]
 80039a4:	e05e      	b.n	8003a64 <UART_SetConfig+0x1e4>
 80039a6:	2302      	movs	r3, #2
 80039a8:	76fb      	strb	r3, [r7, #27]
 80039aa:	e05b      	b.n	8003a64 <UART_SetConfig+0x1e4>
 80039ac:	2304      	movs	r3, #4
 80039ae:	76fb      	strb	r3, [r7, #27]
 80039b0:	e058      	b.n	8003a64 <UART_SetConfig+0x1e4>
 80039b2:	2308      	movs	r3, #8
 80039b4:	76fb      	strb	r3, [r7, #27]
 80039b6:	e055      	b.n	8003a64 <UART_SetConfig+0x1e4>
 80039b8:	2310      	movs	r3, #16
 80039ba:	76fb      	strb	r3, [r7, #27]
 80039bc:	bf00      	nop
 80039be:	e051      	b.n	8003a64 <UART_SetConfig+0x1e4>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a69      	ldr	r2, [pc, #420]	; (8003b6c <UART_SetConfig+0x2ec>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d120      	bne.n	8003a0c <UART_SetConfig+0x18c>
 80039ca:	4b66      	ldr	r3, [pc, #408]	; (8003b64 <UART_SetConfig+0x2e4>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039d4:	2b10      	cmp	r3, #16
 80039d6:	d00f      	beq.n	80039f8 <UART_SetConfig+0x178>
 80039d8:	2b10      	cmp	r3, #16
 80039da:	d802      	bhi.n	80039e2 <UART_SetConfig+0x162>
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <UART_SetConfig+0x16c>
 80039e0:	e010      	b.n	8003a04 <UART_SetConfig+0x184>
 80039e2:	2b20      	cmp	r3, #32
 80039e4:	d005      	beq.n	80039f2 <UART_SetConfig+0x172>
 80039e6:	2b30      	cmp	r3, #48	; 0x30
 80039e8:	d009      	beq.n	80039fe <UART_SetConfig+0x17e>
 80039ea:	e00b      	b.n	8003a04 <UART_SetConfig+0x184>
 80039ec:	2300      	movs	r3, #0
 80039ee:	76fb      	strb	r3, [r7, #27]
 80039f0:	e038      	b.n	8003a64 <UART_SetConfig+0x1e4>
 80039f2:	2302      	movs	r3, #2
 80039f4:	76fb      	strb	r3, [r7, #27]
 80039f6:	e035      	b.n	8003a64 <UART_SetConfig+0x1e4>
 80039f8:	2304      	movs	r3, #4
 80039fa:	76fb      	strb	r3, [r7, #27]
 80039fc:	e032      	b.n	8003a64 <UART_SetConfig+0x1e4>
 80039fe:	2308      	movs	r3, #8
 8003a00:	76fb      	strb	r3, [r7, #27]
 8003a02:	e02f      	b.n	8003a64 <UART_SetConfig+0x1e4>
 8003a04:	2310      	movs	r3, #16
 8003a06:	76fb      	strb	r3, [r7, #27]
 8003a08:	bf00      	nop
 8003a0a:	e02b      	b.n	8003a64 <UART_SetConfig+0x1e4>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a52      	ldr	r2, [pc, #328]	; (8003b5c <UART_SetConfig+0x2dc>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d124      	bne.n	8003a60 <UART_SetConfig+0x1e0>
 8003a16:	4b53      	ldr	r3, [pc, #332]	; (8003b64 <UART_SetConfig+0x2e4>)
 8003a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a24:	d012      	beq.n	8003a4c <UART_SetConfig+0x1cc>
 8003a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a2a:	d802      	bhi.n	8003a32 <UART_SetConfig+0x1b2>
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <UART_SetConfig+0x1c0>
 8003a30:	e012      	b.n	8003a58 <UART_SetConfig+0x1d8>
 8003a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a36:	d006      	beq.n	8003a46 <UART_SetConfig+0x1c6>
 8003a38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a3c:	d009      	beq.n	8003a52 <UART_SetConfig+0x1d2>
 8003a3e:	e00b      	b.n	8003a58 <UART_SetConfig+0x1d8>
 8003a40:	2300      	movs	r3, #0
 8003a42:	76fb      	strb	r3, [r7, #27]
 8003a44:	e00e      	b.n	8003a64 <UART_SetConfig+0x1e4>
 8003a46:	2302      	movs	r3, #2
 8003a48:	76fb      	strb	r3, [r7, #27]
 8003a4a:	e00b      	b.n	8003a64 <UART_SetConfig+0x1e4>
 8003a4c:	2304      	movs	r3, #4
 8003a4e:	76fb      	strb	r3, [r7, #27]
 8003a50:	e008      	b.n	8003a64 <UART_SetConfig+0x1e4>
 8003a52:	2308      	movs	r3, #8
 8003a54:	76fb      	strb	r3, [r7, #27]
 8003a56:	e005      	b.n	8003a64 <UART_SetConfig+0x1e4>
 8003a58:	2310      	movs	r3, #16
 8003a5a:	76fb      	strb	r3, [r7, #27]
 8003a5c:	bf00      	nop
 8003a5e:	e001      	b.n	8003a64 <UART_SetConfig+0x1e4>
 8003a60:	2310      	movs	r3, #16
 8003a62:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a3c      	ldr	r2, [pc, #240]	; (8003b5c <UART_SetConfig+0x2dc>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	f040 8082 	bne.w	8003b74 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a70:	7efb      	ldrb	r3, [r7, #27]
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d823      	bhi.n	8003abe <UART_SetConfig+0x23e>
 8003a76:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <UART_SetConfig+0x1fc>)
 8003a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7c:	08003aa1 	.word	0x08003aa1
 8003a80:	08003abf 	.word	0x08003abf
 8003a84:	08003aa9 	.word	0x08003aa9
 8003a88:	08003abf 	.word	0x08003abf
 8003a8c:	08003aaf 	.word	0x08003aaf
 8003a90:	08003abf 	.word	0x08003abf
 8003a94:	08003abf 	.word	0x08003abf
 8003a98:	08003abf 	.word	0x08003abf
 8003a9c:	08003ab7 	.word	0x08003ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa0:	f7fe fd76 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 8003aa4:	6178      	str	r0, [r7, #20]
        break;
 8003aa6:	e00f      	b.n	8003ac8 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa8:	4b31      	ldr	r3, [pc, #196]	; (8003b70 <UART_SetConfig+0x2f0>)
 8003aaa:	617b      	str	r3, [r7, #20]
        break;
 8003aac:	e00c      	b.n	8003ac8 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aae:	f7fe fcd9 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8003ab2:	6178      	str	r0, [r7, #20]
        break;
 8003ab4:	e008      	b.n	8003ac8 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aba:	617b      	str	r3, [r7, #20]
        break;
 8003abc:	e004      	b.n	8003ac8 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	76bb      	strb	r3, [r7, #26]
        break;
 8003ac6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 8100 	beq.w	8003cd0 <UART_SetConfig+0x450>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	4413      	add	r3, r2
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d305      	bcc.n	8003aec <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d902      	bls.n	8003af2 <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	76bb      	strb	r3, [r7, #26]
 8003af0:	e0ee      	b.n	8003cd0 <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	4619      	mov	r1, r3
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	f04f 0400 	mov.w	r4, #0
 8003b02:	0214      	lsls	r4, r2, #8
 8003b04:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003b08:	020b      	lsls	r3, r1, #8
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6852      	ldr	r2, [r2, #4]
 8003b0e:	0852      	lsrs	r2, r2, #1
 8003b10:	4611      	mov	r1, r2
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	eb13 0b01 	adds.w	fp, r3, r1
 8003b1a:	eb44 0c02 	adc.w	ip, r4, r2
 8003b1e:	4658      	mov	r0, fp
 8003b20:	4661      	mov	r1, ip
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f04f 0400 	mov.w	r4, #0
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	4623      	mov	r3, r4
 8003b2e:	f7fd f833 	bl	8000b98 <__aeabi_uldivmod>
 8003b32:	4603      	mov	r3, r0
 8003b34:	460c      	mov	r4, r1
 8003b36:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b3e:	d308      	bcc.n	8003b52 <UART_SetConfig+0x2d2>
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b46:	d204      	bcs.n	8003b52 <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	60da      	str	r2, [r3, #12]
 8003b50:	e0be      	b.n	8003cd0 <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	76bb      	strb	r3, [r7, #26]
 8003b56:	e0bb      	b.n	8003cd0 <UART_SetConfig+0x450>
 8003b58:	efff69f3 	.word	0xefff69f3
 8003b5c:	40008000 	.word	0x40008000
 8003b60:	40013800 	.word	0x40013800
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40004400 	.word	0x40004400
 8003b6c:	40004800 	.word	0x40004800
 8003b70:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b7c:	d15c      	bne.n	8003c38 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8003b7e:	7efb      	ldrb	r3, [r7, #27]
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d828      	bhi.n	8003bd6 <UART_SetConfig+0x356>
 8003b84:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <UART_SetConfig+0x30c>)
 8003b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8a:	bf00      	nop
 8003b8c:	08003bb1 	.word	0x08003bb1
 8003b90:	08003bb9 	.word	0x08003bb9
 8003b94:	08003bc1 	.word	0x08003bc1
 8003b98:	08003bd7 	.word	0x08003bd7
 8003b9c:	08003bc7 	.word	0x08003bc7
 8003ba0:	08003bd7 	.word	0x08003bd7
 8003ba4:	08003bd7 	.word	0x08003bd7
 8003ba8:	08003bd7 	.word	0x08003bd7
 8003bac:	08003bcf 	.word	0x08003bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb0:	f7fe fcee 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 8003bb4:	6178      	str	r0, [r7, #20]
        break;
 8003bb6:	e013      	b.n	8003be0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bb8:	f7fe fd00 	bl	80025bc <HAL_RCC_GetPCLK2Freq>
 8003bbc:	6178      	str	r0, [r7, #20]
        break;
 8003bbe:	e00f      	b.n	8003be0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bc0:	4b49      	ldr	r3, [pc, #292]	; (8003ce8 <UART_SetConfig+0x468>)
 8003bc2:	617b      	str	r3, [r7, #20]
        break;
 8003bc4:	e00c      	b.n	8003be0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bc6:	f7fe fc4d 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8003bca:	6178      	str	r0, [r7, #20]
        break;
 8003bcc:	e008      	b.n	8003be0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bd2:	617b      	str	r3, [r7, #20]
        break;
 8003bd4:	e004      	b.n	8003be0 <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	76bb      	strb	r3, [r7, #26]
        break;
 8003bde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d074      	beq.n	8003cd0 <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	005a      	lsls	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	441a      	add	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	2b0f      	cmp	r3, #15
 8003c02:	d916      	bls.n	8003c32 <UART_SetConfig+0x3b2>
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c0a:	d212      	bcs.n	8003c32 <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	f023 030f 	bic.w	r3, r3, #15
 8003c14:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	085b      	lsrs	r3, r3, #1
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	89fb      	ldrh	r3, [r7, #14]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	89fa      	ldrh	r2, [r7, #14]
 8003c2e:	60da      	str	r2, [r3, #12]
 8003c30:	e04e      	b.n	8003cd0 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	76bb      	strb	r3, [r7, #26]
 8003c36:	e04b      	b.n	8003cd0 <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c38:	7efb      	ldrb	r3, [r7, #27]
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d827      	bhi.n	8003c8e <UART_SetConfig+0x40e>
 8003c3e:	a201      	add	r2, pc, #4	; (adr r2, 8003c44 <UART_SetConfig+0x3c4>)
 8003c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c44:	08003c69 	.word	0x08003c69
 8003c48:	08003c71 	.word	0x08003c71
 8003c4c:	08003c79 	.word	0x08003c79
 8003c50:	08003c8f 	.word	0x08003c8f
 8003c54:	08003c7f 	.word	0x08003c7f
 8003c58:	08003c8f 	.word	0x08003c8f
 8003c5c:	08003c8f 	.word	0x08003c8f
 8003c60:	08003c8f 	.word	0x08003c8f
 8003c64:	08003c87 	.word	0x08003c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c68:	f7fe fc92 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 8003c6c:	6178      	str	r0, [r7, #20]
        break;
 8003c6e:	e013      	b.n	8003c98 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c70:	f7fe fca4 	bl	80025bc <HAL_RCC_GetPCLK2Freq>
 8003c74:	6178      	str	r0, [r7, #20]
        break;
 8003c76:	e00f      	b.n	8003c98 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c78:	4b1b      	ldr	r3, [pc, #108]	; (8003ce8 <UART_SetConfig+0x468>)
 8003c7a:	617b      	str	r3, [r7, #20]
        break;
 8003c7c:	e00c      	b.n	8003c98 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c7e:	f7fe fbf1 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8003c82:	6178      	str	r0, [r7, #20]
        break;
 8003c84:	e008      	b.n	8003c98 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c8a:	617b      	str	r3, [r7, #20]
        break;
 8003c8c:	e004      	b.n	8003c98 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	76bb      	strb	r3, [r7, #26]
        break;
 8003c96:	bf00      	nop
    }

    if (pclk != 0U)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d018      	beq.n	8003cd0 <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	085a      	lsrs	r2, r3, #1
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	441a      	add	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	2b0f      	cmp	r3, #15
 8003cb8:	d908      	bls.n	8003ccc <UART_SetConfig+0x44c>
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc0:	d204      	bcs.n	8003ccc <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	60da      	str	r2, [r3, #12]
 8003cca:	e001      	b.n	8003cd0 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003cdc:	7ebb      	ldrb	r3, [r7, #26]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3720      	adds	r7, #32
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003ce8:	00f42400 	.word	0x00f42400

08003cec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01a      	beq.n	8003e02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dea:	d10a      	bne.n	8003e02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	605a      	str	r2, [r3, #4]
  }
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e40:	f7fd fac2 	bl	80013c8 <HAL_GetTick>
 8003e44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d10e      	bne.n	8003e72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f82d 	bl	8003ec2 <UART_WaitOnFlagUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e023      	b.n	8003eba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d10e      	bne.n	8003e9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f817 	bl	8003ec2 <UART_WaitOnFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e00d      	b.n	8003eba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	603b      	str	r3, [r7, #0]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed2:	e05e      	b.n	8003f92 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eda:	d05a      	beq.n	8003f92 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003edc:	f7fd fa74 	bl	80013c8 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d302      	bcc.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d11b      	bne.n	8003f2a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f00:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0201 	bic.w	r2, r2, #1
 8003f10:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e043      	b.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d02c      	beq.n	8003f92 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f46:	d124      	bne.n	8003f92 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f50:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f60:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0201 	bic.w	r2, r2, #1
 8003f70:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e00f      	b.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	69da      	ldr	r2, [r3, #28]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	bf0c      	ite	eq
 8003fa2:	2301      	moveq	r3, #1
 8003fa4:	2300      	movne	r3, #0
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	461a      	mov	r2, r3
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d091      	beq.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	88fa      	ldrh	r2, [r7, #6]
 8003fd4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	88fa      	ldrh	r2, [r7, #6]
 8003fdc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fee:	d10e      	bne.n	800400e <UART_Start_Receive_IT+0x52>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d105      	bne.n	8004004 <UART_Start_Receive_IT+0x48>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003ffe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004002:	e02d      	b.n	8004060 <UART_Start_Receive_IT+0xa4>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	22ff      	movs	r2, #255	; 0xff
 8004008:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800400c:	e028      	b.n	8004060 <UART_Start_Receive_IT+0xa4>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10d      	bne.n	8004032 <UART_Start_Receive_IT+0x76>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d104      	bne.n	8004028 <UART_Start_Receive_IT+0x6c>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	22ff      	movs	r2, #255	; 0xff
 8004022:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004026:	e01b      	b.n	8004060 <UART_Start_Receive_IT+0xa4>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	227f      	movs	r2, #127	; 0x7f
 800402c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004030:	e016      	b.n	8004060 <UART_Start_Receive_IT+0xa4>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800403a:	d10d      	bne.n	8004058 <UART_Start_Receive_IT+0x9c>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d104      	bne.n	800404e <UART_Start_Receive_IT+0x92>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	227f      	movs	r2, #127	; 0x7f
 8004048:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800404c:	e008      	b.n	8004060 <UART_Start_Receive_IT+0xa4>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	223f      	movs	r2, #63	; 0x3f
 8004052:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004056:	e003      	b.n	8004060 <UART_Start_Receive_IT+0xa4>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2222      	movs	r2, #34	; 0x22
 800406c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f042 0201 	orr.w	r2, r2, #1
 800407c:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004086:	d107      	bne.n	8004098 <UART_Start_Receive_IT+0xdc>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d103      	bne.n	8004098 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4a0c      	ldr	r2, [pc, #48]	; (80040c4 <UART_Start_Receive_IT+0x108>)
 8004094:	665a      	str	r2, [r3, #100]	; 0x64
 8004096:	e002      	b.n	800409e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4a0b      	ldr	r2, [pc, #44]	; (80040c8 <UART_Start_Receive_IT+0x10c>)
 800409c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80040b4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	08004351 	.word	0x08004351
 80040c8:	08004279 	.word	0x08004279

080040cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040e2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0201 	bic.w	r2, r2, #1
 80040f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d107      	bne.n	800410c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0210 	bic.w	r2, r2, #16
 800410a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f7ff fb83 	bl	8003854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800414e:	bf00      	nop
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004162:	2b21      	cmp	r3, #33	; 0x21
 8004164:	d12b      	bne.n	80041be <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d110      	bne.n	8004194 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004180:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004190:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004192:	e014      	b.n	80041be <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004198:	781a      	ldrb	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	b292      	uxth	r2, r2
 80041a0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b085      	sub	sp, #20
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041d6:	2b21      	cmp	r3, #33	; 0x21
 80041d8:	d12f      	bne.n	800423a <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d110      	bne.n	8004208 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041f4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004204:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004206:	e018      	b.n	800423a <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420c:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	881a      	ldrh	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800421a:	b292      	uxth	r2, r2
 800421c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004222:	1c9a      	adds	r2, r3, #2
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800423a:	bf00      	nop
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b082      	sub	sp, #8
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800425c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f001 fa74 	bl	8005758 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004286:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800428c:	2b22      	cmp	r3, #34	; 0x22
 800428e:	d151      	bne.n	8004334 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004296:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004298:	89bb      	ldrh	r3, [r7, #12]
 800429a:	b2d9      	uxtb	r1, r3
 800429c:	89fb      	ldrh	r3, [r7, #14]
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a4:	400a      	ands	r2, r1
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d13a      	bne.n	8004348 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042e0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0201 	bic.w	r2, r2, #1
 80042f0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004302:	2b01      	cmp	r3, #1
 8004304:	d10f      	bne.n	8004326 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0210 	bic.w	r2, r2, #16
 8004314:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800431c:	4619      	mov	r1, r3
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7ff faa2 	bl	8003868 <HAL_UARTEx_RxEventCallback>
 8004324:	e002      	b.n	800432c <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f001 fa06 	bl	8005738 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004332:	e009      	b.n	8004348 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	8b1b      	ldrh	r3, [r3, #24]
 800433a:	b29a      	uxth	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f042 0208 	orr.w	r2, r2, #8
 8004344:	b292      	uxth	r2, r2
 8004346:	831a      	strh	r2, [r3, #24]
}
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800435e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004364:	2b22      	cmp	r3, #34	; 0x22
 8004366:	d151      	bne.n	800440c <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800436e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004374:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004376:	89ba      	ldrh	r2, [r7, #12]
 8004378:	89fb      	ldrh	r3, [r7, #14]
 800437a:	4013      	ands	r3, r2
 800437c:	b29a      	uxth	r2, r3
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004386:	1c9a      	adds	r2, r3, #2
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d13a      	bne.n	8004420 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043b8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0201 	bic.w	r2, r2, #1
 80043c8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d10f      	bne.n	80043fe <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0210 	bic.w	r2, r2, #16
 80043ec:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80043f4:	4619      	mov	r1, r3
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7ff fa36 	bl	8003868 <HAL_UARTEx_RxEventCallback>
 80043fc:	e002      	b.n	8004404 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f001 f99a 	bl	8005738 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800440a:	e009      	b.n	8004420 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	8b1b      	ldrh	r3, [r3, #24]
 8004412:	b29a      	uxth	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0208 	orr.w	r2, r2, #8
 800441c:	b292      	uxth	r2, r2
 800441e:	831a      	strh	r2, [r3, #24]
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	0000      	movs	r0, r0
	...

08004440 <Model_for_PIL>:
                   real_T *rtu_EndX, const real_T *rtu_EndY, const real_T
                   rtu_EntryPoint[4], const real_T rtu_DetPoint[4], const real_T
                   *rtu_detection, const real_T *rtu_Zone, const real_T *rtu_Lw,
                   const real_T rtu_Reference[4], const real_T *rtu_Curvature,
                   real_T rty_E[4], real_T rty_F[8], real_T rty_G[2])
{
 8004440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004444:	b0b3      	sub	sp, #204	; 0xcc
 8004446:	af00      	add	r7, sp, #0
 8004448:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800444c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8004450:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  real_T q2;
  real_T slope;
  real_T constraintIntercept;
  boolean_T rEQ0;
  real_T q;
  if (rtIsNaN(rtu_Reference[2] + 3.1415926535897931)) {
 8004458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800445c:	3310      	adds	r3, #16
 800445e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004462:	a373      	add	r3, pc, #460	; (adr r3, 8004630 <Model_for_PIL+0x1f0>)
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	f7fb feb8 	bl	80001dc <__adddf3>
 800446c:	4603      	mov	r3, r0
 800446e:	460c      	mov	r4, r1
 8004470:	ec44 3b17 	vmov	d7, r3, r4
 8004474:	eeb0 0a47 	vmov.f32	s0, s14
 8004478:	eef0 0a67 	vmov.f32	s1, s15
 800447c:	f002 fb7e 	bl	8006b7c <rtIsNaN>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d005      	beq.n	8004492 <Model_for_PIL+0x52>
    Theta_ref = (rtNaN);
 8004486:	4b6e      	ldr	r3, [pc, #440]	; (8004640 <Model_for_PIL+0x200>)
 8004488:	e9d3 3400 	ldrd	r3, r4, [r3]
 800448c:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
 8004490:	e0fe      	b.n	8004690 <Model_for_PIL+0x250>
  } else if (rtIsInf(rtu_Reference[2] + 3.1415926535897931)) {
 8004492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004496:	3310      	adds	r3, #16
 8004498:	e9d3 0100 	ldrd	r0, r1, [r3]
 800449c:	a364      	add	r3, pc, #400	; (adr r3, 8004630 <Model_for_PIL+0x1f0>)
 800449e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a2:	f7fb fe9b 	bl	80001dc <__adddf3>
 80044a6:	4603      	mov	r3, r0
 80044a8:	460c      	mov	r4, r1
 80044aa:	ec44 3b17 	vmov	d7, r3, r4
 80044ae:	eeb0 0a47 	vmov.f32	s0, s14
 80044b2:	eef0 0a67 	vmov.f32	s1, s15
 80044b6:	f002 fb39 	bl	8006b2c <rtIsInf>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <Model_for_PIL+0x8c>
    Theta_ref = (rtNaN);
 80044c0:	4b5f      	ldr	r3, [pc, #380]	; (8004640 <Model_for_PIL+0x200>)
 80044c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80044c6:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
 80044ca:	e0e1      	b.n	8004690 <Model_for_PIL+0x250>
  } else if (rtu_Reference[2] + 3.1415926535897931 == 0.0) {
 80044cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044d0:	3310      	adds	r3, #16
 80044d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044d6:	a356      	add	r3, pc, #344	; (adr r3, 8004630 <Model_for_PIL+0x1f0>)
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	f7fb fe7e 	bl	80001dc <__adddf3>
 80044e0:	4603      	mov	r3, r0
 80044e2:	460c      	mov	r4, r1
 80044e4:	4618      	mov	r0, r3
 80044e6:	4621      	mov	r1, r4
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	f7fc fa92 	bl	8000a18 <__aeabi_dcmpeq>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d006      	beq.n	8004508 <Model_for_PIL+0xc8>
    Theta_ref = 0.0;
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	f04f 0400 	mov.w	r4, #0
 8004502:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
 8004506:	e0c3      	b.n	8004690 <Model_for_PIL+0x250>
  } else {
    Theta_ref = fmod(rtu_Reference[2] + 3.1415926535897931, 6.2831853071795862);
 8004508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800450c:	3310      	adds	r3, #16
 800450e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004512:	a347      	add	r3, pc, #284	; (adr r3, 8004630 <Model_for_PIL+0x1f0>)
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f7fb fe60 	bl	80001dc <__adddf3>
 800451c:	4603      	mov	r3, r0
 800451e:	460c      	mov	r4, r1
 8004520:	ec44 3b17 	vmov	d7, r3, r4
 8004524:	ed9f 1b44 	vldr	d1, [pc, #272]	; 8004638 <Model_for_PIL+0x1f8>
 8004528:	eeb0 0a47 	vmov.f32	s0, s14
 800452c:	eef0 0a67 	vmov.f32	s1, s15
 8004530:	f003 ff7e 	bl	8008430 <fmod>
 8004534:	ed87 0b30 	vstr	d0, [r7, #192]	; 0xc0
    rEQ0 = (Theta_ref == 0.0);
 8004538:	2301      	movs	r3, #1
 800453a:	461c      	mov	r4, r3
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004548:	f7fc fa66 	bl	8000a18 <__aeabi_dcmpeq>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <Model_for_PIL+0x116>
 8004552:	2300      	movs	r3, #0
 8004554:	461c      	mov	r4, r3
 8004556:	b2e3      	uxtb	r3, r4
 8004558:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    if (!rEQ0) {
 800455c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004560:	2b00      	cmp	r3, #0
 8004562:	d157      	bne.n	8004614 <Model_for_PIL+0x1d4>
      q = fabs((rtu_Reference[2] + 3.1415926535897931) / 6.2831853071795862);
 8004564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004568:	3310      	adds	r3, #16
 800456a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800456e:	a330      	add	r3, pc, #192	; (adr r3, 8004630 <Model_for_PIL+0x1f0>)
 8004570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004574:	f7fb fe32 	bl	80001dc <__adddf3>
 8004578:	4603      	mov	r3, r0
 800457a:	460c      	mov	r4, r1
 800457c:	4618      	mov	r0, r3
 800457e:	4621      	mov	r1, r4
 8004580:	a32d      	add	r3, pc, #180	; (adr r3, 8004638 <Model_for_PIL+0x1f8>)
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	f7fc f909 	bl	800079c <__aeabi_ddiv>
 800458a:	4603      	mov	r3, r0
 800458c:	460c      	mov	r4, r1
 800458e:	461a      	mov	r2, r3
 8004590:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8004594:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004598:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      rEQ0 = !(fabs(q - floor(q + 0.5)) > 2.2204460492503131E-16 * q);
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	4b28      	ldr	r3, [pc, #160]	; (8004644 <Model_for_PIL+0x204>)
 80045a2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80045a6:	f7fb fe19 	bl	80001dc <__adddf3>
 80045aa:	4603      	mov	r3, r0
 80045ac:	460c      	mov	r4, r1
 80045ae:	ec44 3b17 	vmov	d7, r3, r4
 80045b2:	eeb0 0a47 	vmov.f32	s0, s14
 80045b6:	eef0 0a67 	vmov.f32	s1, s15
 80045ba:	f003 fe3d 	bl	8008238 <floor>
 80045be:	ec54 3b10 	vmov	r3, r4, d0
 80045c2:	461a      	mov	r2, r3
 80045c4:	4623      	mov	r3, r4
 80045c6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80045ca:	f7fb fe05 	bl	80001d8 <__aeabi_dsub>
 80045ce:	4603      	mov	r3, r0
 80045d0:	460c      	mov	r4, r1
 80045d2:	4698      	mov	r8, r3
 80045d4:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <Model_for_PIL+0x208>)
 80045de:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80045e2:	f7fb ffb1 	bl	8000548 <__aeabi_dmul>
 80045e6:	4603      	mov	r3, r0
 80045e8:	460c      	mov	r4, r1
 80045ea:	4619      	mov	r1, r3
 80045ec:	4622      	mov	r2, r4
 80045ee:	2301      	movs	r3, #1
 80045f0:	461c      	mov	r4, r3
 80045f2:	4613      	mov	r3, r2
 80045f4:	460a      	mov	r2, r1
 80045f6:	4640      	mov	r0, r8
 80045f8:	4649      	mov	r1, r9
 80045fa:	f7fc fa35 	bl	8000a68 <__aeabi_dcmpgt>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <Model_for_PIL+0x1c8>
 8004604:	2300      	movs	r3, #0
 8004606:	461c      	mov	r4, r3
 8004608:	b2e3      	uxtb	r3, r4
 800460a:	f083 0301 	eor.w	r3, r3, #1
 800460e:	b2db      	uxtb	r3, r3
 8004610:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    }

    if (rEQ0) {
 8004614:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8004618:	2b00      	cmp	r3, #0
 800461a:	d017      	beq.n	800464c <Model_for_PIL+0x20c>
      Theta_ref = 0.0;
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	f04f 0400 	mov.w	r4, #0
 8004624:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
 8004628:	e032      	b.n	8004690 <Model_for_PIL+0x250>
 800462a:	bf00      	nop
 800462c:	f3af 8000 	nop.w
 8004630:	54442d18 	.word	0x54442d18
 8004634:	400921fb 	.word	0x400921fb
 8004638:	54442d18 	.word	0x54442d18
 800463c:	401921fb 	.word	0x401921fb
 8004640:	20000430 	.word	0x20000430
 8004644:	3fe00000 	.word	0x3fe00000
 8004648:	3cb00000 	.word	0x3cb00000
    } else {
      if (rtu_Reference[2] + 3.1415926535897931 < 0.0) {
 800464c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004650:	3310      	adds	r3, #16
 8004652:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004656:	a3df      	add	r3, pc, #892	; (adr r3, 80049d4 <Model_for_PIL+0x594>)
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	f7fb fdbe 	bl	80001dc <__adddf3>
 8004660:	4603      	mov	r3, r0
 8004662:	460c      	mov	r4, r1
 8004664:	4618      	mov	r0, r3
 8004666:	4621      	mov	r1, r4
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	f7fc f9dc 	bl	8000a2c <__aeabi_dcmplt>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <Model_for_PIL+0x250>
        Theta_ref += 6.2831853071795862;
 800467a:	a3d8      	add	r3, pc, #864	; (adr r3, 80049dc <Model_for_PIL+0x59c>)
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004684:	f7fb fdaa 	bl	80001dc <__adddf3>
 8004688:	4603      	mov	r3, r0
 800468a:	460c      	mov	r4, r1
 800468c:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
      }
    }
  }

  Theta_ref -= 3.1415926535897931;
 8004690:	a3d0      	add	r3, pc, #832	; (adr r3, 80049d4 <Model_for_PIL+0x594>)
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800469a:	f7fb fd9d 	bl	80001d8 <__aeabi_dsub>
 800469e:	4603      	mov	r3, r0
 80046a0:	460c      	mov	r4, r1
 80046a2:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
  q = tan(Theta_ref);
 80046a6:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 80046aa:	f003 fe91 	bl	80083d0 <tan>
 80046ae:	ed87 0b28 	vstr	d0, [r7, #160]	; 0xa0
  if (fabs(q) > 1.0) {
 80046b2:	f8d7 50a0 	ldr.w	r5, [r7, #160]	; 0xa0
 80046b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046ba:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	4bbf      	ldr	r3, [pc, #764]	; (80049c0 <Model_for_PIL+0x580>)
 80046c4:	4628      	mov	r0, r5
 80046c6:	4631      	mov	r1, r6
 80046c8:	f7fc f9ce 	bl	8000a68 <__aeabi_dcmpgt>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 83b5 	beq.w	8004e3e <Model_for_PIL+0x9fe>
    q = 1.0 / q;
 80046d4:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80046d8:	f04f 0000 	mov.w	r0, #0
 80046dc:	49b8      	ldr	r1, [pc, #736]	; (80049c0 <Model_for_PIL+0x580>)
 80046de:	f7fc f85d 	bl	800079c <__aeabi_ddiv>
 80046e2:	4603      	mov	r3, r0
 80046e4:	460c      	mov	r4, r1
 80046e6:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
    if (*rtu_detection != 0.0) {
 80046ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046f2:	f04f 0200 	mov.w	r2, #0
 80046f6:	f04f 0300 	mov.w	r3, #0
 80046fa:	f7fc f98d 	bl	8000a18 <__aeabi_dcmpeq>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	f040 8383 	bne.w	8004e0c <Model_for_PIL+0x9cc>
      q2 = sin(Theta_ref);
 8004706:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 800470a:	f003 fe19 	bl	8008340 <sin>
 800470e:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
      constraintIntercept = q * rtu_Reference[1];
 8004712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004716:	3308      	adds	r3, #8
 8004718:	e9d3 3400 	ldrd	r3, r4, [r3]
 800471c:	461a      	mov	r2, r3
 800471e:	4623      	mov	r3, r4
 8004720:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004724:	f7fb ff10 	bl	8000548 <__aeabi_dmul>
 8004728:	4603      	mov	r3, r0
 800472a:	460c      	mov	r4, r1
 800472c:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
      q2 = ((rtu_Reference[0] - 0.5 * *rtu_Lw / q2) - constraintIntercept) -
 8004730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004734:	e9d3 5600 	ldrd	r5, r6, [r3]
 8004738:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800473c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	4b9f      	ldr	r3, [pc, #636]	; (80049c4 <Model_for_PIL+0x584>)
 8004746:	f7fb feff 	bl	8000548 <__aeabi_dmul>
 800474a:	4603      	mov	r3, r0
 800474c:	460c      	mov	r4, r1
 800474e:	4618      	mov	r0, r3
 8004750:	4621      	mov	r1, r4
 8004752:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8004756:	f7fc f821 	bl	800079c <__aeabi_ddiv>
 800475a:	4603      	mov	r3, r0
 800475c:	460c      	mov	r4, r1
 800475e:	461a      	mov	r2, r3
 8004760:	4623      	mov	r3, r4
 8004762:	4628      	mov	r0, r5
 8004764:	4631      	mov	r1, r6
 8004766:	f7fb fd37 	bl	80001d8 <__aeabi_dsub>
 800476a:	4603      	mov	r3, r0
 800476c:	460c      	mov	r4, r1
 800476e:	4618      	mov	r0, r3
 8004770:	4621      	mov	r1, r4
 8004772:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8004776:	f7fb fd2f 	bl	80001d8 <__aeabi_dsub>
 800477a:	4603      	mov	r3, r0
 800477c:	460c      	mov	r4, r1
 800477e:	461d      	mov	r5, r3
 8004780:	4626      	mov	r6, r4
        *rtu_Lw / q2;
 8004782:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004786:	e9d3 0100 	ldrd	r0, r1, [r3]
 800478a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800478e:	f7fc f805 	bl	800079c <__aeabi_ddiv>
 8004792:	4603      	mov	r3, r0
 8004794:	460c      	mov	r4, r1
      q2 = ((rtu_Reference[0] - 0.5 * *rtu_Lw / q2) - constraintIntercept) -
 8004796:	461a      	mov	r2, r3
 8004798:	4623      	mov	r3, r4
 800479a:	4628      	mov	r0, r5
 800479c:	4631      	mov	r1, r6
 800479e:	f7fb fd1b 	bl	80001d8 <__aeabi_dsub>
 80047a2:	4603      	mov	r3, r0
 80047a4:	460c      	mov	r4, r1
 80047a6:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
      if (*rtu_Zone == 2.0) {
 80047aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047ba:	f7fc f92d 	bl	8000a18 <__aeabi_dcmpeq>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d041      	beq.n	8004848 <Model_for_PIL+0x408>
        slope = (*rtu_SafeX - rtu_DetPoint[0]) / (*rtu_SafeY - rtu_DetPoint[1]);
 80047c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80047c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047d4:	461a      	mov	r2, r3
 80047d6:	4623      	mov	r3, r4
 80047d8:	f7fb fcfe 	bl	80001d8 <__aeabi_dsub>
 80047dc:	4603      	mov	r3, r0
 80047de:	460c      	mov	r4, r1
 80047e0:	461d      	mov	r5, r3
 80047e2:	4626      	mov	r6, r4
 80047e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f0:	3308      	adds	r3, #8
 80047f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047f6:	461a      	mov	r2, r3
 80047f8:	4623      	mov	r3, r4
 80047fa:	f7fb fced 	bl	80001d8 <__aeabi_dsub>
 80047fe:	4603      	mov	r3, r0
 8004800:	460c      	mov	r4, r1
 8004802:	461a      	mov	r2, r3
 8004804:	4623      	mov	r3, r4
 8004806:	4628      	mov	r0, r5
 8004808:	4631      	mov	r1, r6
 800480a:	f7fb ffc7 	bl	800079c <__aeabi_ddiv>
 800480e:	4603      	mov	r3, r0
 8004810:	460c      	mov	r4, r1
 8004812:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
        constraintIntercept = *rtu_SafeX - slope * *rtu_SafeY;
 8004816:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800481a:	e9d3 5600 	ldrd	r5, r6, [r3]
 800481e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004822:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004826:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800482a:	f7fb fe8d 	bl	8000548 <__aeabi_dmul>
 800482e:	4603      	mov	r3, r0
 8004830:	460c      	mov	r4, r1
 8004832:	461a      	mov	r2, r3
 8004834:	4623      	mov	r3, r4
 8004836:	4628      	mov	r0, r5
 8004838:	4631      	mov	r1, r6
 800483a:	f7fb fccd 	bl	80001d8 <__aeabi_dsub>
 800483e:	4603      	mov	r3, r0
 8004840:	460c      	mov	r4, r1
 8004842:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
 8004846:	e100      	b.n	8004a4a <Model_for_PIL+0x60a>
      } else if (*rtu_Zone == 3.0) {
 8004848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800484c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	4b5c      	ldr	r3, [pc, #368]	; (80049c8 <Model_for_PIL+0x588>)
 8004856:	f7fc f8df 	bl	8000a18 <__aeabi_dcmpeq>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d05d      	beq.n	800491c <Model_for_PIL+0x4dc>
        slope = q - 416.0 / rtu_Reference[3] * fabs(*rtu_Curvature);
 8004860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004864:	3318      	adds	r3, #24
 8004866:	e9d3 3400 	ldrd	r3, r4, [r3]
 800486a:	461a      	mov	r2, r3
 800486c:	4623      	mov	r3, r4
 800486e:	f04f 0000 	mov.w	r0, #0
 8004872:	4956      	ldr	r1, [pc, #344]	; (80049cc <Model_for_PIL+0x58c>)
 8004874:	f7fb ff92 	bl	800079c <__aeabi_ddiv>
 8004878:	4603      	mov	r3, r0
 800487a:	460c      	mov	r4, r1
 800487c:	4618      	mov	r0, r3
 800487e:	4621      	mov	r1, r4
 8004880:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004884:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800488c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004890:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004894:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004898:	f7fb fe56 	bl	8000548 <__aeabi_dmul>
 800489c:	4603      	mov	r3, r0
 800489e:	460c      	mov	r4, r1
 80048a0:	461a      	mov	r2, r3
 80048a2:	4623      	mov	r3, r4
 80048a4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80048a8:	f7fb fc96 	bl	80001d8 <__aeabi_dsub>
 80048ac:	4603      	mov	r3, r0
 80048ae:	460c      	mov	r4, r1
 80048b0:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
        constraintIntercept = (rtu_Reference[0] - *rtu_Lw / sin(Theta_ref)) -
 80048b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80048c0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80048c4:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 80048c8:	f003 fd3a 	bl	8008340 <sin>
 80048cc:	ec53 2b10 	vmov	r2, r3, d0
 80048d0:	4620      	mov	r0, r4
 80048d2:	4629      	mov	r1, r5
 80048d4:	f7fb ff62 	bl	800079c <__aeabi_ddiv>
 80048d8:	4603      	mov	r3, r0
 80048da:	460c      	mov	r4, r1
 80048dc:	461a      	mov	r2, r3
 80048de:	4623      	mov	r3, r4
 80048e0:	4640      	mov	r0, r8
 80048e2:	4649      	mov	r1, r9
 80048e4:	f7fb fc78 	bl	80001d8 <__aeabi_dsub>
 80048e8:	4603      	mov	r3, r0
 80048ea:	460c      	mov	r4, r1
 80048ec:	461d      	mov	r5, r3
 80048ee:	4626      	mov	r6, r4
          slope * rtu_Reference[1];
 80048f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048f4:	3308      	adds	r3, #8
 80048f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048fa:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80048fe:	f7fb fe23 	bl	8000548 <__aeabi_dmul>
 8004902:	4603      	mov	r3, r0
 8004904:	460c      	mov	r4, r1
        constraintIntercept = (rtu_Reference[0] - *rtu_Lw / sin(Theta_ref)) -
 8004906:	461a      	mov	r2, r3
 8004908:	4623      	mov	r3, r4
 800490a:	4628      	mov	r0, r5
 800490c:	4631      	mov	r1, r6
 800490e:	f7fb fc63 	bl	80001d8 <__aeabi_dsub>
 8004912:	4603      	mov	r3, r0
 8004914:	460c      	mov	r4, r1
 8004916:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
 800491a:	e096      	b.n	8004a4a <Model_for_PIL+0x60a>
      } else if (*rtu_Zone == 4.0) {
 800491c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004920:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	4b29      	ldr	r3, [pc, #164]	; (80049d0 <Model_for_PIL+0x590>)
 800492a:	f7fc f875 	bl	8000a18 <__aeabi_dcmpeq>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d057      	beq.n	80049e4 <Model_for_PIL+0x5a4>
        slope = (rtu_EntryPoint[0] - *rtu_EndX) / (rtu_EntryPoint[1] - *rtu_EndY);
 8004934:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004938:	e9d3 0100 	ldrd	r0, r1, [r3]
 800493c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004940:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004944:	461a      	mov	r2, r3
 8004946:	4623      	mov	r3, r4
 8004948:	f7fb fc46 	bl	80001d8 <__aeabi_dsub>
 800494c:	4603      	mov	r3, r0
 800494e:	460c      	mov	r4, r1
 8004950:	461d      	mov	r5, r3
 8004952:	4626      	mov	r6, r4
 8004954:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004958:	3308      	adds	r3, #8
 800495a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800495e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004962:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004966:	461a      	mov	r2, r3
 8004968:	4623      	mov	r3, r4
 800496a:	f7fb fc35 	bl	80001d8 <__aeabi_dsub>
 800496e:	4603      	mov	r3, r0
 8004970:	460c      	mov	r4, r1
 8004972:	461a      	mov	r2, r3
 8004974:	4623      	mov	r3, r4
 8004976:	4628      	mov	r0, r5
 8004978:	4631      	mov	r1, r6
 800497a:	f7fb ff0f 	bl	800079c <__aeabi_ddiv>
 800497e:	4603      	mov	r3, r0
 8004980:	460c      	mov	r4, r1
 8004982:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
        constraintIntercept = rtu_EntryPoint[0] - slope * rtu_EntryPoint[1];
 8004986:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800498a:	e9d3 5600 	ldrd	r5, r6, [r3]
 800498e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004992:	3308      	adds	r3, #8
 8004994:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004998:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800499c:	f7fb fdd4 	bl	8000548 <__aeabi_dmul>
 80049a0:	4603      	mov	r3, r0
 80049a2:	460c      	mov	r4, r1
 80049a4:	461a      	mov	r2, r3
 80049a6:	4623      	mov	r3, r4
 80049a8:	4628      	mov	r0, r5
 80049aa:	4631      	mov	r1, r6
 80049ac:	f7fb fc14 	bl	80001d8 <__aeabi_dsub>
 80049b0:	4603      	mov	r3, r0
 80049b2:	460c      	mov	r4, r1
 80049b4:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
 80049b8:	e047      	b.n	8004a4a <Model_for_PIL+0x60a>
 80049ba:	bf00      	nop
 80049bc:	f3af 8000 	nop.w
 80049c0:	3ff00000 	.word	0x3ff00000
 80049c4:	3fe00000 	.word	0x3fe00000
 80049c8:	40080000 	.word	0x40080000
 80049cc:	407a0000 	.word	0x407a0000
 80049d0:	40100000 	.word	0x40100000
 80049d4:	54442d18 	.word	0x54442d18
 80049d8:	400921fb 	.word	0x400921fb
 80049dc:	54442d18 	.word	0x54442d18
 80049e0:	401921fb 	.word	0x401921fb
      } else {
        slope = q;
 80049e4:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80049e8:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
        constraintIntercept = (0.5 * *rtu_Lw / sin(Theta_ref) + rtu_Reference[0])
 80049ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80049f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	4b90      	ldr	r3, [pc, #576]	; (8004c3c <Model_for_PIL+0x7fc>)
 80049fa:	f7fb fda5 	bl	8000548 <__aeabi_dmul>
 80049fe:	4603      	mov	r3, r0
 8004a00:	460c      	mov	r4, r1
 8004a02:	4625      	mov	r5, r4
 8004a04:	461c      	mov	r4, r3
 8004a06:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 8004a0a:	f003 fc99 	bl	8008340 <sin>
 8004a0e:	ec53 2b10 	vmov	r2, r3, d0
 8004a12:	4620      	mov	r0, r4
 8004a14:	4629      	mov	r1, r5
 8004a16:	f7fb fec1 	bl	800079c <__aeabi_ddiv>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	460c      	mov	r4, r1
 8004a1e:	4618      	mov	r0, r3
 8004a20:	4621      	mov	r1, r4
 8004a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	4623      	mov	r3, r4
 8004a2e:	f7fb fbd5 	bl	80001dc <__adddf3>
 8004a32:	4603      	mov	r3, r0
 8004a34:	460c      	mov	r4, r1
 8004a36:	4618      	mov	r0, r3
 8004a38:	4621      	mov	r1, r4
 8004a3a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8004a3e:	f7fb fbcb 	bl	80001d8 <__aeabi_dsub>
 8004a42:	4603      	mov	r3, r0
 8004a44:	460c      	mov	r4, r1
 8004a46:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
          - constraintIntercept;
      }

      if ((Theta_ref > 0.0) && (slope <= 0.0)) {
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004a56:	f7fc f807 	bl	8000a68 <__aeabi_dcmpgt>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d070      	beq.n	8004b42 <Model_for_PIL+0x702>
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004a6c:	f7fb ffe8 	bl	8000a40 <__aeabi_dcmple>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d065      	beq.n	8004b42 <Model_for_PIL+0x702>
        rty_F[0] = 1.0;
 8004a76:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8004a7a:	f04f 0300 	mov.w	r3, #0
 8004a7e:	4c70      	ldr	r4, [pc, #448]	; (8004c40 <Model_for_PIL+0x800>)
 8004a80:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[2] = -slope;
 8004a84:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a88:	3310      	adds	r3, #16
 8004a8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a8e:	67ba      	str	r2, [r7, #120]	; 0x78
 8004a90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a94:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 8004a98:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a9a:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8004a9e:	ed83 7b00 	vstr	d7, [r3]
        rty_F[4] = 0.0;
 8004aa2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004aa6:	f103 0220 	add.w	r2, r3, #32
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	f04f 0400 	mov.w	r4, #0
 8004ab2:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[6] = 0.0;
 8004ab6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004aba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	f04f 0400 	mov.w	r4, #0
 8004ac6:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[1] = -1.0;
 8004aca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004ace:	f103 0208 	add.w	r2, r3, #8
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	4c5b      	ldr	r4, [pc, #364]	; (8004c44 <Model_for_PIL+0x804>)
 8004ad8:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[3] = q;
 8004adc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004ae0:	f103 0218 	add.w	r2, r3, #24
 8004ae4:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8004ae8:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[5] = 0.0;
 8004aec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004af0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	f04f 0400 	mov.w	r4, #0
 8004afc:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[7] = 0.0;
 8004b00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004b04:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	f04f 0400 	mov.w	r4, #0
 8004b10:	e9c2 3400 	strd	r3, r4, [r2]
        rty_G[0] = constraintIntercept;
 8004b14:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004b18:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8004b1c:	e9c2 3400 	strd	r3, r4, [r2]
        rty_G[1] = -q2;
 8004b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b24:	3308      	adds	r3, #8
 8004b26:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004b2a:	673a      	str	r2, [r7, #112]	; 0x70
 8004b2c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004b30:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 8004b34:	677a      	str	r2, [r7, #116]	; 0x74
 8004b36:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8004b3a:	ed83 7b00 	vstr	d7, [r3]
 8004b3e:	f000 bd2b 	b.w	8005598 <Model_for_PIL+0x1158>
      } else if ((Theta_ref < 0.0) && (slope > 0.0)) {
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004b4e:	f7fb ff6d 	bl	8000a2c <__aeabi_dcmplt>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d077      	beq.n	8004c48 <Model_for_PIL+0x808>
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004b64:	f7fb ff80 	bl	8000a68 <__aeabi_dcmpgt>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d06c      	beq.n	8004c48 <Model_for_PIL+0x808>
        rty_F[0] = -1.0;
 8004b6e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	4c33      	ldr	r4, [pc, #204]	; (8004c44 <Model_for_PIL+0x804>)
 8004b78:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[2] = slope;
 8004b7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004b80:	f103 0210 	add.w	r2, r3, #16
 8004b84:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8004b88:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[4] = 0.0;
 8004b8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004b90:	f103 0220 	add.w	r2, r3, #32
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	f04f 0400 	mov.w	r4, #0
 8004b9c:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[6] = 0.0;
 8004ba0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004ba4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	f04f 0400 	mov.w	r4, #0
 8004bb0:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[1] = 1.0;
 8004bb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004bb8:	f103 0208 	add.w	r2, r3, #8
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	4c1f      	ldr	r4, [pc, #124]	; (8004c40 <Model_for_PIL+0x800>)
 8004bc2:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[3] = -q;
 8004bc6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004bca:	3318      	adds	r3, #24
 8004bcc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004bd0:	66ba      	str	r2, [r7, #104]	; 0x68
 8004bd2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004bd6:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 8004bda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bdc:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8004be0:	ed83 7b00 	vstr	d7, [r3]
        rty_F[5] = 0.0;
 8004be4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004be8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	f04f 0400 	mov.w	r4, #0
 8004bf4:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[7] = 0.0;
 8004bf8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004bfc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	f04f 0400 	mov.w	r4, #0
 8004c08:	e9c2 3400 	strd	r3, r4, [r2]
        rty_G[0] = -constraintIntercept;
 8004c0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c10:	663b      	str	r3, [r7, #96]	; 0x60
 8004c12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c16:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004c1a:	667b      	str	r3, [r7, #100]	; 0x64
 8004c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c20:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8004c24:	ed83 7b00 	vstr	d7, [r3]
        rty_G[1] = q2;
 8004c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c2c:	f103 0208 	add.w	r2, r3, #8
 8004c30:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8004c34:	e9c2 3400 	strd	r3, r4, [r2]
 8004c38:	f000 bcae 	b.w	8005598 <Model_for_PIL+0x1158>
 8004c3c:	3fe00000 	.word	0x3fe00000
 8004c40:	3ff00000 	.word	0x3ff00000
 8004c44:	bff00000 	.word	0xbff00000
      } else if ((Theta_ref > 0.0) && (slope > 0.0)) {
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	f04f 0300 	mov.w	r3, #0
 8004c50:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004c54:	f7fb ff08 	bl	8000a68 <__aeabi_dcmpgt>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d070      	beq.n	8004d40 <Model_for_PIL+0x900>
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004c6a:	f7fb fefd 	bl	8000a68 <__aeabi_dcmpgt>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d065      	beq.n	8004d40 <Model_for_PIL+0x900>
        rty_F[0] = 1.0;
 8004c74:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	4cc7      	ldr	r4, [pc, #796]	; (8004f9c <Model_for_PIL+0xb5c>)
 8004c7e:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[2] = -slope;
 8004c82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c86:	3310      	adds	r3, #16
 8004c88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c8c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c92:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 8004c96:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004c98:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8004c9c:	ed83 7b00 	vstr	d7, [r3]
        rty_F[4] = 0.0;
 8004ca0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004ca4:	f103 0220 	add.w	r2, r3, #32
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	f04f 0400 	mov.w	r4, #0
 8004cb0:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[6] = 0.0;
 8004cb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004cb8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	f04f 0400 	mov.w	r4, #0
 8004cc4:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[1] = -1.0;
 8004cc8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004ccc:	f103 0208 	add.w	r2, r3, #8
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	4cb2      	ldr	r4, [pc, #712]	; (8004fa0 <Model_for_PIL+0xb60>)
 8004cd6:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[3] = q;
 8004cda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004cde:	f103 0218 	add.w	r2, r3, #24
 8004ce2:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8004ce6:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[5] = 0.0;
 8004cea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004cee:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	f04f 0400 	mov.w	r4, #0
 8004cfa:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[7] = 0.0;
 8004cfe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d02:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	f04f 0400 	mov.w	r4, #0
 8004d0e:	e9c2 3400 	strd	r3, r4, [r2]
        rty_G[0] = constraintIntercept;
 8004d12:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004d16:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8004d1a:	e9c2 3400 	strd	r3, r4, [r2]
        rty_G[1] = -q2;
 8004d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d22:	3308      	adds	r3, #8
 8004d24:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004d28:	653a      	str	r2, [r7, #80]	; 0x50
 8004d2a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004d2e:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 8004d32:	657a      	str	r2, [r7, #84]	; 0x54
 8004d34:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8004d38:	ed83 7b00 	vstr	d7, [r3]
 8004d3c:	f000 bc2c 	b.w	8005598 <Model_for_PIL+0x1158>
      } else {
        rty_F[0] = -1.0;
 8004d40:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	4c95      	ldr	r4, [pc, #596]	; (8004fa0 <Model_for_PIL+0xb60>)
 8004d4a:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[2] = slope;
 8004d4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d52:	f103 0210 	add.w	r2, r3, #16
 8004d56:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8004d5a:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[4] = 0.0;
 8004d5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d62:	f103 0220 	add.w	r2, r3, #32
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	f04f 0400 	mov.w	r4, #0
 8004d6e:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[6] = 0.0;
 8004d72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	f04f 0400 	mov.w	r4, #0
 8004d82:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[1] = 1.0;
 8004d86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d8a:	f103 0208 	add.w	r2, r3, #8
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	4c82      	ldr	r4, [pc, #520]	; (8004f9c <Model_for_PIL+0xb5c>)
 8004d94:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[3] = -q;
 8004d98:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d9c:	3318      	adds	r3, #24
 8004d9e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004da2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004da4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004da8:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 8004dac:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004dae:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8004db2:	ed83 7b00 	vstr	d7, [r3]
        rty_F[5] = 0.0;
 8004db6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004dba:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	f04f 0400 	mov.w	r4, #0
 8004dc6:	e9c2 3400 	strd	r3, r4, [r2]
        rty_F[7] = 0.0;
 8004dca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004dce:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	f04f 0400 	mov.w	r4, #0
 8004dda:	e9c2 3400 	strd	r3, r4, [r2]
        rty_G[0] = -constraintIntercept;
 8004dde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004de2:	643b      	str	r3, [r7, #64]	; 0x40
 8004de4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004de8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004dec:	647b      	str	r3, [r7, #68]	; 0x44
 8004dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004df2:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8004df6:	ed83 7b00 	vstr	d7, [r3]
        rty_G[1] = q2;
 8004dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dfe:	f103 0208 	add.w	r2, r3, #8
 8004e02:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8004e06:	e9c2 3400 	strd	r3, r4, [r2]
 8004e0a:	e3c5      	b.n	8005598 <Model_for_PIL+0x1158>
      }
    } else {
      memset(&rty_F[0], 0, sizeof(real_T) << 3U);
 8004e0c:	2240      	movs	r2, #64	; 0x40
 8004e0e:	2100      	movs	r1, #0
 8004e10:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8004e14:	f003 f9c3 	bl	800819e <memset>
      rty_G[0] = 0.0;
 8004e18:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	f04f 0400 	mov.w	r4, #0
 8004e24:	e9c2 3400 	strd	r3, r4, [r2]
      rty_G[1] = 0.0;
 8004e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e2c:	f103 0208 	add.w	r2, r3, #8
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	f04f 0400 	mov.w	r4, #0
 8004e38:	e9c2 3400 	strd	r3, r4, [r2]
 8004e3c:	e3ac      	b.n	8005598 <Model_for_PIL+0x1158>
    }
  } else if (*rtu_detection != 0.0) {
 8004e3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	f7fb fde3 	bl	8000a18 <__aeabi_dcmpeq>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f040 8387 	bne.w	8005568 <Model_for_PIL+0x1128>
    q2 = cos(Theta_ref);
 8004e5a:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 8004e5e:	f003 f9a7 	bl	80081b0 <cos>
 8004e62:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
    constraintIntercept = q * rtu_Reference[0];
 8004e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	4623      	mov	r3, r4
 8004e72:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004e76:	f7fb fb67 	bl	8000548 <__aeabi_dmul>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
    q2 = ((0.5 * *rtu_Lw / q2 + rtu_Reference[1]) - constraintIntercept) +
 8004e82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	4b45      	ldr	r3, [pc, #276]	; (8004fa4 <Model_for_PIL+0xb64>)
 8004e90:	f7fb fb5a 	bl	8000548 <__aeabi_dmul>
 8004e94:	4603      	mov	r3, r0
 8004e96:	460c      	mov	r4, r1
 8004e98:	4618      	mov	r0, r3
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8004ea0:	f7fb fc7c 	bl	800079c <__aeabi_ddiv>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	4621      	mov	r1, r4
 8004eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eb0:	3308      	adds	r3, #8
 8004eb2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	4623      	mov	r3, r4
 8004eba:	f7fb f98f 	bl	80001dc <__adddf3>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	4621      	mov	r1, r4
 8004ec6:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8004eca:	f7fb f985 	bl	80001d8 <__aeabi_dsub>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	460c      	mov	r4, r1
 8004ed2:	461d      	mov	r5, r3
 8004ed4:	4626      	mov	r6, r4
      *rtu_Lw / q2;
 8004ed6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004eda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ede:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8004ee2:	f7fb fc5b 	bl	800079c <__aeabi_ddiv>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	460c      	mov	r4, r1
    q2 = ((0.5 * *rtu_Lw / q2 + rtu_Reference[1]) - constraintIntercept) +
 8004eea:	461a      	mov	r2, r3
 8004eec:	4623      	mov	r3, r4
 8004eee:	4628      	mov	r0, r5
 8004ef0:	4631      	mov	r1, r6
 8004ef2:	f7fb f973 	bl	80001dc <__adddf3>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	460c      	mov	r4, r1
 8004efa:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
    if (*rtu_Zone == 2.0) {
 8004efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f0e:	f7fb fd83 	bl	8000a18 <__aeabi_dcmpeq>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d047      	beq.n	8004fa8 <Model_for_PIL+0xb68>
      slope = (*rtu_SafeY - rtu_DetPoint[1]) / (*rtu_SafeX - rtu_DetPoint[0]);
 8004f18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f24:	3308      	adds	r3, #8
 8004f26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	4623      	mov	r3, r4
 8004f2e:	f7fb f953 	bl	80001d8 <__aeabi_dsub>
 8004f32:	4603      	mov	r3, r0
 8004f34:	460c      	mov	r4, r1
 8004f36:	461d      	mov	r5, r3
 8004f38:	4626      	mov	r6, r4
 8004f3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	4623      	mov	r3, r4
 8004f4e:	f7fb f943 	bl	80001d8 <__aeabi_dsub>
 8004f52:	4603      	mov	r3, r0
 8004f54:	460c      	mov	r4, r1
 8004f56:	461a      	mov	r2, r3
 8004f58:	4623      	mov	r3, r4
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	4631      	mov	r1, r6
 8004f5e:	f7fb fc1d 	bl	800079c <__aeabi_ddiv>
 8004f62:	4603      	mov	r3, r0
 8004f64:	460c      	mov	r4, r1
 8004f66:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
      constraintIntercept = *rtu_SafeY - slope * *rtu_SafeX;
 8004f6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f6e:	e9d3 5600 	ldrd	r5, r6, [r3]
 8004f72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f7a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8004f7e:	f7fb fae3 	bl	8000548 <__aeabi_dmul>
 8004f82:	4603      	mov	r3, r0
 8004f84:	460c      	mov	r4, r1
 8004f86:	461a      	mov	r2, r3
 8004f88:	4623      	mov	r3, r4
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	4631      	mov	r1, r6
 8004f8e:	f7fb f923 	bl	80001d8 <__aeabi_dsub>
 8004f92:	4603      	mov	r3, r0
 8004f94:	460c      	mov	r4, r1
 8004f96:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
 8004f9a:	e0f1      	b.n	8005180 <Model_for_PIL+0xd40>
 8004f9c:	3ff00000 	.word	0x3ff00000
 8004fa0:	bff00000 	.word	0xbff00000
 8004fa4:	3fe00000 	.word	0x3fe00000
    } else if (*rtu_Zone == 3.0) {
 8004fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	4bb8      	ldr	r3, [pc, #736]	; (8005298 <Model_for_PIL+0xe58>)
 8004fb6:	f7fb fd2f 	bl	8000a18 <__aeabi_dcmpeq>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d05a      	beq.n	8005076 <Model_for_PIL+0xc36>
      slope = 416.0 / rtu_Reference[3] * fabs(*rtu_Curvature) + q;
 8004fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fc4:	3318      	adds	r3, #24
 8004fc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	4623      	mov	r3, r4
 8004fce:	f04f 0000 	mov.w	r0, #0
 8004fd2:	49b2      	ldr	r1, [pc, #712]	; (800529c <Model_for_PIL+0xe5c>)
 8004fd4:	f7fb fbe2 	bl	800079c <__aeabi_ddiv>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	460c      	mov	r4, r1
 8004fdc:	4618      	mov	r0, r3
 8004fde:	4621      	mov	r1, r4
 8004fe0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004fe4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fe8:	469a      	mov	sl, r3
 8004fea:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 8004fee:	4652      	mov	r2, sl
 8004ff0:	465b      	mov	r3, fp
 8004ff2:	f7fb faa9 	bl	8000548 <__aeabi_dmul>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	4623      	mov	r3, r4
 8004ffe:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005002:	f7fb f8eb 	bl	80001dc <__adddf3>
 8005006:	4603      	mov	r3, r0
 8005008:	460c      	mov	r4, r1
 800500a:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
      constraintIntercept = (*rtu_Lw / cos(Theta_ref) + rtu_Reference[1]) -
 800500e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005012:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005016:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 800501a:	f003 f8c9 	bl	80081b0 <cos>
 800501e:	ec53 2b10 	vmov	r2, r3, d0
 8005022:	4620      	mov	r0, r4
 8005024:	4629      	mov	r1, r5
 8005026:	f7fb fbb9 	bl	800079c <__aeabi_ddiv>
 800502a:	4603      	mov	r3, r0
 800502c:	460c      	mov	r4, r1
 800502e:	4618      	mov	r0, r3
 8005030:	4621      	mov	r1, r4
 8005032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005036:	3308      	adds	r3, #8
 8005038:	e9d3 3400 	ldrd	r3, r4, [r3]
 800503c:	461a      	mov	r2, r3
 800503e:	4623      	mov	r3, r4
 8005040:	f7fb f8cc 	bl	80001dc <__adddf3>
 8005044:	4603      	mov	r3, r0
 8005046:	460c      	mov	r4, r1
 8005048:	461d      	mov	r5, r3
 800504a:	4626      	mov	r6, r4
        slope * rtu_Reference[0];
 800504c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005050:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005054:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8005058:	f7fb fa76 	bl	8000548 <__aeabi_dmul>
 800505c:	4603      	mov	r3, r0
 800505e:	460c      	mov	r4, r1
      constraintIntercept = (*rtu_Lw / cos(Theta_ref) + rtu_Reference[1]) -
 8005060:	461a      	mov	r2, r3
 8005062:	4623      	mov	r3, r4
 8005064:	4628      	mov	r0, r5
 8005066:	4631      	mov	r1, r6
 8005068:	f7fb f8b6 	bl	80001d8 <__aeabi_dsub>
 800506c:	4603      	mov	r3, r0
 800506e:	460c      	mov	r4, r1
 8005070:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
 8005074:	e084      	b.n	8005180 <Model_for_PIL+0xd40>
    } else if (*rtu_Zone == 4.0) {
 8005076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800507a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	4b87      	ldr	r3, [pc, #540]	; (80052a0 <Model_for_PIL+0xe60>)
 8005084:	f7fb fcc8 	bl	8000a18 <__aeabi_dcmpeq>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d042      	beq.n	8005114 <Model_for_PIL+0xcd4>
      slope = (rtu_EntryPoint[1] - *rtu_EndY) / (rtu_EntryPoint[0] - *rtu_EndX);
 800508e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005092:	3308      	adds	r3, #8
 8005094:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005098:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800509c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050a0:	461a      	mov	r2, r3
 80050a2:	4623      	mov	r3, r4
 80050a4:	f7fb f898 	bl	80001d8 <__aeabi_dsub>
 80050a8:	4603      	mov	r3, r0
 80050aa:	460c      	mov	r4, r1
 80050ac:	461d      	mov	r5, r3
 80050ae:	4626      	mov	r6, r4
 80050b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050c0:	461a      	mov	r2, r3
 80050c2:	4623      	mov	r3, r4
 80050c4:	f7fb f888 	bl	80001d8 <__aeabi_dsub>
 80050c8:	4603      	mov	r3, r0
 80050ca:	460c      	mov	r4, r1
 80050cc:	461a      	mov	r2, r3
 80050ce:	4623      	mov	r3, r4
 80050d0:	4628      	mov	r0, r5
 80050d2:	4631      	mov	r1, r6
 80050d4:	f7fb fb62 	bl	800079c <__aeabi_ddiv>
 80050d8:	4603      	mov	r3, r0
 80050da:	460c      	mov	r4, r1
 80050dc:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
      constraintIntercept = rtu_EntryPoint[1] - slope * rtu_EntryPoint[0];
 80050e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050e4:	3308      	adds	r3, #8
 80050e6:	e9d3 5600 	ldrd	r5, r6, [r3]
 80050ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050f2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80050f6:	f7fb fa27 	bl	8000548 <__aeabi_dmul>
 80050fa:	4603      	mov	r3, r0
 80050fc:	460c      	mov	r4, r1
 80050fe:	461a      	mov	r2, r3
 8005100:	4623      	mov	r3, r4
 8005102:	4628      	mov	r0, r5
 8005104:	4631      	mov	r1, r6
 8005106:	f7fb f867 	bl	80001d8 <__aeabi_dsub>
 800510a:	4603      	mov	r3, r0
 800510c:	460c      	mov	r4, r1
 800510e:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
 8005112:	e035      	b.n	8005180 <Model_for_PIL+0xd40>
    } else {
      slope = q;
 8005114:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8005118:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
      constraintIntercept = (rtu_Reference[1] - 0.5 * *rtu_Lw / cos(Theta_ref))
 800511c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005120:	3308      	adds	r3, #8
 8005122:	e9d3 5600 	ldrd	r5, r6, [r3]
 8005126:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800512a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	4b5c      	ldr	r3, [pc, #368]	; (80052a4 <Model_for_PIL+0xe64>)
 8005134:	f7fb fa08 	bl	8000548 <__aeabi_dmul>
 8005138:	4603      	mov	r3, r0
 800513a:	460c      	mov	r4, r1
 800513c:	4698      	mov	r8, r3
 800513e:	46a1      	mov	r9, r4
 8005140:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 8005144:	f003 f834 	bl	80081b0 <cos>
 8005148:	ec54 3b10 	vmov	r3, r4, d0
 800514c:	461a      	mov	r2, r3
 800514e:	4623      	mov	r3, r4
 8005150:	4640      	mov	r0, r8
 8005152:	4649      	mov	r1, r9
 8005154:	f7fb fb22 	bl	800079c <__aeabi_ddiv>
 8005158:	4603      	mov	r3, r0
 800515a:	460c      	mov	r4, r1
 800515c:	461a      	mov	r2, r3
 800515e:	4623      	mov	r3, r4
 8005160:	4628      	mov	r0, r5
 8005162:	4631      	mov	r1, r6
 8005164:	f7fb f838 	bl	80001d8 <__aeabi_dsub>
 8005168:	4603      	mov	r3, r0
 800516a:	460c      	mov	r4, r1
 800516c:	4618      	mov	r0, r3
 800516e:	4621      	mov	r1, r4
 8005170:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8005174:	f7fb f830 	bl	80001d8 <__aeabi_dsub>
 8005178:	4603      	mov	r3, r0
 800517a:	460c      	mov	r4, r1
 800517c:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
        - constraintIntercept;
    }

    Theta_ref = fabs(Theta_ref);
 8005180:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005184:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005188:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800518c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005190:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if ((Theta_ref <= 1.5707963267948966) && (slope >= 0.0)) {
 8005194:	a33e      	add	r3, pc, #248	; (adr r3, 8005290 <Model_for_PIL+0xe50>)
 8005196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800519e:	f7fb fc4f 	bl	8000a40 <__aeabi_dcmple>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 8083 	beq.w	80052b0 <Model_for_PIL+0xe70>
 80051aa:	f04f 0200 	mov.w	r2, #0
 80051ae:	f04f 0300 	mov.w	r3, #0
 80051b2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80051b6:	f7fb fc4d 	bl	8000a54 <__aeabi_dcmpge>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d077      	beq.n	80052b0 <Model_for_PIL+0xe70>
      rty_F[0] = slope;
 80051c0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80051c4:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80051c8:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[2] = -1.0;
 80051cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80051d0:	f103 0210 	add.w	r2, r3, #16
 80051d4:	f04f 0300 	mov.w	r3, #0
 80051d8:	4c33      	ldr	r4, [pc, #204]	; (80052a8 <Model_for_PIL+0xe68>)
 80051da:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[4] = 0.0;
 80051de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80051e2:	f103 0220 	add.w	r2, r3, #32
 80051e6:	f04f 0300 	mov.w	r3, #0
 80051ea:	f04f 0400 	mov.w	r4, #0
 80051ee:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[6] = 0.0;
 80051f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80051f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	f04f 0400 	mov.w	r4, #0
 8005202:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[1] = -q;
 8005206:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800520a:	3308      	adds	r3, #8
 800520c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8005210:	63ba      	str	r2, [r7, #56]	; 0x38
 8005212:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005216:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 800521a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800521c:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8005220:	ed83 7b00 	vstr	d7, [r3]
      rty_F[3] = 1.0;
 8005224:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005228:	f103 0218 	add.w	r2, r3, #24
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	4c1e      	ldr	r4, [pc, #120]	; (80052ac <Model_for_PIL+0xe6c>)
 8005232:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[5] = 0.0;
 8005236:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800523a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	f04f 0400 	mov.w	r4, #0
 8005246:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[7] = 0.0;
 800524a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800524e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	f04f 0400 	mov.w	r4, #0
 800525a:	e9c2 3400 	strd	r3, r4, [r2]
      rty_G[0] = -constraintIntercept;
 800525e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005262:	633b      	str	r3, [r7, #48]	; 0x30
 8005264:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005268:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800526c:	637b      	str	r3, [r7, #52]	; 0x34
 800526e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005272:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005276:	ed83 7b00 	vstr	d7, [r3]
      rty_G[1] = q2;
 800527a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800527e:	f103 0208 	add.w	r2, r3, #8
 8005282:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8005286:	e9c2 3400 	strd	r3, r4, [r2]
 800528a:	e185      	b.n	8005598 <Model_for_PIL+0x1158>
 800528c:	f3af 8000 	nop.w
 8005290:	54442d18 	.word	0x54442d18
 8005294:	3ff921fb 	.word	0x3ff921fb
 8005298:	40080000 	.word	0x40080000
 800529c:	407a0000 	.word	0x407a0000
 80052a0:	40100000 	.word	0x40100000
 80052a4:	3fe00000 	.word	0x3fe00000
 80052a8:	bff00000 	.word	0xbff00000
 80052ac:	3ff00000 	.word	0x3ff00000
    } else if ((Theta_ref > 1.5707963267948966) && (slope < 0.0)) {
 80052b0:	a3cf      	add	r3, pc, #828	; (adr r3, 80055f0 <Model_for_PIL+0x11b0>)
 80052b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80052ba:	f7fb fbd5 	bl	8000a68 <__aeabi_dcmpgt>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d070      	beq.n	80053a6 <Model_for_PIL+0xf66>
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80052d0:	f7fb fbac 	bl	8000a2c <__aeabi_dcmplt>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d065      	beq.n	80053a6 <Model_for_PIL+0xf66>
      rty_F[0] = -slope;
 80052da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052de:	62bb      	str	r3, [r7, #40]	; 0x28
 80052e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80052e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052ee:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80052f2:	ed83 7b00 	vstr	d7, [r3]
      rty_F[2] = 1.0;
 80052f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052fa:	f103 0210 	add.w	r2, r3, #16
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	4cbd      	ldr	r4, [pc, #756]	; (80055f8 <Model_for_PIL+0x11b8>)
 8005304:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[4] = 0.0;
 8005308:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800530c:	f103 0220 	add.w	r2, r3, #32
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	f04f 0400 	mov.w	r4, #0
 8005318:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[6] = 0.0;
 800531c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005320:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	f04f 0400 	mov.w	r4, #0
 800532c:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[1] = q;
 8005330:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005334:	f103 0208 	add.w	r2, r3, #8
 8005338:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800533c:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[3] = -1.0;
 8005340:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005344:	f103 0218 	add.w	r2, r3, #24
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	4cab      	ldr	r4, [pc, #684]	; (80055fc <Model_for_PIL+0x11bc>)
 800534e:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[5] = 0.0;
 8005352:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005356:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800535a:	f04f 0300 	mov.w	r3, #0
 800535e:	f04f 0400 	mov.w	r4, #0
 8005362:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[7] = 0.0;
 8005366:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800536a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800536e:	f04f 0300 	mov.w	r3, #0
 8005372:	f04f 0400 	mov.w	r4, #0
 8005376:	e9c2 3400 	strd	r3, r4, [r2]
      rty_G[0] = constraintIntercept;
 800537a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800537e:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8005382:	e9c2 3400 	strd	r3, r4, [r2]
      rty_G[1] = -q2;
 8005386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800538a:	3308      	adds	r3, #8
 800538c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005390:	623a      	str	r2, [r7, #32]
 8005392:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005396:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 800539a:	627a      	str	r2, [r7, #36]	; 0x24
 800539c:	ed97 7b08 	vldr	d7, [r7, #32]
 80053a0:	ed83 7b00 	vstr	d7, [r3]
 80053a4:	e0f8      	b.n	8005598 <Model_for_PIL+0x1158>
    } else if ((Theta_ref <= 1.5707963267948966) && (slope < 0.0)) {
 80053a6:	a392      	add	r3, pc, #584	; (adr r3, 80055f0 <Model_for_PIL+0x11b0>)
 80053a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ac:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80053b0:	f7fb fb46 	bl	8000a40 <__aeabi_dcmple>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d070      	beq.n	800549c <Model_for_PIL+0x105c>
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80053c6:	f7fb fb31 	bl	8000a2c <__aeabi_dcmplt>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d065      	beq.n	800549c <Model_for_PIL+0x105c>
      rty_F[0] = slope;
 80053d0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80053d4:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80053d8:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[2] = -1.0;
 80053dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80053e0:	f103 0210 	add.w	r2, r3, #16
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	4c84      	ldr	r4, [pc, #528]	; (80055fc <Model_for_PIL+0x11bc>)
 80053ea:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[4] = 0.0;
 80053ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80053f2:	f103 0220 	add.w	r2, r3, #32
 80053f6:	f04f 0300 	mov.w	r3, #0
 80053fa:	f04f 0400 	mov.w	r4, #0
 80053fe:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[6] = 0.0;
 8005402:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005406:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	f04f 0400 	mov.w	r4, #0
 8005412:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[1] = -q;
 8005416:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800541a:	3308      	adds	r3, #8
 800541c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8005420:	61ba      	str	r2, [r7, #24]
 8005422:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005426:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 800542a:	61fa      	str	r2, [r7, #28]
 800542c:	ed97 7b06 	vldr	d7, [r7, #24]
 8005430:	ed83 7b00 	vstr	d7, [r3]
      rty_F[3] = 1.0;
 8005434:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005438:	f103 0218 	add.w	r2, r3, #24
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	4c6d      	ldr	r4, [pc, #436]	; (80055f8 <Model_for_PIL+0x11b8>)
 8005442:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[5] = 0.0;
 8005446:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800544a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800544e:	f04f 0300 	mov.w	r3, #0
 8005452:	f04f 0400 	mov.w	r4, #0
 8005456:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[7] = 0.0;
 800545a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800545e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005462:	f04f 0300 	mov.w	r3, #0
 8005466:	f04f 0400 	mov.w	r4, #0
 800546a:	e9c2 3400 	strd	r3, r4, [r2]
      rty_G[0] = -constraintIntercept;
 800546e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005472:	613b      	str	r3, [r7, #16]
 8005474:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005478:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005482:	ed97 7b04 	vldr	d7, [r7, #16]
 8005486:	ed83 7b00 	vstr	d7, [r3]
      rty_G[1] = q2;
 800548a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800548e:	f103 0208 	add.w	r2, r3, #8
 8005492:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8005496:	e9c2 3400 	strd	r3, r4, [r2]
 800549a:	e07d      	b.n	8005598 <Model_for_PIL+0x1158>
    } else {
      rty_F[0] = -slope;
 800549c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80054a0:	60bb      	str	r3, [r7, #8]
 80054a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80054b0:	ed97 7b02 	vldr	d7, [r7, #8]
 80054b4:	ed83 7b00 	vstr	d7, [r3]
      rty_F[2] = 1.0;
 80054b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80054bc:	f103 0210 	add.w	r2, r3, #16
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	4c4c      	ldr	r4, [pc, #304]	; (80055f8 <Model_for_PIL+0x11b8>)
 80054c6:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[4] = 0.0;
 80054ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80054ce:	f103 0220 	add.w	r2, r3, #32
 80054d2:	f04f 0300 	mov.w	r3, #0
 80054d6:	f04f 0400 	mov.w	r4, #0
 80054da:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[6] = 0.0;
 80054de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80054e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	f04f 0400 	mov.w	r4, #0
 80054ee:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[1] = q;
 80054f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80054f6:	f103 0208 	add.w	r2, r3, #8
 80054fa:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80054fe:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[3] = -1.0;
 8005502:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005506:	f103 0218 	add.w	r2, r3, #24
 800550a:	f04f 0300 	mov.w	r3, #0
 800550e:	4c3b      	ldr	r4, [pc, #236]	; (80055fc <Model_for_PIL+0x11bc>)
 8005510:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[5] = 0.0;
 8005514:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005518:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	f04f 0400 	mov.w	r4, #0
 8005524:	e9c2 3400 	strd	r3, r4, [r2]
      rty_F[7] = 0.0;
 8005528:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800552c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	f04f 0400 	mov.w	r4, #0
 8005538:	e9c2 3400 	strd	r3, r4, [r2]
      rty_G[0] = constraintIntercept;
 800553c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005540:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8005544:	e9c2 3400 	strd	r3, r4, [r2]
      rty_G[1] = -q2;
 8005548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800554c:	3308      	adds	r3, #8
 800554e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005552:	603a      	str	r2, [r7, #0]
 8005554:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005558:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 800555c:	607a      	str	r2, [r7, #4]
 800555e:	ed97 7b00 	vldr	d7, [r7]
 8005562:	ed83 7b00 	vstr	d7, [r3]
 8005566:	e017      	b.n	8005598 <Model_for_PIL+0x1158>
    }
  } else {
    memset(&rty_F[0], 0, sizeof(real_T) << 3U);
 8005568:	2240      	movs	r2, #64	; 0x40
 800556a:	2100      	movs	r1, #0
 800556c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8005570:	f002 fe15 	bl	800819e <memset>
    rty_G[0] = 0.0;
 8005574:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	f04f 0400 	mov.w	r4, #0
 8005580:	e9c2 3400 	strd	r3, r4, [r2]
    rty_G[1] = 0.0;
 8005584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005588:	f103 0208 	add.w	r2, r3, #8
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	f04f 0400 	mov.w	r4, #0
 8005594:	e9c2 3400 	strd	r3, r4, [r2]
  }

  rty_E[0] = 0.0;
 8005598:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	f04f 0400 	mov.w	r4, #0
 80055a4:	e9c2 3400 	strd	r3, r4, [r2]
  rty_E[1] = 0.0;
 80055a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ac:	f103 0208 	add.w	r2, r3, #8
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	f04f 0400 	mov.w	r4, #0
 80055b8:	e9c2 3400 	strd	r3, r4, [r2]
  rty_E[2] = 0.0;
 80055bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055c0:	f103 0210 	add.w	r2, r3, #16
 80055c4:	f04f 0300 	mov.w	r3, #0
 80055c8:	f04f 0400 	mov.w	r4, #0
 80055cc:	e9c2 3400 	strd	r3, r4, [r2]
  rty_E[3] = 0.0;
 80055d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055d4:	f103 0218 	add.w	r2, r3, #24
 80055d8:	f04f 0300 	mov.w	r3, #0
 80055dc:	f04f 0400 	mov.w	r4, #0
 80055e0:	e9c2 3400 	strd	r3, r4, [r2]
}
 80055e4:	bf00      	nop
 80055e6:	37cc      	adds	r7, #204	; 0xcc
 80055e8:	46bd      	mov	sp, r7
 80055ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ee:	bf00      	nop
 80055f0:	54442d18 	.word	0x54442d18
 80055f4:	3ff921fb 	.word	0x3ff921fb
 80055f8:	3ff00000 	.word	0x3ff00000
 80055fc:	bff00000 	.word	0xbff00000

08005600 <Model_for_PIL_initialize>:

/* Model initialize function */
void Model_for_PIL_initialize(const char_T **rt_errorStatus,
  RT_MODEL_Model_for_PIL *const Model_for_PIL_M)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 800560a:	2008      	movs	r0, #8
 800560c:	f001 fa4a 	bl	8006aa4 <rt_InitInfAndNaN>

  /* initialize error status */
  rtmSetErrorStatusPointer(Model_for_PIL_M, rt_errorStatus);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	601a      	str	r2, [r3, #0]
}
 8005616:	bf00      	nop
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
	...

08005620 <Model_for_PIL_caRunTests>:
  0                                    /* DenormalAsZero */
};

CA_HWImpl CA_Model_for_PIL_ActHW;
void Model_for_PIL_caRunTests(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /* verify hardware implementation */
  caVerifyPortableWordSizes(&CA_Model_for_PIL_ActHW, &CA_Model_for_PIL_ExpHW,
 8005624:	4a05      	ldr	r2, [pc, #20]	; (800563c <Model_for_PIL_caRunTests+0x1c>)
 8005626:	4906      	ldr	r1, [pc, #24]	; (8005640 <Model_for_PIL_caRunTests+0x20>)
 8005628:	4806      	ldr	r0, [pc, #24]	; (8005644 <Model_for_PIL_caRunTests+0x24>)
 800562a:	f000 fed4 	bl	80063d6 <caVerifyPortableWordSizes>
    &CA_Model_for_PIL_PWSRes);
  caVerifyHWImpl(&CA_Model_for_PIL_ActHW, &CA_Model_for_PIL_ExpHW,
 800562e:	4a06      	ldr	r2, [pc, #24]	; (8005648 <Model_for_PIL_caRunTests+0x28>)
 8005630:	4903      	ldr	r1, [pc, #12]	; (8005640 <Model_for_PIL_caRunTests+0x20>)
 8005632:	4804      	ldr	r0, [pc, #16]	; (8005644 <Model_for_PIL_caRunTests+0x24>)
 8005634:	f000 fefc 	bl	8006430 <caVerifyHWImpl>
                 &CA_Model_for_PIL_HWRes);
}
 8005638:	bf00      	nop
 800563a:	bd80      	pop	{r7, pc}
 800563c:	200003a8 	.word	0x200003a8
 8005640:	080099c0 	.word	0x080099c0
 8005644:	200003d0 	.word	0x200003d0
 8005648:	200003ac 	.word	0x200003ac

0800564c <profileTimerInit>:
#include "STM32SerialRtiostream-ProfilerTimer.h"
#include "STM32SerialRtiostream_Config.h"


void profileTimerInit(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
    /* SysTick called every time currentVal 1 to 0. Then reloaded with reload val. */
    SysTick->LOAD = 0x00FFFFFF;
 8005650:	4b08      	ldr	r3, [pc, #32]	; (8005674 <profileTimerInit+0x28>)
 8005652:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8005656:	605a      	str	r2, [r3, #4]
    SysTick->VAL  = 0x00000000;
 8005658:	4b06      	ldr	r3, [pc, #24]	; (8005674 <profileTimerInit+0x28>)
 800565a:	2200      	movs	r2, #0
 800565c:	609a      	str	r2, [r3, #8]
    SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 800565e:	4b05      	ldr	r3, [pc, #20]	; (8005674 <profileTimerInit+0x28>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a04      	ldr	r2, [pc, #16]	; (8005674 <profileTimerInit+0x28>)
 8005664:	f043 0305 	orr.w	r3, r3, #5
 8005668:	6013      	str	r3, [r2, #0]
}
 800566a:	bf00      	nop
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	e000e010 	.word	0xe000e010

08005678 <rtIOStreamOpen>:


/* Function: rtIOStreamOpen ================================================= */
/* Configuration of USART for rtIOStream =====================================*/
int rtIOStreamOpen(int argc, void * argv[])
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;

    return SERVER_STREAM_ID;
 8005682:	2301      	movs	r3, #1
}
 8005684:	4618      	mov	r0, r3
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <rtIOStreamClose>:


/* Function: rtIOStreamClose ================================================ */
int rtIOStreamClose(int streamID)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
    (void)streamID;

    return RTIOSTREAM_NO_ERROR;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
	...

080056a8 <rtIOStreamSend>:


/* Function: rtIOStreamSend ================================================ */
int rtIOStreamSend(int streamID, const void * src, size_t size, size_t * sizeSent)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	603b      	str	r3, [r7, #0]
    (void)streamID;

    TxCplt = 0;
 80056b6:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <rtIOStreamSend+0x40>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit_IT(PIL_USART_HANDLE, (uint8_t *)src, (uint16_t)size);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	461a      	mov	r2, r3
 80056c2:	68b9      	ldr	r1, [r7, #8]
 80056c4:	4809      	ldr	r0, [pc, #36]	; (80056ec <rtIOStreamSend+0x44>)
 80056c6:	f7fd fe23 	bl	8003310 <HAL_UART_Transmit_IT>

    /* Wait for end of Tx */
    while (!TxCplt);
 80056ca:	bf00      	nop
 80056cc:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <rtIOStreamSend+0x40>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0fa      	beq.n	80056cc <rtIOStreamSend+0x24>

    *sizeSent = size;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	601a      	str	r2, [r3, #0]

    return RTIOSTREAM_NO_ERROR;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	200000b5 	.word	0x200000b5
 80056ec:	200002d4 	.word	0x200002d4

080056f0 <rtIOStreamRecv>:


/* Function: rtIOStreamRecv ================================================ */
int rtIOStreamRecv(int streamID, void * dst, size_t size, size_t * sizeRecv)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	603b      	str	r3, [r7, #0]
    (void)streamID;

    /* Rx not complete */
    RxCplt = 0;
 80056fe:	4b0c      	ldr	r3, [pc, #48]	; (8005730 <rtIOStreamRecv+0x40>)
 8005700:	2200      	movs	r2, #0
 8005702:	701a      	strb	r2, [r3, #0]

    /* Start Rx interrupt. */
    HAL_UART_Receive_IT(PIL_USART_HANDLE, (uint8_t *)dst, (uint16_t)size);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	b29b      	uxth	r3, r3
 8005708:	461a      	mov	r2, r3
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	4809      	ldr	r0, [pc, #36]	; (8005734 <rtIOStreamRecv+0x44>)
 800570e:	f7fd fe5b 	bl	80033c8 <HAL_UART_Receive_IT>

    /* Wait for end of Rx */
    while (!RxCplt);
 8005712:	bf00      	nop
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <rtIOStreamRecv+0x40>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0fa      	beq.n	8005714 <rtIOStreamRecv+0x24>

    *sizeRecv = size;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	601a      	str	r2, [r3, #0]

    return RTIOSTREAM_NO_ERROR;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	200000b4 	.word	0x200000b4
 8005734:	200002d4 	.word	0x200002d4

08005738 <HAL_UART_RxCpltCallback>:
* Function Name  : HAL_UART_RxCpltCallback
* Description    : Rx Transfer completed callbacks.
* Input          : UART handle
*******************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
    (void)huart;

    /* Rx complete */
    RxCplt = 1;
 8005740:	4b04      	ldr	r3, [pc, #16]	; (8005754 <HAL_UART_RxCpltCallback+0x1c>)
 8005742:	2201      	movs	r2, #1
 8005744:	701a      	strb	r2, [r3, #0]
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	200000b4 	.word	0x200000b4

08005758 <HAL_UART_TxCpltCallback>:
* Function Name  : HAL_UART_TxCpltCallback
* Description    : Tx Transfer completed callbacks.
* Input          : UART handle
*******************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
    (void)huart;

    /* Tx complete */
    TxCplt = 1;
 8005760:	4b04      	ldr	r3, [pc, #16]	; (8005774 <HAL_UART_TxCpltCallback+0x1c>)
 8005762:	2201      	movs	r2, #1
 8005764:	701a      	strb	r2, [r3, #0]
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	200000b5 	.word	0x200000b5

08005778 <sendResult>:


static XIL_DATA_STREAM_ERROR_CODE sendResult(const CA_TestResult result, 
                                             const MemUnit_T resultType, 
                                             const MemUnit_T actual, 
                                             const MemUnit_T assumed) {
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	80b8      	strh	r0, [r7, #4]
 8005780:	4608      	mov	r0, r1
 8005782:	4611      	mov	r1, r2
 8005784:	461a      	mov	r2, r3
 8005786:	4603      	mov	r3, r0
 8005788:	70fb      	strb	r3, [r7, #3]
 800578a:	460b      	mov	r3, r1
 800578c:	70bb      	strb	r3, [r7, #2]
 800578e:	4613      	mov	r3, r2
 8005790:	707b      	strb	r3, [r7, #1]
   XIL_DATA_STREAM_ERROR_CODE errorCode;
   MemUnit_T tmp;
   /* send result type */
   errorCode = coderAssumptionsWriteData(&resultType, sizeof(MemUnit_T));   
 8005792:	1cfb      	adds	r3, r7, #3
 8005794:	2101      	movs	r1, #1
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fbb2 	bl	8005f00 <coderAssumptionsWriteData>
 800579c:	4603      	mov	r3, r0
 800579e:	73fb      	strb	r3, [r7, #15]
   if (errorCode) return errorCode;
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <sendResult+0x32>
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
 80057a8:	e036      	b.n	8005818 <sendResult+0xa0>
   
   /* send result status */
   tmp = (MemUnit_T) result.status;
 80057aa:	793b      	ldrb	r3, [r7, #4]
 80057ac:	73bb      	strb	r3, [r7, #14]
   errorCode = coderAssumptionsWriteData(&tmp, sizeof(MemUnit_T));   
 80057ae:	f107 030e 	add.w	r3, r7, #14
 80057b2:	2101      	movs	r1, #1
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fba3 	bl	8005f00 <coderAssumptionsWriteData>
 80057ba:	4603      	mov	r3, r0
 80057bc:	73fb      	strb	r3, [r7, #15]
   if (errorCode) return errorCode;
 80057be:	7bfb      	ldrb	r3, [r7, #15]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <sendResult+0x50>
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	e027      	b.n	8005818 <sendResult+0xa0>

   /* send result msg id */
   tmp = (MemUnit_T) result.msg;
 80057c8:	797b      	ldrb	r3, [r7, #5]
 80057ca:	73bb      	strb	r3, [r7, #14]
   errorCode = coderAssumptionsWriteData(&tmp, sizeof(MemUnit_T));   
 80057cc:	f107 030e 	add.w	r3, r7, #14
 80057d0:	2101      	movs	r1, #1
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 fb94 	bl	8005f00 <coderAssumptionsWriteData>
 80057d8:	4603      	mov	r3, r0
 80057da:	73fb      	strb	r3, [r7, #15]
   if (errorCode) return errorCode;
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <sendResult+0x6e>
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
 80057e4:	e018      	b.n	8005818 <sendResult+0xa0>
   
   /* send actual */
   errorCode = coderAssumptionsWriteData(&actual, sizeof(MemUnit_T));   
 80057e6:	1cbb      	adds	r3, r7, #2
 80057e8:	2101      	movs	r1, #1
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fb88 	bl	8005f00 <coderAssumptionsWriteData>
 80057f0:	4603      	mov	r3, r0
 80057f2:	73fb      	strb	r3, [r7, #15]
   if (errorCode) return errorCode;
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <sendResult+0x86>
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
 80057fc:	e00c      	b.n	8005818 <sendResult+0xa0>
   
   /* send assumed */
   errorCode = coderAssumptionsWriteData(&assumed, sizeof(MemUnit_T));
 80057fe:	1c7b      	adds	r3, r7, #1
 8005800:	2101      	movs	r1, #1
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fb7c 	bl	8005f00 <coderAssumptionsWriteData>
 8005808:	4603      	mov	r3, r0
 800580a:	73fb      	strb	r3, [r7, #15]
   if (errorCode) return errorCode;
 800580c:	7bfb      	ldrb	r3, [r7, #15]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <sendResult+0x9e>
 8005812:	7bfb      	ldrb	r3, [r7, #15]
 8005814:	e000      	b.n	8005818 <sendResult+0xa0>
   
   /* final return */
   return errorCode;
 8005816:	7bfb      	ldrb	r3, [r7, #15]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <transmitMemUnitBytes>:

static XIL_DATA_STREAM_ERROR_CODE transmitMemUnitBytes(void) {
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
   XIL_DATA_STREAM_ERROR_CODE errorCode; 
   const MemUnit_T memUnitBytes = MEM_UNIT_BYTES;
 8005826:	2301      	movs	r3, #1
 8005828:	71bb      	strb	r3, [r7, #6]

   /* send memUnitBytes */
   errorCode = coderAssumptionsWriteData(&memUnitBytes, sizeof(MemUnit_T));
 800582a:	1dbb      	adds	r3, r7, #6
 800582c:	2101      	movs	r1, #1
 800582e:	4618      	mov	r0, r3
 8005830:	f000 fb66 	bl	8005f00 <coderAssumptionsWriteData>
 8005834:	4603      	mov	r3, r0
 8005836:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <transmitMemUnitBytes+0x22>
 800583e:	79fb      	ldrb	r3, [r7, #7]
 8005840:	e009      	b.n	8005856 <transmitMemUnitBytes+0x36>
    
   errorCode = coderAssumptionsSendWriteBuffer();  
 8005842:	f000 fbb3 	bl	8005fac <coderAssumptionsSendWriteBuffer>
 8005846:	4603      	mov	r3, r0
 8005848:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <transmitMemUnitBytes+0x34>
 8005850:	79fb      	ldrb	r3, [r7, #7]
 8005852:	e000      	b.n	8005856 <transmitMemUnitBytes+0x36>
   
   return errorCode;
 8005854:	79fb      	ldrb	r3, [r7, #7]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <sendPWS>:

/* portable word sizes specified checks */
static XIL_DATA_STREAM_ERROR_CODE sendPWS(void) {
 8005860:	b590      	push	{r4, r7, lr}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
    XIL_DATA_STREAM_ERROR_CODE errorCode; 
    MemUnit_T commandId;  
   
    /* send CA_PWS */
    commandId = CA_PWS;
 8005866:	2305      	movs	r3, #5
 8005868:	71bb      	strb	r3, [r7, #6]
    errorCode = coderAssumptionsWriteData(&commandId, sizeof(MemUnit_T));
 800586a:	1dbb      	adds	r3, r7, #6
 800586c:	2101      	movs	r1, #1
 800586e:	4618      	mov	r0, r3
 8005870:	f000 fb46 	bl	8005f00 <coderAssumptionsWriteData>
 8005874:	4603      	mov	r3, r0
 8005876:	71fb      	strb	r3, [r7, #7]
    if (errorCode) return errorCode;
 8005878:	79fb      	ldrb	r3, [r7, #7]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <sendPWS+0x22>
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	e045      	b.n	800590e <sendPWS+0xae>

    /* PWS enabled in build */
    commandId = CA_PWS_ENABLED;
 8005882:	2300      	movs	r3, #0
 8005884:	71bb      	strb	r3, [r7, #6]
    errorCode = coderAssumptionsWriteData(&commandId, sizeof(MemUnit_T));
 8005886:	1dbb      	adds	r3, r7, #6
 8005888:	2101      	movs	r1, #1
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fb38 	bl	8005f00 <coderAssumptionsWriteData>
 8005890:	4603      	mov	r3, r0
 8005892:	71fb      	strb	r3, [r7, #7]
    if (errorCode) return errorCode;
 8005894:	79fb      	ldrb	r3, [r7, #7]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <sendPWS+0x3e>
 800589a:	79fb      	ldrb	r3, [r7, #7]
 800589c:	e037      	b.n	800590e <sendPWS+0xae>

    pwsEnabled = (MemUnit_T) CA_Actual_HWImpl.portableWordSizes;
 800589e:	4b1e      	ldr	r3, [pc, #120]	; (8005918 <sendPWS+0xb8>)
 80058a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	4b1d      	ldr	r3, [pc, #116]	; (800591c <sendPWS+0xbc>)
 80058a6:	701a      	strb	r2, [r3, #0]
    errorCode = coderAssumptionsWriteData(&pwsEnabled, sizeof(MemUnit_T));
 80058a8:	2101      	movs	r1, #1
 80058aa:	481c      	ldr	r0, [pc, #112]	; (800591c <sendPWS+0xbc>)
 80058ac:	f000 fb28 	bl	8005f00 <coderAssumptionsWriteData>
 80058b0:	4603      	mov	r3, r0
 80058b2:	71fb      	strb	r3, [r7, #7]
    if (errorCode) return errorCode;
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <sendPWS+0x5e>
 80058ba:	79fb      	ldrb	r3, [r7, #7]
 80058bc:	e027      	b.n	800590e <sendPWS+0xae>

    /* extended PWS checks */
    if (pwsEnabled) {
 80058be:	4b17      	ldr	r3, [pc, #92]	; (800591c <sendPWS+0xbc>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d019      	beq.n	80058fa <sendPWS+0x9a>
       /* config setting mismatch */
       errorCode = sendResult(CA_PortableWordSizes_Results.configSetting, 
                                    (MemUnit_T) CA_PWS_CONFIG_SETTING,  
                                    (MemUnit_T) CA_Actual_HWImpl.portableWordSizes, 
 80058c6:	4b14      	ldr	r3, [pc, #80]	; (8005918 <sendPWS+0xb8>)
 80058c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
       errorCode = sendResult(CA_PortableWordSizes_Results.configSetting, 
 80058ca:	b2d9      	uxtb	r1, r3
                                    (MemUnit_T) CA_Expected_HWImpl.portableWordSizes);
 80058cc:	4b14      	ldr	r3, [pc, #80]	; (8005920 <sendPWS+0xc0>)
 80058ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
       errorCode = sendResult(CA_PortableWordSizes_Results.configSetting, 
 80058d0:	b2dc      	uxtb	r4, r3
 80058d2:	4b14      	ldr	r3, [pc, #80]	; (8005924 <sendPWS+0xc4>)
 80058d4:	781a      	ldrb	r2, [r3, #0]
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	021b      	lsls	r3, r3, #8
 80058da:	4313      	orrs	r3, r2
 80058dc:	2000      	movs	r0, #0
 80058de:	f363 000f 	bfi	r0, r3, #0, #16
 80058e2:	4623      	mov	r3, r4
 80058e4:	460a      	mov	r2, r1
 80058e6:	2101      	movs	r1, #1
 80058e8:	f7ff ff46 	bl	8005778 <sendResult>
 80058ec:	4603      	mov	r3, r0
 80058ee:	71fb      	strb	r3, [r7, #7]
       if (errorCode) return errorCode; 
 80058f0:	79fb      	ldrb	r3, [r7, #7]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <sendPWS+0x9a>
 80058f6:	79fb      	ldrb	r3, [r7, #7]
 80058f8:	e009      	b.n	800590e <sendPWS+0xae>
    }


    errorCode = coderAssumptionsSendWriteBuffer();  
 80058fa:	f000 fb57 	bl	8005fac <coderAssumptionsSendWriteBuffer>
 80058fe:	4603      	mov	r3, r0
 8005900:	71fb      	strb	r3, [r7, #7]
    if (errorCode) return errorCode;
 8005902:	79fb      	ldrb	r3, [r7, #7]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <sendPWS+0xac>
 8005908:	79fb      	ldrb	r3, [r7, #7]
 800590a:	e000      	b.n	800590e <sendPWS+0xae>

    return errorCode;
 800590c:	79fb      	ldrb	r3, [r7, #7]
}
 800590e:	4618      	mov	r0, r3
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	bd90      	pop	{r4, r7, pc}
 8005916:	bf00      	nop
 8005918:	200003d0 	.word	0x200003d0
 800591c:	200000b6 	.word	0x200000b6
 8005920:	080099c0 	.word	0x080099c0
 8005924:	200003a8 	.word	0x200003a8

08005928 <sendHWImpl1>:

/* hardware implementation checks message 1 */
static XIL_DATA_STREAM_ERROR_CODE sendHWImpl1(void) {
 8005928:	b590      	push	{r4, r7, lr}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
   XIL_DATA_STREAM_ERROR_CODE errorCode = XIL_DATA_STREAM_SUCCESS;    
 800592e:	2300      	movs	r3, #0
 8005930:	71fb      	strb	r3, [r7, #7]
   MemUnit_T commandId;

   /* send CA_HW_IMPL_SIZES_1 */    
   commandId = CA_HW_IMPL_SIZES_1;
 8005932:	2300      	movs	r3, #0
 8005934:	71bb      	strb	r3, [r7, #6]
   errorCode = coderAssumptionsWriteData(&commandId, sizeof(MemUnit_T));
 8005936:	1dbb      	adds	r3, r7, #6
 8005938:	2101      	movs	r1, #1
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fae0 	bl	8005f00 <coderAssumptionsWriteData>
 8005940:	4603      	mov	r3, r0
 8005942:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005944:	79fb      	ldrb	r3, [r7, #7]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <sendHWImpl1+0x26>
 800594a:	79fb      	ldrb	r3, [r7, #7]
 800594c:	e071      	b.n	8005a32 <sendHWImpl1+0x10a>

   /* bit per char */
   errorCode = sendResult(CA_HWImpl_Results.bitsPerChar, 
         (MemUnit_T) CA_HW_IMPL_BIT_CHAR,  
         (MemUnit_T) CA_Actual_HWImpl.bitsPerChar, 
 800594e:	4b3b      	ldr	r3, [pc, #236]	; (8005a3c <sendHWImpl1+0x114>)
 8005950:	681b      	ldr	r3, [r3, #0]
   errorCode = sendResult(CA_HWImpl_Results.bitsPerChar, 
 8005952:	b2d9      	uxtb	r1, r3
         (MemUnit_T) CA_Expected_HWImpl.bitsPerChar);
 8005954:	4b3a      	ldr	r3, [pc, #232]	; (8005a40 <sendHWImpl1+0x118>)
 8005956:	681b      	ldr	r3, [r3, #0]
   errorCode = sendResult(CA_HWImpl_Results.bitsPerChar, 
 8005958:	b2dc      	uxtb	r4, r3
 800595a:	4b3a      	ldr	r3, [pc, #232]	; (8005a44 <sendHWImpl1+0x11c>)
 800595c:	781a      	ldrb	r2, [r3, #0]
 800595e:	785b      	ldrb	r3, [r3, #1]
 8005960:	021b      	lsls	r3, r3, #8
 8005962:	4313      	orrs	r3, r2
 8005964:	2000      	movs	r0, #0
 8005966:	f363 000f 	bfi	r0, r3, #0, #16
 800596a:	4623      	mov	r3, r4
 800596c:	460a      	mov	r2, r1
 800596e:	2100      	movs	r1, #0
 8005970:	f7ff ff02 	bl	8005778 <sendResult>
 8005974:	4603      	mov	r3, r0
 8005976:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <sendHWImpl1+0x5a>
 800597e:	79fb      	ldrb	r3, [r7, #7]
 8005980:	e057      	b.n	8005a32 <sendHWImpl1+0x10a>

   /* bit per short */
   errorCode = sendResult(CA_HWImpl_Results.bitsPerShort, 
         (MemUnit_T) CA_HW_IMPL_BIT_SHORT,  
         (MemUnit_T) CA_Actual_HWImpl.bitsPerShort, 
 8005982:	4b2e      	ldr	r3, [pc, #184]	; (8005a3c <sendHWImpl1+0x114>)
 8005984:	685b      	ldr	r3, [r3, #4]
   errorCode = sendResult(CA_HWImpl_Results.bitsPerShort, 
 8005986:	b2d9      	uxtb	r1, r3
         (MemUnit_T) CA_Expected_HWImpl.bitsPerShort);
 8005988:	4b2d      	ldr	r3, [pc, #180]	; (8005a40 <sendHWImpl1+0x118>)
 800598a:	685b      	ldr	r3, [r3, #4]
   errorCode = sendResult(CA_HWImpl_Results.bitsPerShort, 
 800598c:	b2dc      	uxtb	r4, r3
 800598e:	4b2d      	ldr	r3, [pc, #180]	; (8005a44 <sendHWImpl1+0x11c>)
 8005990:	789a      	ldrb	r2, [r3, #2]
 8005992:	78db      	ldrb	r3, [r3, #3]
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	4313      	orrs	r3, r2
 8005998:	2000      	movs	r0, #0
 800599a:	f363 000f 	bfi	r0, r3, #0, #16
 800599e:	4623      	mov	r3, r4
 80059a0:	460a      	mov	r2, r1
 80059a2:	2101      	movs	r1, #1
 80059a4:	f7ff fee8 	bl	8005778 <sendResult>
 80059a8:	4603      	mov	r3, r0
 80059aa:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 80059ac:	79fb      	ldrb	r3, [r7, #7]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <sendHWImpl1+0x8e>
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	e03d      	b.n	8005a32 <sendHWImpl1+0x10a>

   /* bit per int */
   errorCode = sendResult(CA_HWImpl_Results.bitsPerInt, 
         (MemUnit_T) CA_HW_IMPL_BIT_INT,  
         (MemUnit_T) CA_Actual_HWImpl.bitsPerInt, 
 80059b6:	4b21      	ldr	r3, [pc, #132]	; (8005a3c <sendHWImpl1+0x114>)
 80059b8:	689b      	ldr	r3, [r3, #8]
   errorCode = sendResult(CA_HWImpl_Results.bitsPerInt, 
 80059ba:	b2d9      	uxtb	r1, r3
         (MemUnit_T) CA_Expected_HWImpl.bitsPerInt);
 80059bc:	4b20      	ldr	r3, [pc, #128]	; (8005a40 <sendHWImpl1+0x118>)
 80059be:	689b      	ldr	r3, [r3, #8]
   errorCode = sendResult(CA_HWImpl_Results.bitsPerInt, 
 80059c0:	b2dc      	uxtb	r4, r3
 80059c2:	4b20      	ldr	r3, [pc, #128]	; (8005a44 <sendHWImpl1+0x11c>)
 80059c4:	791a      	ldrb	r2, [r3, #4]
 80059c6:	795b      	ldrb	r3, [r3, #5]
 80059c8:	021b      	lsls	r3, r3, #8
 80059ca:	4313      	orrs	r3, r2
 80059cc:	2000      	movs	r0, #0
 80059ce:	f363 000f 	bfi	r0, r3, #0, #16
 80059d2:	4623      	mov	r3, r4
 80059d4:	460a      	mov	r2, r1
 80059d6:	2102      	movs	r1, #2
 80059d8:	f7ff fece 	bl	8005778 <sendResult>
 80059dc:	4603      	mov	r3, r0
 80059de:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <sendHWImpl1+0xc2>
 80059e6:	79fb      	ldrb	r3, [r7, #7]
 80059e8:	e023      	b.n	8005a32 <sendHWImpl1+0x10a>

   /* bit per long */
   errorCode = sendResult(CA_HWImpl_Results.bitsPerLong, 
         (MemUnit_T) CA_HW_IMPL_BIT_LONG,  
         (MemUnit_T) CA_Actual_HWImpl.bitsPerLong, 
 80059ea:	4b14      	ldr	r3, [pc, #80]	; (8005a3c <sendHWImpl1+0x114>)
 80059ec:	68db      	ldr	r3, [r3, #12]
   errorCode = sendResult(CA_HWImpl_Results.bitsPerLong, 
 80059ee:	b2d9      	uxtb	r1, r3
         (MemUnit_T) CA_Expected_HWImpl.bitsPerLong);
 80059f0:	4b13      	ldr	r3, [pc, #76]	; (8005a40 <sendHWImpl1+0x118>)
 80059f2:	68db      	ldr	r3, [r3, #12]
   errorCode = sendResult(CA_HWImpl_Results.bitsPerLong, 
 80059f4:	b2dc      	uxtb	r4, r3
 80059f6:	4b13      	ldr	r3, [pc, #76]	; (8005a44 <sendHWImpl1+0x11c>)
 80059f8:	799a      	ldrb	r2, [r3, #6]
 80059fa:	79db      	ldrb	r3, [r3, #7]
 80059fc:	021b      	lsls	r3, r3, #8
 80059fe:	4313      	orrs	r3, r2
 8005a00:	2000      	movs	r0, #0
 8005a02:	f363 000f 	bfi	r0, r3, #0, #16
 8005a06:	4623      	mov	r3, r4
 8005a08:	460a      	mov	r2, r1
 8005a0a:	2103      	movs	r1, #3
 8005a0c:	f7ff feb4 	bl	8005778 <sendResult>
 8005a10:	4603      	mov	r3, r0
 8005a12:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <sendHWImpl1+0xf6>
 8005a1a:	79fb      	ldrb	r3, [r7, #7]
 8005a1c:	e009      	b.n	8005a32 <sendHWImpl1+0x10a>

   /* transmit message */
   errorCode = coderAssumptionsSendWriteBuffer();
 8005a1e:	f000 fac5 	bl	8005fac <coderAssumptionsSendWriteBuffer>
 8005a22:	4603      	mov	r3, r0
 8005a24:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <sendHWImpl1+0x108>
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	e000      	b.n	8005a32 <sendHWImpl1+0x10a>

   return errorCode;
 8005a30:	79fb      	ldrb	r3, [r7, #7]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd90      	pop	{r4, r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	200003d0 	.word	0x200003d0
 8005a40:	080099c0 	.word	0x080099c0
 8005a44:	200003ac 	.word	0x200003ac

08005a48 <sendHWImpl2>:

/* hardware implementation checks message 2 */
static XIL_DATA_STREAM_ERROR_CODE sendHWImpl2(void) {
 8005a48:	b590      	push	{r4, r7, lr}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
   XIL_DATA_STREAM_ERROR_CODE errorCode = XIL_DATA_STREAM_SUCCESS;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	71fb      	strb	r3, [r7, #7]
   MemUnit_T commandId;
   
   /* send CA_HW_IMPL_SIZES_2 */    
   commandId = CA_HW_IMPL_SIZES_2;
 8005a52:	2301      	movs	r3, #1
 8005a54:	71bb      	strb	r3, [r7, #6]
   errorCode = coderAssumptionsWriteData(&commandId, sizeof(MemUnit_T));
 8005a56:	1dbb      	adds	r3, r7, #6
 8005a58:	2101      	movs	r1, #1
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fa50 	bl	8005f00 <coderAssumptionsWriteData>
 8005a60:	4603      	mov	r3, r0
 8005a62:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005a64:	79fb      	ldrb	r3, [r7, #7]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <sendHWImpl2+0x26>
 8005a6a:	79fb      	ldrb	r3, [r7, #7]
 8005a6c:	e071      	b.n	8005b52 <sendHWImpl2+0x10a>

   /* support long long */
   errorCode = sendResult(CA_HWImpl_Results.supportLongLong, 
         (MemUnit_T) CA_HW_IMPL_SUPPORT_LONGLONG,  
         (MemUnit_T) CA_Actual_HWImpl.supportLongLong, 
 8005a6e:	4b3b      	ldr	r3, [pc, #236]	; (8005b5c <sendHWImpl2+0x114>)
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   errorCode = sendResult(CA_HWImpl_Results.supportLongLong, 
 8005a72:	b2d9      	uxtb	r1, r3
         (MemUnit_T) CA_Expected_HWImpl.supportLongLong);
 8005a74:	4b3a      	ldr	r3, [pc, #232]	; (8005b60 <sendHWImpl2+0x118>)
 8005a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   errorCode = sendResult(CA_HWImpl_Results.supportLongLong, 
 8005a78:	b2dc      	uxtb	r4, r3
 8005a7a:	4b3a      	ldr	r3, [pc, #232]	; (8005b64 <sendHWImpl2+0x11c>)
 8005a7c:	7e9a      	ldrb	r2, [r3, #26]
 8005a7e:	7edb      	ldrb	r3, [r3, #27]
 8005a80:	021b      	lsls	r3, r3, #8
 8005a82:	4313      	orrs	r3, r2
 8005a84:	2000      	movs	r0, #0
 8005a86:	f363 000f 	bfi	r0, r3, #0, #16
 8005a8a:	4623      	mov	r3, r4
 8005a8c:	460a      	mov	r2, r1
 8005a8e:	210a      	movs	r1, #10
 8005a90:	f7ff fe72 	bl	8005778 <sendResult>
 8005a94:	4603      	mov	r3, r0
 8005a96:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <sendHWImpl2+0x5a>
 8005a9e:	79fb      	ldrb	r3, [r7, #7]
 8005aa0:	e057      	b.n	8005b52 <sendHWImpl2+0x10a>

   /* bit per long long */
   errorCode = sendResult(CA_HWImpl_Results.bitsPerLongLong, 
         (MemUnit_T) CA_HW_IMPL_BIT_LONGLONG,  
         (MemUnit_T) CA_Actual_HWImpl.bitsPerLongLong, 
 8005aa2:	4b2e      	ldr	r3, [pc, #184]	; (8005b5c <sendHWImpl2+0x114>)
 8005aa4:	691b      	ldr	r3, [r3, #16]
   errorCode = sendResult(CA_HWImpl_Results.bitsPerLongLong, 
 8005aa6:	b2d9      	uxtb	r1, r3
         (MemUnit_T) CA_Expected_HWImpl.bitsPerLongLong);
 8005aa8:	4b2d      	ldr	r3, [pc, #180]	; (8005b60 <sendHWImpl2+0x118>)
 8005aaa:	691b      	ldr	r3, [r3, #16]
   errorCode = sendResult(CA_HWImpl_Results.bitsPerLongLong, 
 8005aac:	b2dc      	uxtb	r4, r3
 8005aae:	4b2d      	ldr	r3, [pc, #180]	; (8005b64 <sendHWImpl2+0x11c>)
 8005ab0:	7a1a      	ldrb	r2, [r3, #8]
 8005ab2:	7a5b      	ldrb	r3, [r3, #9]
 8005ab4:	021b      	lsls	r3, r3, #8
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	2000      	movs	r0, #0
 8005aba:	f363 000f 	bfi	r0, r3, #0, #16
 8005abe:	4623      	mov	r3, r4
 8005ac0:	460a      	mov	r2, r1
 8005ac2:	2104      	movs	r1, #4
 8005ac4:	f7ff fe58 	bl	8005778 <sendResult>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005acc:	79fb      	ldrb	r3, [r7, #7]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <sendHWImpl2+0x8e>
 8005ad2:	79fb      	ldrb	r3, [r7, #7]
 8005ad4:	e03d      	b.n	8005b52 <sendHWImpl2+0x10a>

   /* bit per float */
   errorCode = sendResult(CA_HWImpl_Results.bitsPerFloat, 
         (MemUnit_T) CA_HW_IMPL_BIT_FLOAT,  
         (MemUnit_T) CA_Actual_HWImpl.bitsPerFloat, 
 8005ad6:	4b21      	ldr	r3, [pc, #132]	; (8005b5c <sendHWImpl2+0x114>)
 8005ad8:	695b      	ldr	r3, [r3, #20]
   errorCode = sendResult(CA_HWImpl_Results.bitsPerFloat, 
 8005ada:	b2d9      	uxtb	r1, r3
         (MemUnit_T) CA_Expected_HWImpl.bitsPerFloat);
 8005adc:	4b20      	ldr	r3, [pc, #128]	; (8005b60 <sendHWImpl2+0x118>)
 8005ade:	695b      	ldr	r3, [r3, #20]
   errorCode = sendResult(CA_HWImpl_Results.bitsPerFloat, 
 8005ae0:	b2dc      	uxtb	r4, r3
 8005ae2:	4b20      	ldr	r3, [pc, #128]	; (8005b64 <sendHWImpl2+0x11c>)
 8005ae4:	7a9a      	ldrb	r2, [r3, #10]
 8005ae6:	7adb      	ldrb	r3, [r3, #11]
 8005ae8:	021b      	lsls	r3, r3, #8
 8005aea:	4313      	orrs	r3, r2
 8005aec:	2000      	movs	r0, #0
 8005aee:	f363 000f 	bfi	r0, r3, #0, #16
 8005af2:	4623      	mov	r3, r4
 8005af4:	460a      	mov	r2, r1
 8005af6:	2105      	movs	r1, #5
 8005af8:	f7ff fe3e 	bl	8005778 <sendResult>
 8005afc:	4603      	mov	r3, r0
 8005afe:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <sendHWImpl2+0xc2>
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	e023      	b.n	8005b52 <sendHWImpl2+0x10a>

   /* bit per double */
   errorCode = sendResult(CA_HWImpl_Results.bitsPerDouble, 
         (MemUnit_T) CA_HW_IMPL_BIT_DOUBLE,  
         (MemUnit_T) CA_Actual_HWImpl.bitsPerDouble, 
 8005b0a:	4b14      	ldr	r3, [pc, #80]	; (8005b5c <sendHWImpl2+0x114>)
 8005b0c:	699b      	ldr	r3, [r3, #24]
   errorCode = sendResult(CA_HWImpl_Results.bitsPerDouble, 
 8005b0e:	b2d9      	uxtb	r1, r3
         (MemUnit_T) CA_Expected_HWImpl.bitsPerDouble);
 8005b10:	4b13      	ldr	r3, [pc, #76]	; (8005b60 <sendHWImpl2+0x118>)
 8005b12:	699b      	ldr	r3, [r3, #24]
   errorCode = sendResult(CA_HWImpl_Results.bitsPerDouble, 
 8005b14:	b2dc      	uxtb	r4, r3
 8005b16:	4b13      	ldr	r3, [pc, #76]	; (8005b64 <sendHWImpl2+0x11c>)
 8005b18:	7b1a      	ldrb	r2, [r3, #12]
 8005b1a:	7b5b      	ldrb	r3, [r3, #13]
 8005b1c:	021b      	lsls	r3, r3, #8
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	2000      	movs	r0, #0
 8005b22:	f363 000f 	bfi	r0, r3, #0, #16
 8005b26:	4623      	mov	r3, r4
 8005b28:	460a      	mov	r2, r1
 8005b2a:	2106      	movs	r1, #6
 8005b2c:	f7ff fe24 	bl	8005778 <sendResult>
 8005b30:	4603      	mov	r3, r0
 8005b32:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005b34:	79fb      	ldrb	r3, [r7, #7]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <sendHWImpl2+0xf6>
 8005b3a:	79fb      	ldrb	r3, [r7, #7]
 8005b3c:	e009      	b.n	8005b52 <sendHWImpl2+0x10a>

   /* transmit message */
   errorCode = coderAssumptionsSendWriteBuffer();
 8005b3e:	f000 fa35 	bl	8005fac <coderAssumptionsSendWriteBuffer>
 8005b42:	4603      	mov	r3, r0
 8005b44:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005b46:	79fb      	ldrb	r3, [r7, #7]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <sendHWImpl2+0x108>
 8005b4c:	79fb      	ldrb	r3, [r7, #7]
 8005b4e:	e000      	b.n	8005b52 <sendHWImpl2+0x10a>

   return errorCode;
 8005b50:	79fb      	ldrb	r3, [r7, #7]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd90      	pop	{r4, r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	200003d0 	.word	0x200003d0
 8005b60:	080099c0 	.word	0x080099c0
 8005b64:	200003ac 	.word	0x200003ac

08005b68 <sendHWImpl3>:

/* hardware implementation checks message 3 */
static XIL_DATA_STREAM_ERROR_CODE sendHWImpl3(void) {
 8005b68:	b590      	push	{r4, r7, lr}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
   XIL_DATA_STREAM_ERROR_CODE errorCode = XIL_DATA_STREAM_SUCCESS;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	71fb      	strb	r3, [r7, #7]
   MemUnit_T commandId;

   /* send CA_HW_IMPL_SIZES_3 */    
   commandId = CA_HW_IMPL_SIZES_3;
 8005b72:	2302      	movs	r3, #2
 8005b74:	71bb      	strb	r3, [r7, #6]
   errorCode = coderAssumptionsWriteData(&commandId, sizeof(MemUnit_T));
 8005b76:	1dbb      	adds	r3, r7, #6
 8005b78:	2101      	movs	r1, #1
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 f9c0 	bl	8005f00 <coderAssumptionsWriteData>
 8005b80:	4603      	mov	r3, r0
 8005b82:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005b84:	79fb      	ldrb	r3, [r7, #7]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <sendHWImpl3+0x26>
 8005b8a:	79fb      	ldrb	r3, [r7, #7]
 8005b8c:	e057      	b.n	8005c3e <sendHWImpl3+0xd6>

   /* bit per pointer */
   errorCode = sendResult(CA_HWImpl_Results.bitsPerPointer, 
         (MemUnit_T) CA_HW_IMPL_BIT_POINTER,  
         (MemUnit_T) CA_Actual_HWImpl.bitsPerPointer, 
 8005b8e:	4b2e      	ldr	r3, [pc, #184]	; (8005c48 <sendHWImpl3+0xe0>)
 8005b90:	69db      	ldr	r3, [r3, #28]
   errorCode = sendResult(CA_HWImpl_Results.bitsPerPointer, 
 8005b92:	b2d9      	uxtb	r1, r3
         (MemUnit_T) CA_Expected_HWImpl.bitsPerPointer);
 8005b94:	4b2d      	ldr	r3, [pc, #180]	; (8005c4c <sendHWImpl3+0xe4>)
 8005b96:	69db      	ldr	r3, [r3, #28]
   errorCode = sendResult(CA_HWImpl_Results.bitsPerPointer, 
 8005b98:	b2dc      	uxtb	r4, r3
 8005b9a:	4b2d      	ldr	r3, [pc, #180]	; (8005c50 <sendHWImpl3+0xe8>)
 8005b9c:	7b9a      	ldrb	r2, [r3, #14]
 8005b9e:	7bdb      	ldrb	r3, [r3, #15]
 8005ba0:	021b      	lsls	r3, r3, #8
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	f363 000f 	bfi	r0, r3, #0, #16
 8005baa:	4623      	mov	r3, r4
 8005bac:	460a      	mov	r2, r1
 8005bae:	2107      	movs	r1, #7
 8005bb0:	f7ff fde2 	bl	8005778 <sendResult>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005bb8:	79fb      	ldrb	r3, [r7, #7]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <sendHWImpl3+0x5a>
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	e03d      	b.n	8005c3e <sendHWImpl3+0xd6>

   /* bit per size_t */
   errorCode = sendResult(CA_HWImpl_Results.bitsPerSizeT, 
         (MemUnit_T) CA_HW_IMPL_BIT_SIZE_T,  
         (MemUnit_T) CA_Actual_HWImpl.bitsPerSizeT, 
 8005bc2:	4b21      	ldr	r3, [pc, #132]	; (8005c48 <sendHWImpl3+0xe0>)
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
   errorCode = sendResult(CA_HWImpl_Results.bitsPerSizeT, 
 8005bc6:	b2d9      	uxtb	r1, r3
         (MemUnit_T) CA_Expected_HWImpl.bitsPerSizeT);
 8005bc8:	4b20      	ldr	r3, [pc, #128]	; (8005c4c <sendHWImpl3+0xe4>)
 8005bca:	6a1b      	ldr	r3, [r3, #32]
   errorCode = sendResult(CA_HWImpl_Results.bitsPerSizeT, 
 8005bcc:	b2dc      	uxtb	r4, r3
 8005bce:	4b20      	ldr	r3, [pc, #128]	; (8005c50 <sendHWImpl3+0xe8>)
 8005bd0:	7c1a      	ldrb	r2, [r3, #16]
 8005bd2:	7c5b      	ldrb	r3, [r3, #17]
 8005bd4:	021b      	lsls	r3, r3, #8
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	2000      	movs	r0, #0
 8005bda:	f363 000f 	bfi	r0, r3, #0, #16
 8005bde:	4623      	mov	r3, r4
 8005be0:	460a      	mov	r2, r1
 8005be2:	2108      	movs	r1, #8
 8005be4:	f7ff fdc8 	bl	8005778 <sendResult>
 8005be8:	4603      	mov	r3, r0
 8005bea:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005bec:	79fb      	ldrb	r3, [r7, #7]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <sendHWImpl3+0x8e>
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	e023      	b.n	8005c3e <sendHWImpl3+0xd6>

   /* bit per ptrdiff_t */
   errorCode = sendResult(CA_HWImpl_Results.bitsPerPtrDiffT, 
         (MemUnit_T) CA_HW_IMPL_BIT_PTRDIFF_T,  
         (MemUnit_T) CA_Actual_HWImpl.bitsPerPtrDiffT, 
 8005bf6:	4b14      	ldr	r3, [pc, #80]	; (8005c48 <sendHWImpl3+0xe0>)
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   errorCode = sendResult(CA_HWImpl_Results.bitsPerPtrDiffT, 
 8005bfa:	b2d9      	uxtb	r1, r3
         (MemUnit_T) CA_Expected_HWImpl.bitsPerPtrDiffT);
 8005bfc:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <sendHWImpl3+0xe4>)
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   errorCode = sendResult(CA_HWImpl_Results.bitsPerPtrDiffT, 
 8005c00:	b2dc      	uxtb	r4, r3
 8005c02:	4b13      	ldr	r3, [pc, #76]	; (8005c50 <sendHWImpl3+0xe8>)
 8005c04:	7c9a      	ldrb	r2, [r3, #18]
 8005c06:	7cdb      	ldrb	r3, [r3, #19]
 8005c08:	021b      	lsls	r3, r3, #8
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	f363 000f 	bfi	r0, r3, #0, #16
 8005c12:	4623      	mov	r3, r4
 8005c14:	460a      	mov	r2, r1
 8005c16:	2109      	movs	r1, #9
 8005c18:	f7ff fdae 	bl	8005778 <sendResult>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005c20:	79fb      	ldrb	r3, [r7, #7]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <sendHWImpl3+0xc2>
 8005c26:	79fb      	ldrb	r3, [r7, #7]
 8005c28:	e009      	b.n	8005c3e <sendHWImpl3+0xd6>

   /* transmit message */
   errorCode = coderAssumptionsSendWriteBuffer();
 8005c2a:	f000 f9bf 	bl	8005fac <coderAssumptionsSendWriteBuffer>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005c32:	79fb      	ldrb	r3, [r7, #7]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <sendHWImpl3+0xd4>
 8005c38:	79fb      	ldrb	r3, [r7, #7]
 8005c3a:	e000      	b.n	8005c3e <sendHWImpl3+0xd6>

   return errorCode;
 8005c3c:	79fb      	ldrb	r3, [r7, #7]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd90      	pop	{r4, r7, pc}
 8005c46:	bf00      	nop
 8005c48:	200003d0 	.word	0x200003d0
 8005c4c:	080099c0 	.word	0x080099c0
 8005c50:	200003ac 	.word	0x200003ac

08005c54 <sendHWImpl4>:


/* hardware implementation checks message 4 */
static XIL_DATA_STREAM_ERROR_CODE sendHWImpl4(void) {
 8005c54:	b590      	push	{r4, r7, lr}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
   XIL_DATA_STREAM_ERROR_CODE errorCode = XIL_DATA_STREAM_SUCCESS;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	71fb      	strb	r3, [r7, #7]
   MemUnit_T commandId;

   /* send CA_HW_IMPL_SIZES_4 */
   commandId = CA_HW_IMPL_SIZES_4;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	71bb      	strb	r3, [r7, #6]
   errorCode = coderAssumptionsWriteData(&commandId, sizeof(MemUnit_T));
 8005c62:	1dbb      	adds	r3, r7, #6
 8005c64:	2101      	movs	r1, #1
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 f94a 	bl	8005f00 <coderAssumptionsWriteData>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005c70:	79fb      	ldrb	r3, [r7, #7]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <sendHWImpl4+0x26>
 8005c76:	79fb      	ldrb	r3, [r7, #7]
 8005c78:	e057      	b.n	8005d2a <sendHWImpl4+0xd6>

   /* byte order */
   errorCode = sendResult(CA_HWImpl_Results.byteOrder, 
         (MemUnit_T) CA_HW_IMPL_BYTE_ORDER,  
         (MemUnit_T) CA_Actual_HWImpl.byteOrder, 
 8005c7a:	4b2e      	ldr	r3, [pc, #184]	; (8005d34 <sendHWImpl4+0xe0>)
 8005c7c:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
         (MemUnit_T) CA_Expected_HWImpl.byteOrder);
 8005c80:	4b2d      	ldr	r3, [pc, #180]	; (8005d38 <sendHWImpl4+0xe4>)
 8005c82:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
   errorCode = sendResult(CA_HWImpl_Results.byteOrder, 
 8005c86:	4b2d      	ldr	r3, [pc, #180]	; (8005d3c <sendHWImpl4+0xe8>)
 8005c88:	7d1a      	ldrb	r2, [r3, #20]
 8005c8a:	7d5b      	ldrb	r3, [r3, #21]
 8005c8c:	021b      	lsls	r3, r3, #8
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	2000      	movs	r0, #0
 8005c92:	f363 000f 	bfi	r0, r3, #0, #16
 8005c96:	4623      	mov	r3, r4
 8005c98:	460a      	mov	r2, r1
 8005c9a:	210d      	movs	r1, #13
 8005c9c:	f7ff fd6c 	bl	8005778 <sendResult>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005ca4:	79fb      	ldrb	r3, [r7, #7]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <sendHWImpl4+0x5a>
 8005caa:	79fb      	ldrb	r3, [r7, #7]
 8005cac:	e03d      	b.n	8005d2a <sendHWImpl4+0xd6>

   /* integer division rounding */
   errorCode = sendResult(CA_HWImpl_Results.intDivRoundTo, 
         (MemUnit_T) CA_HW_IMPL_INT_DIV_ROUND,  
         (MemUnit_T) CA_Actual_HWImpl.intDivRoundTo, 
 8005cae:	4b21      	ldr	r3, [pc, #132]	; (8005d34 <sendHWImpl4+0xe0>)
 8005cb0:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
         (MemUnit_T) CA_Expected_HWImpl.intDivRoundTo);
 8005cb4:	4b20      	ldr	r3, [pc, #128]	; (8005d38 <sendHWImpl4+0xe4>)
 8005cb6:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
   errorCode = sendResult(CA_HWImpl_Results.intDivRoundTo, 
 8005cba:	4b20      	ldr	r3, [pc, #128]	; (8005d3c <sendHWImpl4+0xe8>)
 8005cbc:	7d9a      	ldrb	r2, [r3, #22]
 8005cbe:	7ddb      	ldrb	r3, [r3, #23]
 8005cc0:	021b      	lsls	r3, r3, #8
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	f363 000f 	bfi	r0, r3, #0, #16
 8005cca:	4623      	mov	r3, r4
 8005ccc:	460a      	mov	r2, r1
 8005cce:	210c      	movs	r1, #12
 8005cd0:	f7ff fd52 	bl	8005778 <sendResult>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005cd8:	79fb      	ldrb	r3, [r7, #7]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <sendHWImpl4+0x8e>
 8005cde:	79fb      	ldrb	r3, [r7, #7]
 8005ce0:	e023      	b.n	8005d2a <sendHWImpl4+0xd6>

   /* shift right on a signed integer */
   errorCode = sendResult(CA_HWImpl_Results.shiftRightBehavior, 
         (MemUnit_T) CA_HW_IMPL_SHIFT_RIGHT,  
         (MemUnit_T) CA_Actual_HWImpl.shiftRightBehavior, 
 8005ce2:	4b14      	ldr	r3, [pc, #80]	; (8005d34 <sendHWImpl4+0xe0>)
 8005ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   errorCode = sendResult(CA_HWImpl_Results.shiftRightBehavior, 
 8005ce6:	b2d9      	uxtb	r1, r3
         (MemUnit_T) CA_Expected_HWImpl.shiftRightBehavior);
 8005ce8:	4b13      	ldr	r3, [pc, #76]	; (8005d38 <sendHWImpl4+0xe4>)
 8005cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   errorCode = sendResult(CA_HWImpl_Results.shiftRightBehavior, 
 8005cec:	b2dc      	uxtb	r4, r3
 8005cee:	4b13      	ldr	r3, [pc, #76]	; (8005d3c <sendHWImpl4+0xe8>)
 8005cf0:	7e1a      	ldrb	r2, [r3, #24]
 8005cf2:	7e5b      	ldrb	r3, [r3, #25]
 8005cf4:	021b      	lsls	r3, r3, #8
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	f363 000f 	bfi	r0, r3, #0, #16
 8005cfe:	4623      	mov	r3, r4
 8005d00:	460a      	mov	r2, r1
 8005d02:	210b      	movs	r1, #11
 8005d04:	f7ff fd38 	bl	8005778 <sendResult>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005d0c:	79fb      	ldrb	r3, [r7, #7]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <sendHWImpl4+0xc2>
 8005d12:	79fb      	ldrb	r3, [r7, #7]
 8005d14:	e009      	b.n	8005d2a <sendHWImpl4+0xd6>

   /* transmit message */
   errorCode = coderAssumptionsSendWriteBuffer();
 8005d16:	f000 f949 	bl	8005fac <coderAssumptionsSendWriteBuffer>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005d1e:	79fb      	ldrb	r3, [r7, #7]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <sendHWImpl4+0xd4>
 8005d24:	79fb      	ldrb	r3, [r7, #7]
 8005d26:	e000      	b.n	8005d2a <sendHWImpl4+0xd6>

   return errorCode;
 8005d28:	79fb      	ldrb	r3, [r7, #7]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd90      	pop	{r4, r7, pc}
 8005d32:	bf00      	nop
 8005d34:	200003d0 	.word	0x200003d0
 8005d38:	080099c0 	.word	0x080099c0
 8005d3c:	200003ac 	.word	0x200003ac

08005d40 <sendHardwareChecks>:

/* hardware implementation, checks unrelated to sizes */
static XIL_DATA_STREAM_ERROR_CODE sendHardwareChecks(void){
 8005d40:	b590      	push	{r4, r7, lr}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
    XIL_DATA_STREAM_ERROR_CODE errorCode = XIL_DATA_STREAM_SUCCESS;
 8005d46:	2300      	movs	r3, #0
 8005d48:	71fb      	strb	r3, [r7, #7]
    MemUnit_T commandId;

    commandId = CA_CHECKS_1;
 8005d4a:	2304      	movs	r3, #4
 8005d4c:	71bb      	strb	r3, [r7, #6]
    errorCode = coderAssumptionsWriteData(&commandId, sizeof(MemUnit_T));
 8005d4e:	1dbb      	adds	r3, r7, #6
 8005d50:	2101      	movs	r1, #1
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 f8d4 	bl	8005f00 <coderAssumptionsWriteData>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	71fb      	strb	r3, [r7, #7]
    if (errorCode) return errorCode;
 8005d5c:	79fb      	ldrb	r3, [r7, #7]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <sendHardwareChecks+0x26>
 8005d62:	79fb      	ldrb	r3, [r7, #7]
 8005d64:	e059      	b.n	8005e1a <sendHardwareChecks+0xda>

   /* memory at startup */
   errorCode = sendResult(CA_HWImpl_Results.memoryAtStartup,
         (MemUnit_T) CA_HW_IMPL_MEMORY_STARTUP,
         (MemUnit_T) CA_Actual_HWImpl.memoryAtStartup,
 8005d66:	4b2f      	ldr	r3, [pc, #188]	; (8005e24 <sendHardwareChecks+0xe4>)
 8005d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   errorCode = sendResult(CA_HWImpl_Results.memoryAtStartup,
 8005d6a:	b2d9      	uxtb	r1, r3
         (MemUnit_T) CA_Expected_HWImpl.memoryAtStartup);
 8005d6c:	4b2e      	ldr	r3, [pc, #184]	; (8005e28 <sendHardwareChecks+0xe8>)
 8005d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   errorCode = sendResult(CA_HWImpl_Results.memoryAtStartup,
 8005d70:	b2dc      	uxtb	r4, r3
 8005d72:	4b2e      	ldr	r3, [pc, #184]	; (8005e2c <sendHardwareChecks+0xec>)
 8005d74:	7f1a      	ldrb	r2, [r3, #28]
 8005d76:	7f5b      	ldrb	r3, [r3, #29]
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	f363 000f 	bfi	r0, r3, #0, #16
 8005d82:	4623      	mov	r3, r4
 8005d84:	460a      	mov	r2, r1
 8005d86:	210e      	movs	r1, #14
 8005d88:	f7ff fcf6 	bl	8005778 <sendResult>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	71fb      	strb	r3, [r7, #7]
   if(errorCode) return errorCode;
 8005d90:	79fb      	ldrb	r3, [r7, #7]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <sendHardwareChecks+0x5a>
 8005d96:	79fb      	ldrb	r3, [r7, #7]
 8005d98:	e03f      	b.n	8005e1a <sendHardwareChecks+0xda>
   
   /* denormal flush to zero */
   errorCode = sendResult(CA_HWImpl_Results.denormalFlushToZero,
         (MemUnit_T) CA_HW_IMPL_DENORMAL_FTZ,
         (MemUnit_T) CA_Actual_HWImpl.denormalFlushToZero,
 8005d9a:	4b22      	ldr	r3, [pc, #136]	; (8005e24 <sendHardwareChecks+0xe4>)
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   errorCode = sendResult(CA_HWImpl_Results.denormalFlushToZero,
 8005d9e:	b2d9      	uxtb	r1, r3
         (MemUnit_T) CA_Expected_HWImpl.denormalFlushToZero);
 8005da0:	4b21      	ldr	r3, [pc, #132]	; (8005e28 <sendHardwareChecks+0xe8>)
 8005da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   errorCode = sendResult(CA_HWImpl_Results.denormalFlushToZero,
 8005da4:	b2dc      	uxtb	r4, r3
 8005da6:	4b21      	ldr	r3, [pc, #132]	; (8005e2c <sendHardwareChecks+0xec>)
 8005da8:	7f9a      	ldrb	r2, [r3, #30]
 8005daa:	7fdb      	ldrb	r3, [r3, #31]
 8005dac:	021b      	lsls	r3, r3, #8
 8005dae:	4313      	orrs	r3, r2
 8005db0:	2000      	movs	r0, #0
 8005db2:	f363 000f 	bfi	r0, r3, #0, #16
 8005db6:	4623      	mov	r3, r4
 8005db8:	460a      	mov	r2, r1
 8005dba:	210f      	movs	r1, #15
 8005dbc:	f7ff fcdc 	bl	8005778 <sendResult>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	71fb      	strb	r3, [r7, #7]
   if(errorCode) return errorCode;
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <sendHardwareChecks+0x8e>
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	e025      	b.n	8005e1a <sendHardwareChecks+0xda>
   
   /* denormal as zero */
   errorCode = sendResult(CA_HWImpl_Results.denormalAsZero,
         (MemUnit_T) CA_HW_IMPL_DENORMAL_DAZ,
         (MemUnit_T) CA_Actual_HWImpl.denormalAsZero,
 8005dce:	4b15      	ldr	r3, [pc, #84]	; (8005e24 <sendHardwareChecks+0xe4>)
 8005dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   errorCode = sendResult(CA_HWImpl_Results.denormalAsZero,
 8005dd2:	b2d9      	uxtb	r1, r3
         (MemUnit_T) CA_Expected_HWImpl.denormalAsZero);
 8005dd4:	4b14      	ldr	r3, [pc, #80]	; (8005e28 <sendHardwareChecks+0xe8>)
 8005dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   errorCode = sendResult(CA_HWImpl_Results.denormalAsZero,
 8005dd8:	b2dc      	uxtb	r4, r3
 8005dda:	4b14      	ldr	r3, [pc, #80]	; (8005e2c <sendHardwareChecks+0xec>)
 8005ddc:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005de0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005de4:	021b      	lsls	r3, r3, #8
 8005de6:	4313      	orrs	r3, r2
 8005de8:	2000      	movs	r0, #0
 8005dea:	f363 000f 	bfi	r0, r3, #0, #16
 8005dee:	4623      	mov	r3, r4
 8005df0:	460a      	mov	r2, r1
 8005df2:	2110      	movs	r1, #16
 8005df4:	f7ff fcc0 	bl	8005778 <sendResult>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	71fb      	strb	r3, [r7, #7]
   if(errorCode) return errorCode;
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <sendHardwareChecks+0xc6>
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	e009      	b.n	8005e1a <sendHardwareChecks+0xda>
   /* transmit message */
   errorCode = coderAssumptionsSendWriteBuffer();
 8005e06:	f000 f8d1 	bl	8005fac <coderAssumptionsSendWriteBuffer>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	71fb      	strb	r3, [r7, #7]
   if (errorCode) return errorCode;
 8005e0e:	79fb      	ldrb	r3, [r7, #7]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <sendHardwareChecks+0xd8>
 8005e14:	79fb      	ldrb	r3, [r7, #7]
 8005e16:	e000      	b.n	8005e1a <sendHardwareChecks+0xda>

   return errorCode;
 8005e18:	79fb      	ldrb	r3, [r7, #7]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd90      	pop	{r4, r7, pc}
 8005e22:	bf00      	nop
 8005e24:	200003d0 	.word	0x200003d0
 8005e28:	080099c0 	.word	0x080099c0
 8005e2c:	200003ac 	.word	0x200003ac

08005e30 <runChecks>:

static XIL_DATA_STREAM_ERROR_CODE runChecks(void) {
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
    XIL_DATA_STREAM_ERROR_CODE errorCode;
    MemUnit_T endTransmission = CA_END_TRANSMIT;
 8005e36:	2306      	movs	r3, #6
 8005e38:	71bb      	strb	r3, [r7, #6]

     /* first, run the coder assumptions checks */
    CA_Run_Tests();
 8005e3a:	f7ff fbf1 	bl	8005620 <Model_for_PIL_caRunTests>

    /* now send the results to the host */
    errorCode = transmitMemUnitBytes();
 8005e3e:	f7ff fcef 	bl	8005820 <transmitMemUnitBytes>
 8005e42:	4603      	mov	r3, r0
 8005e44:	71fb      	strb	r3, [r7, #7]
    if (errorCode) return errorCode;
 8005e46:	79fb      	ldrb	r3, [r7, #7]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <runChecks+0x20>
 8005e4c:	79fb      	ldrb	r3, [r7, #7]
 8005e4e:	e046      	b.n	8005ede <runChecks+0xae>

    errorCode = sendPWS();
 8005e50:	f7ff fd06 	bl	8005860 <sendPWS>
 8005e54:	4603      	mov	r3, r0
 8005e56:	71fb      	strb	r3, [r7, #7]
    if (errorCode) return errorCode;
 8005e58:	79fb      	ldrb	r3, [r7, #7]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <runChecks+0x32>
 8005e5e:	79fb      	ldrb	r3, [r7, #7]
 8005e60:	e03d      	b.n	8005ede <runChecks+0xae>

    errorCode = sendHWImpl1();
 8005e62:	f7ff fd61 	bl	8005928 <sendHWImpl1>
 8005e66:	4603      	mov	r3, r0
 8005e68:	71fb      	strb	r3, [r7, #7]
    if (errorCode) return errorCode;
 8005e6a:	79fb      	ldrb	r3, [r7, #7]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <runChecks+0x44>
 8005e70:	79fb      	ldrb	r3, [r7, #7]
 8005e72:	e034      	b.n	8005ede <runChecks+0xae>
    errorCode = sendHWImpl2();
 8005e74:	f7ff fde8 	bl	8005a48 <sendHWImpl2>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	71fb      	strb	r3, [r7, #7]
    if (errorCode) return errorCode;
 8005e7c:	79fb      	ldrb	r3, [r7, #7]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <runChecks+0x56>
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	e02b      	b.n	8005ede <runChecks+0xae>
    errorCode = sendHWImpl3();
 8005e86:	f7ff fe6f 	bl	8005b68 <sendHWImpl3>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	71fb      	strb	r3, [r7, #7]
    if (errorCode) return errorCode;
 8005e8e:	79fb      	ldrb	r3, [r7, #7]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <runChecks+0x68>
 8005e94:	79fb      	ldrb	r3, [r7, #7]
 8005e96:	e022      	b.n	8005ede <runChecks+0xae>
    errorCode = sendHWImpl4();
 8005e98:	f7ff fedc 	bl	8005c54 <sendHWImpl4>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	71fb      	strb	r3, [r7, #7]
    if (errorCode) return errorCode;
 8005ea0:	79fb      	ldrb	r3, [r7, #7]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <runChecks+0x7a>
 8005ea6:	79fb      	ldrb	r3, [r7, #7]
 8005ea8:	e019      	b.n	8005ede <runChecks+0xae>

    /* send results of miscellaneous checks */
    errorCode = sendHardwareChecks();
 8005eaa:	f7ff ff49 	bl	8005d40 <sendHardwareChecks>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	71fb      	strb	r3, [r7, #7]
    if (errorCode) return errorCode;
 8005eb2:	79fb      	ldrb	r3, [r7, #7]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <runChecks+0x8c>
 8005eb8:	79fb      	ldrb	r3, [r7, #7]
 8005eba:	e010      	b.n	8005ede <runChecks+0xae>

    /* let host know all tests have completed */
    errorCode = coderAssumptionsWriteData(&endTransmission, sizeof(MemUnit_T));
 8005ebc:	1dbb      	adds	r3, r7, #6
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f000 f81d 	bl	8005f00 <coderAssumptionsWriteData>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	71fb      	strb	r3, [r7, #7]
    if (errorCode) return errorCode;
 8005eca:	79fb      	ldrb	r3, [r7, #7]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <runChecks+0xa4>
 8005ed0:	79fb      	ldrb	r3, [r7, #7]
 8005ed2:	e004      	b.n	8005ede <runChecks+0xae>
    errorCode = coderAssumptionsSendWriteBuffer();
 8005ed4:	f000 f86a 	bl	8005fac <coderAssumptionsSendWriteBuffer>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	71fb      	strb	r3, [r7, #7]
    
    /* final return */
    return errorCode;
 8005edc:	79fb      	ldrb	r3, [r7, #7]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <coderAssumptionsRun>:

/* 
 * XIL interface entry points 
 *
 */
XIL_INTERFACE_LIB_ERROR_CODE coderAssumptionsRun(void) {
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	af00      	add	r7, sp, #0
   if (runChecks() != XIL_DATA_STREAM_SUCCESS) {
 8005eea:	f7ff ffa1 	bl	8005e30 <runChecks>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <coderAssumptionsRun+0x12>
      return XIL_INTERFACE_LIB_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e000      	b.n	8005efa <coderAssumptionsRun+0x14>
   }
   else {
      return XIL_INTERFACE_LIB_SUCCESS;
 8005ef8:	2300      	movs	r3, #0
   }
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	bd80      	pop	{r7, pc}
	...

08005f00 <coderAssumptionsWriteData>:

static void* pBuffer;
static IOUnit_T* coderAssumptionsWriteDataPtr;
static uint16_T coderAssumptionsWriteDataAvail;

XIL_DATA_STREAM_ERROR_CODE coderAssumptionsWriteData(const void * src, const size_t size) {
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
   XIL_DATA_STREAM_ERROR_CODE errorCode = XIL_DATA_STREAM_SUCCESS;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	75fb      	strb	r3, [r7, #23]

   const size_t WRITE_BUFFER_SIZE = CA_TX_BUFFER_MEMUNIT_SIZE - BUFFER_HEADER_SIZE;
 8005f0e:	231b      	movs	r3, #27
 8005f10:	613b      	str	r3, [r7, #16]
   size_t sizeToTransfer = size;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	60fb      	str	r3, [r7, #12]

   /* check to see if buffer will overflow */
   if ((coderAssumptionsWriteDataAvail + sizeToTransfer) > WRITE_BUFFER_SIZE) {
 8005f16:	4b13      	ldr	r3, [pc, #76]	; (8005f64 <coderAssumptionsWriteData+0x64>)
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4413      	add	r3, r2
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d203      	bcs.n	8005f2e <coderAssumptionsWriteData+0x2e>
      errorCode = XIL_WRITE_DATA_ERROR;
 8005f26:	2302      	movs	r3, #2
 8005f28:	75fb      	strb	r3, [r7, #23]
      return errorCode;
 8005f2a:	7dfb      	ldrb	r3, [r7, #23]
 8005f2c:	e015      	b.n	8005f5a <coderAssumptionsWriteData+0x5a>
   }

   /* copy data into write buffer */
   memcpy((void *) coderAssumptionsWriteDataPtr, src, sizeToTransfer);
 8005f2e:	4b0e      	ldr	r3, [pc, #56]	; (8005f68 <coderAssumptionsWriteData+0x68>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	6879      	ldr	r1, [r7, #4]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f002 f926 	bl	8008188 <memcpy>
   coderAssumptionsWriteDataAvail += (uint16_T) sizeToTransfer;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	4b08      	ldr	r3, [pc, #32]	; (8005f64 <coderAssumptionsWriteData+0x64>)
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	4413      	add	r3, r2
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <coderAssumptionsWriteData+0x64>)
 8005f4a:	801a      	strh	r2, [r3, #0]
   coderAssumptionsWriteDataPtr += sizeToTransfer;
 8005f4c:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <coderAssumptionsWriteData+0x68>)
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4413      	add	r3, r2
 8005f54:	4a04      	ldr	r2, [pc, #16]	; (8005f68 <coderAssumptionsWriteData+0x68>)
 8005f56:	6013      	str	r3, [r2, #0]

   return errorCode;
 8005f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	200000c0 	.word	0x200000c0
 8005f68:	200000bc 	.word	0x200000bc

08005f6c <resetCoderAssumptionsWriteBuffer>:


/* reset the write buffer */
XIL_INTERFACE_LIB_ERROR_CODE resetCoderAssumptionsWriteBuffer(void) {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
    
    /* Ask the CS to allocate a buffer that the app will 
     * use for transmission
     */
    if (!coderAssumpTgtAppSvcAllocBuffer(&pBuffer, CA_TX_BUFFER_MEMUNIT_SIZE)) {
 8005f70:	2120      	movs	r1, #32
 8005f72:	480b      	ldr	r0, [pc, #44]	; (8005fa0 <resetCoderAssumptionsWriteBuffer+0x34>)
 8005f74:	f000 fc9e 	bl	80068b4 <coderAssumpTgtAppSvcAllocBuffer>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <resetCoderAssumptionsWriteBuffer+0x16>
        return XIL_INTERFACE_LIB_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e00b      	b.n	8005f9a <resetCoderAssumptionsWriteBuffer+0x2e>
    }
    
    /* set coderAssumptionsWriteDataPtr pointer */
    coderAssumptionsWriteDataPtr = coderAssumpTgtAppSvcGetBufferDataPtr(pBuffer); 
 8005f82:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <resetCoderAssumptionsWriteBuffer+0x34>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fca6 	bl	80068d8 <coderAssumpTgtAppSvcGetBufferDataPtr>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <resetCoderAssumptionsWriteBuffer+0x38>)
 8005f90:	601a      	str	r2, [r3, #0]
    
    /* ready for next command */
    coderAssumptionsWriteDataAvail = 0;
 8005f92:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <resetCoderAssumptionsWriteBuffer+0x3c>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	801a      	strh	r2, [r3, #0]
    
    return XIL_INTERFACE_LIB_SUCCESS;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	200000b8 	.word	0x200000b8
 8005fa4:	200000bc 	.word	0x200000bc
 8005fa8:	200000c0 	.word	0x200000c0

08005fac <coderAssumptionsSendWriteBuffer>:

/* send pending writes */
XIL_DATA_STREAM_ERROR_CODE coderAssumptionsSendWriteBuffer(void) {
 8005fac:	b580      	push	{r7, lr}
 8005fae:	af00      	add	r7, sp, #0
   /* send */
   if (coderAssumpTgtAppSvcSend(pBuffer, coderAssumptionsWriteDataAvail) == CODERASSUMPTGTAPPSVC_ERROR) {             
 8005fb0:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <coderAssumptionsSendWriteBuffer+0x38>)
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <coderAssumptionsSendWriteBuffer+0x3c>)
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	4619      	mov	r1, r3
 8005fba:	4610      	mov	r0, r2
 8005fbc:	f000 fc9a 	bl	80068f4 <coderAssumpTgtAppSvcSend>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d101      	bne.n	8005fce <coderAssumptionsSendWriteBuffer+0x22>
      return XIL_WRITE_DATA_ERROR;
 8005fca:	2302      	movs	r3, #2
 8005fcc:	e007      	b.n	8005fde <coderAssumptionsSendWriteBuffer+0x32>
   }   
   
   /* reset */
   if (resetCoderAssumptionsWriteBuffer()!= XIL_INTERFACE_LIB_SUCCESS) {
 8005fce:	f7ff ffcd 	bl	8005f6c <resetCoderAssumptionsWriteBuffer>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <coderAssumptionsSendWriteBuffer+0x30>
	   return XIL_WRITE_DATA_ERROR;
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e000      	b.n	8005fde <coderAssumptionsSendWriteBuffer+0x32>
   }
   
   return XIL_DATA_STREAM_SUCCESS;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	200000b8 	.word	0x200000b8
 8005fe8:	200000c0 	.word	0x200000c0

08005fec <coderAssumptionsInit>:

XIL_INTERFACE_LIB_ERROR_CODE coderAssumptionsInit(void) {    
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
    /* Create coder assumptions app service */
    if (coderAssumpTgtAppSvcCreate() != CODERASSUMPTGTAPPSVC_SUCCESS) {
 8005ff0:	f000 fc50 	bl	8006894 <coderAssumpTgtAppSvcCreate>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d001      	beq.n	8006002 <coderAssumptionsInit+0x16>
        return XIL_INTERFACE_LIB_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e002      	b.n	8006008 <coderAssumptionsInit+0x1c>
    }

   /* Reset write buffer */
   return resetCoderAssumptionsWriteBuffer();
 8006002:	f7ff ffb3 	bl	8005f6c <resetCoderAssumptionsWriteBuffer>
 8006006:	4603      	mov	r3, r0
}
 8006008:	4618      	mov	r0, r3
 800600a:	bd80      	pop	{r7, pc}

0800600c <coderAssumptionsTerminate>:

void coderAssumptionsTerminate(void) {      
 800600c:	b580      	push	{r7, lr}
 800600e:	af00      	add	r7, sp, #0
   coderAssumpTgtAppSvcDestroy();
 8006010:	f000 fc48 	bl	80068a4 <coderAssumpTgtAppSvcDestroy>
}
 8006014:	bf00      	nop
 8006016:	bd80      	pop	{r7, pc}

08006018 <numBits>:
    extern volatile double denormalAsZero;
#endif

/* return the minimum number of bits needed to 
 * represent the input value */
static unsigned int numBits(ca_numBits_t value) {
 8006018:	b490      	push	{r4, r7}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	e9c7 0100 	strd	r0, r1, [r7]
   /* note: returns 1 for zero as well as 1 */
   unsigned int num = 1;
 8006022:	2301      	movs	r3, #1
 8006024:	60fb      	str	r3, [r7, #12]

   while (value >>= 1) {
 8006026:	e002      	b.n	800602e <numBits+0x16>
      num++;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	3301      	adds	r3, #1
 800602c:	60fb      	str	r3, [r7, #12]
   while (value >>= 1) {
 800602e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006032:	0864      	lsrs	r4, r4, #1
 8006034:	ea4f 0333 	mov.w	r3, r3, rrx
 8006038:	e9c7 3400 	strd	r3, r4, [r7]
 800603c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006040:	4323      	orrs	r3, r4
 8006042:	d1f1      	bne.n	8006028 <numBits+0x10>
   }
   return num;
 8006044:	68fb      	ldr	r3, [r7, #12]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bc90      	pop	{r4, r7}
 800604e:	4770      	bx	lr

08006050 <getBitsPerMemUnit>:

static unsigned int getBitsPerMemUnit(CA_HWImpl * act){
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
   /* sizeof returns a size in memory units (bytes for byte addressable machines
    * and words for word addressable machines). Determine the number of 
    * bits each sizeof memory unit represents. */
   CA_BitsPerXValue bitsPerMemUnit=0;
 8006058:	2300      	movs	r3, #0
 800605a:	60fb      	str	r3, [r7, #12]
   }
   else if (sizeof(short) == 1) {
      bitsPerMemUnit = act->bitsPerShort;
   }
   else if (sizeof(char) == 1) {
      bitsPerMemUnit = act->bitsPerChar;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	60fb      	str	r3, [r7, #12]
      /* allow override via preprocessor define, e.g. in case of 
       * a 64-bit word addressable architecture with 
       * 32-bit long data type stored in a 64-bit container. */
      bitsPerMemUnit = CA_BITS_PER_MEM_UNITS;
  #endif
    return bitsPerMemUnit;
 8006062:	68fb      	ldr	r3, [r7, #12]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <getCPUInfo>:

/* get CPU characteristics */
static void getCPUInfo(CA_HWImpl * act,  CA_BitsPerXValue * bitsPerMemUnit) {
 8006070:	b580      	push	{r7, lr}
 8006072:	b092      	sub	sp, #72	; 0x48
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
   int i1, i2, i3, i4, i5, i6, i7, i8, i9, r1, r2;
   
   /*-----------------------------------------------------------------------
    * shifts right on signed integers
    */
   i1 = -28;
 800607a:	f06f 031b 	mvn.w	r3, #27
 800607e:	647b      	str	r3, [r7, #68]	; 0x44
   i2 = ( i1 >> 2 );
 8006080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006082:	109b      	asrs	r3, r3, #2
 8006084:	643b      	str	r3, [r7, #64]	; 0x40

   act->shiftRightBehavior = ( i2 == ( i1 /  4) );
 8006086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006088:	2b00      	cmp	r3, #0
 800608a:	da00      	bge.n	800608e <getCPUInfo+0x1e>
 800608c:	3303      	adds	r3, #3
 800608e:	109b      	asrs	r3, r3, #2
 8006090:	461a      	mov	r2, r3
 8006092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006094:	4293      	cmp	r3, r2
 8006096:	bf0c      	ite	eq
 8006098:	2301      	moveq	r3, #1
 800609a:	2300      	movne	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	461a      	mov	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	62da      	str	r2, [r3, #44]	; 0x2c
      /* num and denom must be declared volatile to force the divisions to
       * happen on the target, instead of being optimized away by the compiler.
       */
      volatile int num, denom;

      denom = 4;
 80060a4:	2304      	movs	r3, #4
 80060a6:	617b      	str	r3, [r7, #20]
      num = -7;
 80060a8:	f06f 0306 	mvn.w	r3, #6
 80060ac:	61bb      	str	r3, [r7, #24]
      i1 = num / denom;   /* -7/4 */
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80060b6:	647b      	str	r3, [r7, #68]	; 0x44
      num = -6;
 80060b8:	f06f 0305 	mvn.w	r3, #5
 80060bc:	61bb      	str	r3, [r7, #24]
      i2 = num / denom;   /* -6/4 */
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80060c6:	643b      	str	r3, [r7, #64]	; 0x40
      num = -5;
 80060c8:	f06f 0304 	mvn.w	r3, #4
 80060cc:	61bb      	str	r3, [r7, #24]
      i3 = num / denom;   /* -5/4 */
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80060d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      denom = -4;
 80060d8:	f06f 0303 	mvn.w	r3, #3
 80060dc:	617b      	str	r3, [r7, #20]
      num = 7;
 80060de:	2307      	movs	r3, #7
 80060e0:	61bb      	str	r3, [r7, #24]
      i4 = num / denom;   /* 7/-4 */
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80060ea:	63bb      	str	r3, [r7, #56]	; 0x38
      num = 6;
 80060ec:	2306      	movs	r3, #6
 80060ee:	61bb      	str	r3, [r7, #24]
      i5 = num / denom;   /* 6/-4 */
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80060f8:	637b      	str	r3, [r7, #52]	; 0x34
      num = 5;
 80060fa:	2305      	movs	r3, #5
 80060fc:	61bb      	str	r3, [r7, #24]
      i6 = num / denom;   /* 5/-4 */
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	fb92 f3f3 	sdiv	r3, r2, r3
 8006106:	633b      	str	r3, [r7, #48]	; 0x30
      num = -7;
 8006108:	f06f 0306 	mvn.w	r3, #6
 800610c:	61bb      	str	r3, [r7, #24]
      i7 = num / denom;   /* -7/-4 */
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	fb92 f3f3 	sdiv	r3, r2, r3
 8006116:	62fb      	str	r3, [r7, #44]	; 0x2c
      num = -6;
 8006118:	f06f 0305 	mvn.w	r3, #5
 800611c:	61bb      	str	r3, [r7, #24]
      i8 = num / denom;   /* -6/-4 */
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	fb92 f3f3 	sdiv	r3, r2, r3
 8006126:	62bb      	str	r3, [r7, #40]	; 0x28
      num = -5;
 8006128:	f06f 0304 	mvn.w	r3, #4
 800612c:	61bb      	str	r3, [r7, #24]
      i9 = num / denom;   /* -5/-4 */
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	fb92 f3f3 	sdiv	r3, r2, r3
 8006136:	627b      	str	r3, [r7, #36]	; 0x24
   }

   /* round toward floor test */
   r1 = ((i1 == -2) && (i2 == -2) && (i3 == -2) &&
         (i4 == -2) && (i5 == -2) && (i6 == -2) &&
         (i7 ==  1) && (i8 ==  1) && (i9 ==  1));
 8006138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800613a:	f113 0f02 	cmn.w	r3, #2
 800613e:	d11e      	bne.n	800617e <getCPUInfo+0x10e>
   r1 = ((i1 == -2) && (i2 == -2) && (i3 == -2) &&
 8006140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006142:	f113 0f02 	cmn.w	r3, #2
 8006146:	d11a      	bne.n	800617e <getCPUInfo+0x10e>
 8006148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614a:	f113 0f02 	cmn.w	r3, #2
 800614e:	d116      	bne.n	800617e <getCPUInfo+0x10e>
 8006150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006152:	f113 0f02 	cmn.w	r3, #2
 8006156:	d112      	bne.n	800617e <getCPUInfo+0x10e>
         (i4 == -2) && (i5 == -2) && (i6 == -2) &&
 8006158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615a:	f113 0f02 	cmn.w	r3, #2
 800615e:	d10e      	bne.n	800617e <getCPUInfo+0x10e>
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	f113 0f02 	cmn.w	r3, #2
 8006166:	d10a      	bne.n	800617e <getCPUInfo+0x10e>
 8006168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616a:	2b01      	cmp	r3, #1
 800616c:	d107      	bne.n	800617e <getCPUInfo+0x10e>
         (i7 ==  1) && (i8 ==  1) && (i9 ==  1));
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	2b01      	cmp	r3, #1
 8006172:	d104      	bne.n	800617e <getCPUInfo+0x10e>
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	2b01      	cmp	r3, #1
 8006178:	d101      	bne.n	800617e <getCPUInfo+0x10e>
 800617a:	2301      	movs	r3, #1
 800617c:	e000      	b.n	8006180 <getCPUInfo+0x110>
 800617e:	2300      	movs	r3, #0
   r1 = ((i1 == -2) && (i2 == -2) && (i3 == -2) &&
 8006180:	623b      	str	r3, [r7, #32]

   /* round toward zero test */
   r2 = ((i1 == -1) && (i2 == -1) && (i3 == -1) &&
         (i4 == -1) && (i5 == -1) && (i6 == -1) &&
         (i7 ==  1) && (i8 ==  1) && (i9 ==  1));
 8006182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006188:	d11e      	bne.n	80061c8 <getCPUInfo+0x158>
   r2 = ((i1 == -1) && (i2 == -1) && (i3 == -1) &&
 800618a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800618c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006190:	d11a      	bne.n	80061c8 <getCPUInfo+0x158>
 8006192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006198:	d116      	bne.n	80061c8 <getCPUInfo+0x158>
 800619a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a0:	d112      	bne.n	80061c8 <getCPUInfo+0x158>
         (i4 == -1) && (i5 == -1) && (i6 == -1) &&
 80061a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d10e      	bne.n	80061c8 <getCPUInfo+0x158>
 80061aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b0:	d10a      	bne.n	80061c8 <getCPUInfo+0x158>
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d107      	bne.n	80061c8 <getCPUInfo+0x158>
         (i7 ==  1) && (i8 ==  1) && (i9 ==  1));
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d104      	bne.n	80061c8 <getCPUInfo+0x158>
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d101      	bne.n	80061c8 <getCPUInfo+0x158>
 80061c4:	2301      	movs	r3, #1
 80061c6:	e000      	b.n	80061ca <getCPUInfo+0x15a>
 80061c8:	2300      	movs	r3, #0
   r2 = ((i1 == -1) && (i2 == -1) && (i3 == -1) &&
 80061ca:	61fb      	str	r3, [r7, #28]

   /* set rounding behaviour*/
   if (r1 && !r2) {
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d007      	beq.n	80061e2 <getCPUInfo+0x172>
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d104      	bne.n	80061e2 <getCPUInfo+0x172>
      /* Rounds to floor */
      act->intDivRoundTo = CA_FLOOR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80061e0:	e00e      	b.n	8006200 <getCPUInfo+0x190>
   }
   else if (!r1 && r2) {
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d107      	bne.n	80061f8 <getCPUInfo+0x188>
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d004      	beq.n	80061f8 <getCPUInfo+0x188>
      /* rounds to zero */
      act->intDivRoundTo = CA_ZERO;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80061f6:	e003      	b.n	8006200 <getCPUInfo+0x190>
   }
   else {
      /* undefined */
      act->intDivRoundTo = CA_UNDEFINED;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      /*-----------------------------------------------------------------------
       * Byte order test
       */
       
       /* Avoid compiler warning about constant expression */
       volatile int isSameSize = (sizeof(long) == sizeof(char));
 8006200:	2300      	movs	r3, #0
 8006202:	613b      	str	r3, [r7, #16]
       if (isSameSize) {
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d004      	beq.n	8006214 <getCPUInfo+0x1a4>
            * example TigerSharc integer data type sizes are all 32-bit), 
            * then this test will always return that the target is little 
            * endian. For such targets, the byte order becomes irrelevant 
            * and is safe to skip.
            */
           act->byteOrder = CA_UNABLE_TO_DETERMINE_ON_TARGET;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2203      	movs	r2, #3
 800620e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006212:	e00d      	b.n	8006230 <getCPUInfo+0x1c0>
       } else {
           long s1 = 1;
 8006214:	2301      	movs	r3, #1
 8006216:	60fb      	str	r3, [r7, #12]
           act->byteOrder =  (*((char *) &s1) == 1) ? CA_LITTLE_ENDIAN : CA_BIG_ENDIAN;
 8006218:	f107 030c 	add.w	r3, r7, #12
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b01      	cmp	r3, #1
 8006220:	bf14      	ite	ne
 8006222:	2301      	movne	r3, #1
 8006224:	2300      	moveq	r3, #0
 8006226:	b2db      	uxtb	r3, r3
 8006228:	461a      	mov	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    * type is implemented in a larger container, e.g. an 8-bit integer
    * implemented in a 16-bit container on some word addressable systems, 
    * e.g. DSP563xx 16-bit mode - sizeof(char) would be one 16-bit word whereas
    * UCHAR_MAX would be limited to 255.
    */
   act->bitsPerChar = numBits(UCHAR_MAX);
 8006230:	f04f 00ff 	mov.w	r0, #255	; 0xff
 8006234:	f04f 0100 	mov.w	r1, #0
 8006238:	f7ff feee 	bl	8006018 <numBits>
 800623c:	4602      	mov	r2, r0
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	601a      	str	r2, [r3, #0]
   act->bitsPerShort = numBits(USHRT_MAX);
 8006242:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006246:	f04f 0100 	mov.w	r1, #0
 800624a:	f7ff fee5 	bl	8006018 <numBits>
 800624e:	4602      	mov	r2, r0
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	605a      	str	r2, [r3, #4]
   act->bitsPerInt = numBits(UINT_MAX);
 8006254:	f04f 30ff 	mov.w	r0, #4294967295
 8006258:	f04f 0100 	mov.w	r1, #0
 800625c:	f7ff fedc 	bl	8006018 <numBits>
 8006260:	4602      	mov	r2, r0
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	609a      	str	r2, [r3, #8]
   act->bitsPerLong = numBits(ULONG_MAX);
 8006266:	f04f 30ff 	mov.w	r0, #4294967295
 800626a:	f04f 0100 	mov.w	r1, #0
 800626e:	f7ff fed3 	bl	8006018 <numBits>
 8006272:	4602      	mov	r2, r0
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	60da      	str	r2, [r3, #12]
   *bitsPerMemUnit=getBitsPerMemUnit(act);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7ff fee9 	bl	8006050 <getBitsPerMemUnit>
 800627e:	4602      	mov	r2, r0
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	601a      	str	r2, [r3, #0]
#if CA_CHECK_LONG_LONG_ENABLED == 1
   {
    /* expect "long long" compilation failure to have occurred 
     * during production code compilation, e.g. rtwtypes.h */
    act->supportLongLong = 1;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	631a      	str	r2, [r3, #48]	; 0x30
      
    /* report bits per long long based on type bits rather than 
     * ULLONG_MAX which may not exist pre-C99 */
    act->bitsPerLongLong = numBits(~(unsigned long long)0);
 800628a:	f04f 30ff 	mov.w	r0, #4294967295
 800628e:	f04f 31ff 	mov.w	r1, #4294967295
 8006292:	f7ff fec1 	bl	8006018 <numBits>
 8006296:	4602      	mov	r2, r0
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	611a      	str	r2, [r3, #16]
   /* set default values, but they won't be checked against */
   act->supportLongLong = 0;
   act->bitsPerLongLong = 0;
#endif

   return;
 800629c:	bf00      	nop
}
 800629e:	3748      	adds	r7, #72	; 0x48
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <testPass>:

static CA_TestResult testPass(const CA_TestResultMsgId msg) {
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	4603      	mov	r3, r0
 80062ac:	71fb      	strb	r3, [r7, #7]
   CA_TestResult result;
   result.status = CA_PASS;
 80062ae:	2302      	movs	r3, #2
 80062b0:	723b      	strb	r3, [r7, #8]
   result.msg = msg;
 80062b2:	79fb      	ldrb	r3, [r7, #7]
 80062b4:	727b      	strb	r3, [r7, #9]
   return result;
 80062b6:	893b      	ldrh	r3, [r7, #8]
 80062b8:	81bb      	strh	r3, [r7, #12]
 80062ba:	2300      	movs	r3, #0
 80062bc:	7b3a      	ldrb	r2, [r7, #12]
 80062be:	f362 0307 	bfi	r3, r2, #0, #8
 80062c2:	7b7a      	ldrb	r2, [r7, #13]
 80062c4:	f362 230f 	bfi	r3, r2, #8, #8
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <testFail>:

static CA_TestResult testFail(const CA_TestResultMsgId msg) {
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	4603      	mov	r3, r0
 80062dc:	71fb      	strb	r3, [r7, #7]
   CA_TestResult result;
   result.status = CA_FAIL;
 80062de:	2301      	movs	r3, #1
 80062e0:	723b      	strb	r3, [r7, #8]
   result.msg = msg;
 80062e2:	79fb      	ldrb	r3, [r7, #7]
 80062e4:	727b      	strb	r3, [r7, #9]
   return result;
 80062e6:	893b      	ldrh	r3, [r7, #8]
 80062e8:	81bb      	strh	r3, [r7, #12]
 80062ea:	2300      	movs	r3, #0
 80062ec:	7b3a      	ldrb	r2, [r7, #12]
 80062ee:	f362 0307 	bfi	r3, r2, #0, #8
 80062f2:	7b7a      	ldrb	r2, [r7, #13]
 80062f4:	f362 230f 	bfi	r3, r2, #8, #8
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <testWarn>:

static CA_TestResult testWarn(const CA_TestResultMsgId msg) {
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	4603      	mov	r3, r0
 800630c:	71fb      	strb	r3, [r7, #7]
   CA_TestResult result;
   result.status = CA_WARN;
 800630e:	2303      	movs	r3, #3
 8006310:	723b      	strb	r3, [r7, #8]
   result.msg = msg;
 8006312:	79fb      	ldrb	r3, [r7, #7]
 8006314:	727b      	strb	r3, [r7, #9]
   return result;
 8006316:	893b      	ldrh	r3, [r7, #8]
 8006318:	81bb      	strh	r3, [r7, #12]
 800631a:	2300      	movs	r3, #0
 800631c:	7b3a      	ldrb	r2, [r7, #12]
 800631e:	f362 0307 	bfi	r3, r2, #0, #8
 8006322:	7b7a      	ldrb	r2, [r7, #13]
 8006324:	f362 230f 	bfi	r3, r2, #8, #8
}
 8006328:	4618      	mov	r0, r3
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <testSkip>:

static CA_TestResult testSkip(const CA_TestResultMsgId msg) {
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	4603      	mov	r3, r0
 800633c:	71fb      	strb	r3, [r7, #7]
   CA_TestResult result;
   result.status = CA_SKIP;
 800633e:	2305      	movs	r3, #5
 8006340:	723b      	strb	r3, [r7, #8]
   result.msg = msg;
 8006342:	79fb      	ldrb	r3, [r7, #7]
 8006344:	727b      	strb	r3, [r7, #9]
   return result;
 8006346:	893b      	ldrh	r3, [r7, #8]
 8006348:	81bb      	strh	r3, [r7, #12]
 800634a:	2300      	movs	r3, #0
 800634c:	7b3a      	ldrb	r2, [r7, #12]
 800634e:	f362 0307 	bfi	r3, r2, #0, #8
 8006352:	7b7a      	ldrb	r2, [r7, #13]
 8006354:	f362 230f 	bfi	r3, r2, #8, #8
}
 8006358:	4618      	mov	r0, r3
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <testReview>:

/* the testReview function is currently used only if floating points are 
 * enabled. when this function will be used elsewhere, the guard below  
 * must be removed. */
#if CA_CHECK_FLOATING_POINT_ENABLED == 1
static CA_TestResult testReview(const CA_TestResultMsgId msg) {
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	71fb      	strb	r3, [r7, #7]
   CA_TestResult result;
   result.status = CA_INFO;
 800636e:	2304      	movs	r3, #4
 8006370:	723b      	strb	r3, [r7, #8]
   result.msg = msg;
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	727b      	strb	r3, [r7, #9]
   return result;
 8006376:	893b      	ldrh	r3, [r7, #8]
 8006378:	81bb      	strh	r3, [r7, #12]
 800637a:	2300      	movs	r3, #0
 800637c:	7b3a      	ldrb	r2, [r7, #12]
 800637e:	f362 0307 	bfi	r3, r2, #0, #8
 8006382:	7b7a      	ldrb	r2, [r7, #13]
 8006384:	f362 230f 	bfi	r3, r2, #8, #8
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <runTest>:
#endif

static CA_TestResult runTest(const unsigned int actual, const unsigned int config) {
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
   CA_TestResult result;
   if (actual == config) {
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d105      	bne.n	80063b2 <runTest+0x1e>
      result = testPass(CA_NO_MSG);
 80063a6:	2000      	movs	r0, #0
 80063a8:	f7ff ff7c 	bl	80062a4 <testPass>
 80063ac:	4603      	mov	r3, r0
 80063ae:	813b      	strh	r3, [r7, #8]
 80063b0:	e004      	b.n	80063bc <runTest+0x28>
   }
   else {
      result = testFail(CA_NO_MSG);
 80063b2:	2000      	movs	r0, #0
 80063b4:	f7ff ff8e 	bl	80062d4 <testFail>
 80063b8:	4603      	mov	r3, r0
 80063ba:	813b      	strh	r3, [r7, #8]
   }
   return result;
 80063bc:	893b      	ldrh	r3, [r7, #8]
 80063be:	81bb      	strh	r3, [r7, #12]
 80063c0:	2300      	movs	r3, #0
 80063c2:	7b3a      	ldrb	r2, [r7, #12]
 80063c4:	f362 0307 	bfi	r3, r2, #0, #8
 80063c8:	7b7a      	ldrb	r2, [r7, #13]
 80063ca:	f362 230f 	bfi	r3, r2, #8, #8
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <caVerifyPortableWordSizes>:

/* portable word sizes specified checks */
void caVerifyPortableWordSizes(CA_HWImpl * act, const CA_HWImpl * exp, CA_PWS_TestResults * res) {
 80063d6:	b590      	push	{r4, r7, lr}
 80063d8:	b085      	sub	sp, #20
 80063da:	af00      	add	r7, sp, #0
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	607a      	str	r2, [r7, #4]
    * without the PORTABLE_WORDSIZES define for on-target 
    * use. */
#ifdef PORTABLE_WORDSIZES
   act->portableWordSizes = 1;
#else
   act->portableWordSizes = 0;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	635a      	str	r2, [r3, #52]	; 0x34
#endif

   if (act->portableWordSizes) {
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01a      	beq.n	8006426 <caVerifyPortableWordSizes+0x50>
      /* check config setting is consistent with preprocessor define */
      if (exp->portableWordSizes) {
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00b      	beq.n	8006410 <caVerifyPortableWordSizes+0x3a>
         res->configSetting = testPass(CA_NO_MSG);
 80063f8:	687c      	ldr	r4, [r7, #4]
 80063fa:	2000      	movs	r0, #0
 80063fc:	f7ff ff52 	bl	80062a4 <testPass>
 8006400:	4603      	mov	r3, r0
 8006402:	b21b      	sxth	r3, r3
 8006404:	461a      	mov	r2, r3
 8006406:	7022      	strb	r2, [r4, #0]
 8006408:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800640c:	7063      	strb	r3, [r4, #1]
      }
      else {
         res->configSetting = testFail(CA_ERROR_PWS_CONFIG_SETTING);   
      }
   }
}
 800640e:	e00a      	b.n	8006426 <caVerifyPortableWordSizes+0x50>
         res->configSetting = testFail(CA_ERROR_PWS_CONFIG_SETTING);   
 8006410:	687c      	ldr	r4, [r7, #4]
 8006412:	2003      	movs	r0, #3
 8006414:	f7ff ff5e 	bl	80062d4 <testFail>
 8006418:	4603      	mov	r3, r0
 800641a:	b21b      	sxth	r3, r3
 800641c:	461a      	mov	r2, r3
 800641e:	7022      	strb	r2, [r4, #0]
 8006420:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006424:	7063      	strb	r3, [r4, #1]
}
 8006426:	bf00      	nop
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	bd90      	pop	{r4, r7, pc}
	...

08006430 <caVerifyHWImpl>:

/* Hardware implementation checks */
void caVerifyHWImpl(CA_HWImpl * act, const CA_HWImpl * exp, CA_HWImpl_TestResults * res) {
 8006430:	b590      	push	{r4, r7, lr}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
   CA_BitsPerXValue bitsPerMemUnit;
   /* 
    * Get the actual CPU info 
    */
   getCPUInfo(act, &bitsPerMemUnit);
 800643c:	f107 0314 	add.w	r3, r7, #20
 8006440:	4619      	mov	r1, r3
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f7ff fe14 	bl	8006070 <getCPUInfo>
   
   /* 
    * Run tests against expected CPU info 
    */
   if ((act->intDivRoundTo == CA_UNDEFINED) && 
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800644e:	2b02      	cmp	r3, #2
 8006450:	d110      	bne.n	8006474 <caVerifyHWImpl+0x44>
        (exp->intDivRoundTo != CA_UNDEFINED)) {
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   if ((act->intDivRoundTo == CA_UNDEFINED) && 
 8006458:	2b02      	cmp	r3, #2
 800645a:	d00b      	beq.n	8006474 <caVerifyHWImpl+0x44>
      /* actual behavior undefined => config must 
       * choose undefined too */
      res->intDivRoundTo = testFail(CA_NO_MSG);
 800645c:	687c      	ldr	r4, [r7, #4]
 800645e:	2000      	movs	r0, #0
 8006460:	f7ff ff38 	bl	80062d4 <testFail>
 8006464:	4603      	mov	r3, r0
 8006466:	b21b      	sxth	r3, r3
 8006468:	461a      	mov	r2, r3
 800646a:	75a2      	strb	r2, [r4, #22]
 800646c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006470:	75e3      	strb	r3, [r4, #23]
 8006472:	e02f      	b.n	80064d4 <caVerifyHWImpl+0xa4>
   }
   else {
      if (exp->intDivRoundTo == CA_UNDEFINED) {
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800647a:	2b02      	cmp	r3, #2
 800647c:	d10b      	bne.n	8006496 <caVerifyHWImpl+0x66>
         /* Undefined is sub-optimal */
         res->intDivRoundTo = testWarn(CA_WARN_INT_DIV_UNDEFINED);
 800647e:	687c      	ldr	r4, [r7, #4]
 8006480:	2001      	movs	r0, #1
 8006482:	f7ff ff3f 	bl	8006304 <testWarn>
 8006486:	4603      	mov	r3, r0
 8006488:	b21b      	sxth	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	75a2      	strb	r2, [r4, #22]
 800648e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006492:	75e3      	strb	r3, [r4, #23]
 8006494:	e01e      	b.n	80064d4 <caVerifyHWImpl+0xa4>
      }
      else {
         if (act->intDivRoundTo == exp->intDivRoundTo) {
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d10b      	bne.n	80064be <caVerifyHWImpl+0x8e>
               res->intDivRoundTo = testPass(CA_NO_MSG);
 80064a6:	687c      	ldr	r4, [r7, #4]
 80064a8:	2000      	movs	r0, #0
 80064aa:	f7ff fefb 	bl	80062a4 <testPass>
 80064ae:	4603      	mov	r3, r0
 80064b0:	b21b      	sxth	r3, r3
 80064b2:	461a      	mov	r2, r3
 80064b4:	75a2      	strb	r2, [r4, #22]
 80064b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80064ba:	75e3      	strb	r3, [r4, #23]
 80064bc:	e00a      	b.n	80064d4 <caVerifyHWImpl+0xa4>
         }
         else {
            res->intDivRoundTo = testFail(CA_NO_MSG);
 80064be:	687c      	ldr	r4, [r7, #4]
 80064c0:	2000      	movs	r0, #0
 80064c2:	f7ff ff07 	bl	80062d4 <testFail>
 80064c6:	4603      	mov	r3, r0
 80064c8:	b21b      	sxth	r3, r3
 80064ca:	461a      	mov	r2, r3
 80064cc:	75a2      	strb	r2, [r4, #22]
 80064ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80064d2:	75e3      	strb	r3, [r4, #23]
         }
      }
   }

   if (exp->byteOrder == CA_UNSPECIFIED) {
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d10b      	bne.n	80064f6 <caVerifyHWImpl+0xc6>
      /* Undefined is sub-optimal */
      res->byteOrder = testWarn(CA_WARN_BYTE_ORDER_UNSPECIFIED);      
 80064de:	687c      	ldr	r4, [r7, #4]
 80064e0:	2002      	movs	r0, #2
 80064e2:	f7ff ff0f 	bl	8006304 <testWarn>
 80064e6:	4603      	mov	r3, r0
 80064e8:	b21b      	sxth	r3, r3
 80064ea:	461a      	mov	r2, r3
 80064ec:	7522      	strb	r2, [r4, #20]
 80064ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80064f2:	7563      	strb	r3, [r4, #21]
 80064f4:	e02f      	b.n	8006556 <caVerifyHWImpl+0x126>
   } else if (act->byteOrder == CA_UNABLE_TO_DETERMINE_ON_TARGET) {
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d10b      	bne.n	8006518 <caVerifyHWImpl+0xe8>
       /* skip byte order test for targets that has all of its integer 
        * types size set to 32-bit */
       res->byteOrder = testPass(CA_NO_MSG);
 8006500:	687c      	ldr	r4, [r7, #4]
 8006502:	2000      	movs	r0, #0
 8006504:	f7ff fece 	bl	80062a4 <testPass>
 8006508:	4603      	mov	r3, r0
 800650a:	b21b      	sxth	r3, r3
 800650c:	461a      	mov	r2, r3
 800650e:	7522      	strb	r2, [r4, #20]
 8006510:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006514:	7563      	strb	r3, [r4, #21]
 8006516:	e01e      	b.n	8006556 <caVerifyHWImpl+0x126>
   } else {
      if (act->byteOrder == exp->byteOrder) {
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006524:	429a      	cmp	r2, r3
 8006526:	d10b      	bne.n	8006540 <caVerifyHWImpl+0x110>
         res->byteOrder = testPass(CA_NO_MSG);
 8006528:	687c      	ldr	r4, [r7, #4]
 800652a:	2000      	movs	r0, #0
 800652c:	f7ff feba 	bl	80062a4 <testPass>
 8006530:	4603      	mov	r3, r0
 8006532:	b21b      	sxth	r3, r3
 8006534:	461a      	mov	r2, r3
 8006536:	7522      	strb	r2, [r4, #20]
 8006538:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800653c:	7563      	strb	r3, [r4, #21]
 800653e:	e00a      	b.n	8006556 <caVerifyHWImpl+0x126>
      }
      else {
         res->byteOrder = testFail(CA_NO_MSG);
 8006540:	687c      	ldr	r4, [r7, #4]
 8006542:	2000      	movs	r0, #0
 8006544:	f7ff fec6 	bl	80062d4 <testFail>
 8006548:	4603      	mov	r3, r0
 800654a:	b21b      	sxth	r3, r3
 800654c:	461a      	mov	r2, r3
 800654e:	7522      	strb	r2, [r4, #20]
 8006550:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006554:	7563      	strb	r3, [r4, #21]
   /* shiftRightBehavior
    *
    * note that shift right behavior has no impact on portable 
    * word sizes behavior because even when this option is off, 
    * portable code is generated */
   res->shiftRightBehavior = runTest(act->shiftRightBehavior, 
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655e:	687c      	ldr	r4, [r7, #4]
 8006560:	4619      	mov	r1, r3
 8006562:	4610      	mov	r0, r2
 8006564:	f7ff ff16 	bl	8006394 <runTest>
 8006568:	4603      	mov	r3, r0
 800656a:	b21b      	sxth	r3, r3
 800656c:	461a      	mov	r2, r3
 800656e:	7622      	strb	r2, [r4, #24]
 8006570:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006574:	7663      	strb	r3, [r4, #25]
         exp->shiftRightBehavior);

   /* bitsPerChar */
   res->bitsPerChar = runTest(act->bitsPerChar, 
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	687c      	ldr	r4, [r7, #4]
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f7ff ff06 	bl	8006394 <runTest>
 8006588:	4603      	mov	r3, r0
 800658a:	b21b      	sxth	r3, r3
 800658c:	461a      	mov	r2, r3
 800658e:	7022      	strb	r2, [r4, #0]
 8006590:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006594:	7063      	strb	r3, [r4, #1]
         exp->bitsPerChar);

   /* bitsPerShort */
   res->bitsPerShort = runTest(act->bitsPerShort, 
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	687c      	ldr	r4, [r7, #4]
 80065a0:	4619      	mov	r1, r3
 80065a2:	4610      	mov	r0, r2
 80065a4:	f7ff fef6 	bl	8006394 <runTest>
 80065a8:	4603      	mov	r3, r0
 80065aa:	b21b      	sxth	r3, r3
 80065ac:	461a      	mov	r2, r3
 80065ae:	70a2      	strb	r2, [r4, #2]
 80065b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80065b4:	70e3      	strb	r3, [r4, #3]
         exp->bitsPerShort);

   /* bitsPerInt */
   res->bitsPerInt = runTest(act->bitsPerInt, 
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	689a      	ldr	r2, [r3, #8]
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	687c      	ldr	r4, [r7, #4]
 80065c0:	4619      	mov	r1, r3
 80065c2:	4610      	mov	r0, r2
 80065c4:	f7ff fee6 	bl	8006394 <runTest>
 80065c8:	4603      	mov	r3, r0
 80065ca:	b21b      	sxth	r3, r3
 80065cc:	461a      	mov	r2, r3
 80065ce:	7122      	strb	r2, [r4, #4]
 80065d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80065d4:	7163      	strb	r3, [r4, #5]
         exp->bitsPerInt);

   /* bitsPerLong */
   res->bitsPerLong = runTest(act->bitsPerLong, 
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	687c      	ldr	r4, [r7, #4]
 80065e0:	4619      	mov	r1, r3
 80065e2:	4610      	mov	r0, r2
 80065e4:	f7ff fed6 	bl	8006394 <runTest>
 80065e8:	4603      	mov	r3, r0
 80065ea:	b21b      	sxth	r3, r3
 80065ec:	461a      	mov	r2, r3
 80065ee:	71a2      	strb	r2, [r4, #6]
 80065f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80065f4:	71e3      	strb	r3, [r4, #7]
         exp->bitsPerLong);

   /* user has to opt in to support long long */
   if (exp->supportLongLong) {
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d020      	beq.n	8006640 <caVerifyHWImpl+0x210>
      /* check actual support */
      res->supportLongLong = runTest(act->supportLongLong, 
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006606:	687c      	ldr	r4, [r7, #4]
 8006608:	4619      	mov	r1, r3
 800660a:	4610      	mov	r0, r2
 800660c:	f7ff fec2 	bl	8006394 <runTest>
 8006610:	4603      	mov	r3, r0
 8006612:	b21b      	sxth	r3, r3
 8006614:	461a      	mov	r2, r3
 8006616:	76a2      	strb	r2, [r4, #26]
 8006618:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800661c:	76e3      	strb	r3, [r4, #27]
            exp->supportLongLong);   

      /* check bits per long long */
      res->bitsPerLongLong = runTest(act->bitsPerLongLong, 
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	691a      	ldr	r2, [r3, #16]
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	687c      	ldr	r4, [r7, #4]
 8006628:	4619      	mov	r1, r3
 800662a:	4610      	mov	r0, r2
 800662c:	f7ff feb2 	bl	8006394 <runTest>
 8006630:	4603      	mov	r3, r0
 8006632:	b21b      	sxth	r3, r3
 8006634:	461a      	mov	r2, r3
 8006636:	7222      	strb	r2, [r4, #8]
 8006638:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800663c:	7263      	strb	r3, [r4, #9]
 800663e:	e015      	b.n	800666c <caVerifyHWImpl+0x23c>
            exp->bitsPerLongLong);
   }
   else {
      /* ok */
      res->supportLongLong = testSkip(CA_NO_MSG);
 8006640:	687c      	ldr	r4, [r7, #4]
 8006642:	2000      	movs	r0, #0
 8006644:	f7ff fe76 	bl	8006334 <testSkip>
 8006648:	4603      	mov	r3, r0
 800664a:	b21b      	sxth	r3, r3
 800664c:	461a      	mov	r2, r3
 800664e:	76a2      	strb	r2, [r4, #26]
 8006650:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006654:	76e3      	strb	r3, [r4, #27]
      /* ok */
      res->bitsPerLongLong = testSkip(CA_NO_MSG);
 8006656:	687c      	ldr	r4, [r7, #4]
 8006658:	2000      	movs	r0, #0
 800665a:	f7ff fe6b 	bl	8006334 <testSkip>
 800665e:	4603      	mov	r3, r0
 8006660:	b21b      	sxth	r3, r3
 8006662:	461a      	mov	r2, r3
 8006664:	7222      	strb	r2, [r4, #8]
 8006666:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800666a:	7263      	strb	r3, [r4, #9]
   }

#if CA_CHECK_FLOATING_POINT_ENABLED == 1
   act->bitsPerFloat = sizeof(float) * bitsPerMemUnit;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	009a      	lsls	r2, r3, #2
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	615a      	str	r2, [r3, #20]
   act->bitsPerDouble = sizeof(double) * bitsPerMemUnit;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	00da      	lsls	r2, r3, #3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	619a      	str	r2, [r3, #24]
   
   /* float is not configurable in the config so just warn */
   if (act->bitsPerFloat == exp->bitsPerFloat) {
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	695a      	ldr	r2, [r3, #20]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	429a      	cmp	r2, r3
 8006686:	d10b      	bne.n	80066a0 <caVerifyHWImpl+0x270>
      res->bitsPerFloat = testPass(CA_NO_MSG);
 8006688:	687c      	ldr	r4, [r7, #4]
 800668a:	2000      	movs	r0, #0
 800668c:	f7ff fe0a 	bl	80062a4 <testPass>
 8006690:	4603      	mov	r3, r0
 8006692:	b21b      	sxth	r3, r3
 8006694:	461a      	mov	r2, r3
 8006696:	72a2      	strb	r2, [r4, #10]
 8006698:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800669c:	72e3      	strb	r3, [r4, #11]
 800669e:	e00a      	b.n	80066b6 <caVerifyHWImpl+0x286>
   }
   else {
      res->bitsPerFloat = testWarn(CA_NO_MSG);
 80066a0:	687c      	ldr	r4, [r7, #4]
 80066a2:	2000      	movs	r0, #0
 80066a4:	f7ff fe2e 	bl	8006304 <testWarn>
 80066a8:	4603      	mov	r3, r0
 80066aa:	b21b      	sxth	r3, r3
 80066ac:	461a      	mov	r2, r3
 80066ae:	72a2      	strb	r2, [r4, #10]
 80066b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80066b4:	72e3      	strb	r3, [r4, #11]
    *
    * Allow either 32 or 64 bits without warning.
    * Note that PIL has an additional run time check for 
    * non-64-bit double and will error in this case if 
    * double data types are used at the component boundary.*/
   switch (act->bitsPerDouble) {
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	2b20      	cmp	r3, #32
 80066bc:	d001      	beq.n	80066c2 <caVerifyHWImpl+0x292>
 80066be:	2b40      	cmp	r3, #64	; 0x40
 80066c0:	d10b      	bne.n	80066da <caVerifyHWImpl+0x2aa>
      case 32: /* drop through */
      case 64:
         res->bitsPerDouble = testPass(CA_NO_MSG);
 80066c2:	687c      	ldr	r4, [r7, #4]
 80066c4:	2000      	movs	r0, #0
 80066c6:	f7ff fded 	bl	80062a4 <testPass>
 80066ca:	4603      	mov	r3, r0
 80066cc:	b21b      	sxth	r3, r3
 80066ce:	461a      	mov	r2, r3
 80066d0:	7322      	strb	r2, [r4, #12]
 80066d2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80066d6:	7363      	strb	r3, [r4, #13]
         break;
 80066d8:	e00b      	b.n	80066f2 <caVerifyHWImpl+0x2c2>
      default:
         res->bitsPerDouble = testWarn(CA_NO_MSG);
 80066da:	687c      	ldr	r4, [r7, #4]
 80066dc:	2000      	movs	r0, #0
 80066de:	f7ff fe11 	bl	8006304 <testWarn>
 80066e2:	4603      	mov	r3, r0
 80066e4:	b21b      	sxth	r3, r3
 80066e6:	461a      	mov	r2, r3
 80066e8:	7322      	strb	r2, [r4, #12]
 80066ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80066ee:	7363      	strb	r3, [r4, #13]
         break;
 80066f0:	bf00      	nop
   res->bitsPerFloat = testSkip(CA_NO_MSG);
   res->bitsPerDouble = testSkip(CA_NO_MSG);   
#endif

   /* pointer is fully configurable => error on failure */
   act->bitsPerPointer = sizeof(void *) * bitsPerMemUnit;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	009a      	lsls	r2, r3, #2
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	61da      	str	r2, [r3, #28]
   res->bitsPerPointer = runTest(act->bitsPerPointer, 
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	69da      	ldr	r2, [r3, #28]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	687c      	ldr	r4, [r7, #4]
 8006704:	4619      	mov	r1, r3
 8006706:	4610      	mov	r0, r2
 8006708:	f7ff fe44 	bl	8006394 <runTest>
 800670c:	4603      	mov	r3, r0
 800670e:	b21b      	sxth	r3, r3
 8006710:	461a      	mov	r2, r3
 8006712:	73a2      	strb	r2, [r4, #14]
 8006714:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006718:	73e3      	strb	r3, [r4, #15]
         exp->bitsPerPointer);

   /* size_t and ptrdiff_t defined in stddef.h */
   act->bitsPerSizeT = sizeof(size_t) * bitsPerMemUnit;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	009a      	lsls	r2, r3, #2
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	621a      	str	r2, [r3, #32]
   res->bitsPerSizeT = runTest(act->bitsPerSizeT, exp->bitsPerSizeT);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6a1a      	ldr	r2, [r3, #32]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	687c      	ldr	r4, [r7, #4]
 800672c:	4619      	mov	r1, r3
 800672e:	4610      	mov	r0, r2
 8006730:	f7ff fe30 	bl	8006394 <runTest>
 8006734:	4603      	mov	r3, r0
 8006736:	b21b      	sxth	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	7422      	strb	r2, [r4, #16]
 800673c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006740:	7463      	strb	r3, [r4, #17]

   act->bitsPerPtrDiffT = sizeof(ptrdiff_t) * bitsPerMemUnit;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	009a      	lsls	r2, r3, #2
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	625a      	str	r2, [r3, #36]	; 0x24
   res->bitsPerPtrDiffT = runTest(act->bitsPerPtrDiffT, exp->bitsPerPtrDiffT);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006752:	687c      	ldr	r4, [r7, #4]
 8006754:	4619      	mov	r1, r3
 8006756:	4610      	mov	r0, r2
 8006758:	f7ff fe1c 	bl	8006394 <runTest>
 800675c:	4603      	mov	r3, r0
 800675e:	b21b      	sxth	r3, r3
 8006760:	461a      	mov	r2, r3
 8006762:	74a2      	strb	r2, [r4, #18]
 8006764:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006768:	74e3      	strb	r3, [r4, #19]
    *
    * According to the C standard, the value of uninitialized globals is set to
    * 0 by the compiler. This verifies that the value of the global int defined
    * at the top of the file is actually 0 as expected.
    */
   act->memoryAtStartup = aGlobalInt;
 800676a:	4b47      	ldr	r3, [pc, #284]	; (8006888 <caVerifyHWImpl+0x458>)
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	63da      	str	r2, [r3, #60]	; 0x3c
   if (act->memoryAtStartup != exp->memoryAtStartup){
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677a:	429a      	cmp	r2, r3
 800677c:	d00b      	beq.n	8006796 <caVerifyHWImpl+0x366>
       /* Warn if globals are not default initialized to 0. */
       res->memoryAtStartup = testWarn(CA_NO_MSG);
 800677e:	687c      	ldr	r4, [r7, #4]
 8006780:	2000      	movs	r0, #0
 8006782:	f7ff fdbf 	bl	8006304 <testWarn>
 8006786:	4603      	mov	r3, r0
 8006788:	b21b      	sxth	r3, r3
 800678a:	461a      	mov	r2, r3
 800678c:	7722      	strb	r2, [r4, #28]
 800678e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006792:	7763      	strb	r3, [r4, #29]
 8006794:	e00a      	b.n	80067ac <caVerifyHWImpl+0x37c>
   }
   else {
       res->memoryAtStartup = testPass(CA_NO_MSG);
 8006796:	687c      	ldr	r4, [r7, #4]
 8006798:	2000      	movs	r0, #0
 800679a:	f7ff fd83 	bl	80062a4 <testPass>
 800679e:	4603      	mov	r3, r0
 80067a0:	b21b      	sxth	r3, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	7722      	strb	r2, [r4, #28]
 80067a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80067aa:	7763      	strb	r3, [r4, #29]
#if CA_CHECK_FLOATING_POINT_ENABLED == 1
   /*-----------------------------------------------------------------------
    * Denormal floating points support tests.
    *
    */
   act->denormalFlushToZero = (realmin/2.0) == 0 ? (CA_OnOffValue)1 : (CA_OnOffValue)0;
 80067ac:	4b37      	ldr	r3, [pc, #220]	; (800688c <caVerifyHWImpl+0x45c>)
 80067ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80067b2:	f04f 0200 	mov.w	r2, #0
 80067b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067ba:	f7f9 ffef 	bl	800079c <__aeabi_ddiv>
 80067be:	4603      	mov	r3, r0
 80067c0:	460c      	mov	r4, r1
 80067c2:	4618      	mov	r0, r3
 80067c4:	4621      	mov	r1, r4
 80067c6:	f04f 0200 	mov.w	r2, #0
 80067ca:	f04f 0300 	mov.w	r3, #0
 80067ce:	f7fa f923 	bl	8000a18 <__aeabi_dcmpeq>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <caVerifyHWImpl+0x3ac>
 80067d8:	2201      	movs	r2, #1
 80067da:	e000      	b.n	80067de <caVerifyHWImpl+0x3ae>
 80067dc:	2200      	movs	r2, #0
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	641a      	str	r2, [r3, #64]	; 0x40
   if (act->denormalFlushToZero != exp->denormalFlushToZero){
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d00b      	beq.n	8006806 <caVerifyHWImpl+0x3d6>
       /* review if denormal results are flushed to zero */
       res->denormalFlushToZero = testReview(CA_NO_MSG);
 80067ee:	687c      	ldr	r4, [r7, #4]
 80067f0:	2000      	movs	r0, #0
 80067f2:	f7ff fdb7 	bl	8006364 <testReview>
 80067f6:	4603      	mov	r3, r0
 80067f8:	b21b      	sxth	r3, r3
 80067fa:	461a      	mov	r2, r3
 80067fc:	77a2      	strb	r2, [r4, #30]
 80067fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006802:	77e3      	strb	r3, [r4, #31]
 8006804:	e00a      	b.n	800681c <caVerifyHWImpl+0x3ec>
   }
   else {
       res->denormalFlushToZero = testPass(CA_NO_MSG);
 8006806:	687c      	ldr	r4, [r7, #4]
 8006808:	2000      	movs	r0, #0
 800680a:	f7ff fd4b 	bl	80062a4 <testPass>
 800680e:	4603      	mov	r3, r0
 8006810:	b21b      	sxth	r3, r3
 8006812:	461a      	mov	r2, r3
 8006814:	77a2      	strb	r2, [r4, #30]
 8006816:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800681a:	77e3      	strb	r3, [r4, #31]
   }
   
   act->denormalAsZero = denormalAsZero == 0 ? (CA_OnOffValue)1 : (CA_OnOffValue)0;
 800681c:	4b1c      	ldr	r3, [pc, #112]	; (8006890 <caVerifyHWImpl+0x460>)
 800681e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006822:	f04f 0200 	mov.w	r2, #0
 8006826:	f04f 0300 	mov.w	r3, #0
 800682a:	f7fa f8f5 	bl	8000a18 <__aeabi_dcmpeq>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <caVerifyHWImpl+0x408>
 8006834:	2201      	movs	r2, #1
 8006836:	e000      	b.n	800683a <caVerifyHWImpl+0x40a>
 8006838:	2200      	movs	r2, #0
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	645a      	str	r2, [r3, #68]	; 0x44
   if (act->denormalAsZero != exp->denormalAsZero) {
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006846:	429a      	cmp	r2, r3
 8006848:	d00d      	beq.n	8006866 <caVerifyHWImpl+0x436>
       /* review if denormal inputs are defaulted to zero */
       res->denormalAsZero = testReview(CA_NO_MSG);
 800684a:	687c      	ldr	r4, [r7, #4]
 800684c:	2000      	movs	r0, #0
 800684e:	f7ff fd89 	bl	8006364 <testReview>
 8006852:	4603      	mov	r3, r0
 8006854:	b21b      	sxth	r3, r3
 8006856:	461a      	mov	r2, r3
 8006858:	f884 2020 	strb.w	r2, [r4, #32]
 800685c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006860:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   }
#else
   res->denormalFlushToZero = testSkip(CA_NO_MSG);
   res->denormalAsZero = testSkip(CA_NO_MSG);
#endif
}
 8006864:	e00c      	b.n	8006880 <caVerifyHWImpl+0x450>
       res->denormalAsZero = testPass(CA_NO_MSG);
 8006866:	687c      	ldr	r4, [r7, #4]
 8006868:	2000      	movs	r0, #0
 800686a:	f7ff fd1b 	bl	80062a4 <testPass>
 800686e:	4603      	mov	r3, r0
 8006870:	b21b      	sxth	r3, r3
 8006872:	461a      	mov	r2, r3
 8006874:	f884 2020 	strb.w	r2, [r4, #32]
 8006878:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800687c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8006880:	bf00      	nop
 8006882:	371c      	adds	r7, #28
 8006884:	46bd      	mov	sp, r7
 8006886:	bd90      	pop	{r4, r7, pc}
 8006888:	20000418 	.word	0x20000418
 800688c:	20000018 	.word	0x20000018
 8006890:	20000010 	.word	0x20000010

08006894 <coderAssumpTgtAppSvcCreate>:
#include "CoderAssumpTgtAppSvc_CInterface.h"

/* coder assumptions buffer is statically allocated for rtiostream-based implementation */
static IOUnit_T coderAssumpWriteBuffer[CA_TX_BUFFER_MEMUNIT_SIZE];

extern uint8_T coderAssumpTgtAppSvcCreate(void) {
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
    return CODERASSUMPTGTAPPSVC_SUCCESS;
 8006898:	2301      	movs	r3, #1
}
 800689a:	4618      	mov	r0, r3
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <coderAssumpTgtAppSvcDestroy>:

extern void coderAssumpTgtAppSvcDestroy(void) {
 80068a4:	b480      	push	{r7}
 80068a6:	af00      	add	r7, sp, #0
}
 80068a8:	bf00      	nop
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
	...

080068b4 <coderAssumpTgtAppSvcAllocBuffer>:

/* Allocation method simply returns the statically allocated buffer */
extern uint8_T coderAssumpTgtAppSvcAllocBuffer(
        void** ppBuf,
        const uint16_T dataSize) {
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	807b      	strh	r3, [r7, #2]
    
    /* buffer is already statically allocated */
    *ppBuf = &coderAssumpWriteBuffer[APPLICATION_ID_IDX];
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a04      	ldr	r2, [pc, #16]	; (80068d4 <coderAssumpTgtAppSvcAllocBuffer+0x20>)
 80068c4:	601a      	str	r2, [r3, #0]
    
    UNUSED_PARAMETER(dataSize);
    
    /* nothing to do as buffer is already statically allocated */
    return CODERASSUMPTGTAPPSVC_SUCCESS;
 80068c6:	2301      	movs	r3, #1
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	200000c4 	.word	0x200000c4

080068d8 <coderAssumpTgtAppSvcGetBufferDataPtr>:

/* return pointer to the coder assumptions buffer data */
extern IOUnit_T * coderAssumpTgtAppSvcGetBufferDataPtr(
        void* const pBuf) {
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
    
    /* buffer is already statically allocated */
    UNUSED_PARAMETER(pBuf);
       
    return &coderAssumpWriteBuffer[PAYLOAD_IDX];
 80068e0:	4b03      	ldr	r3, [pc, #12]	; (80068f0 <coderAssumpTgtAppSvcGetBufferDataPtr+0x18>)
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	200000c9 	.word	0x200000c9

080068f4 <coderAssumpTgtAppSvcSend>:

/* send data over rtiostream */
extern uint8_T coderAssumpTgtAppSvcSend(
        void* const pBuf,        
        const uint16_T dataSize) {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	807b      	strh	r3, [r7, #2]
    
    return (uint8_T)commsEnqueueBuffer(pBuf, CODERASSUMP_RTIOSTREAM_BASED_SERVICE_ID, dataSize);
 8006900:	887b      	ldrh	r3, [r7, #2]
 8006902:	461a      	mov	r2, r3
 8006904:	2103      	movs	r1, #3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f001 fba2 	bl	8008050 <commsEnqueueBuffer>
 800690c:	4603      	mov	r3, r0
 800690e:	b2db      	uxtb	r3, r3
}
 8006910:	4618      	mov	r0, r3
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 8006918:	b590      	push	{r4, r7, lr}
 800691a:	b087      	sub	sp, #28
 800691c:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800691e:	2340      	movs	r3, #64	; 0x40
 8006920:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 8006922:	f04f 0300 	mov.w	r3, #0
 8006926:	f04f 0400 	mov.w	r4, #0
 800692a:	e9c7 3404 	strd	r3, r4, [r7, #16]
  if (bitsPerReal == 32U) {
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b20      	cmp	r3, #32
 8006932:	d10b      	bne.n	800694c <rtGetInf+0x34>
    inf = rtGetInfF();
 8006934:	f000 f820 	bl	8006978 <rtGetInfF>
 8006938:	ee10 3a10 	vmov	r3, s0
 800693c:	4618      	mov	r0, r3
 800693e:	f7f9 fdab 	bl	8000498 <__aeabi_f2d>
 8006942:	4603      	mov	r3, r0
 8006944:	460c      	mov	r4, r1
 8006946:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800694a:	e007      	b.n	800695c <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 800694c:	4b09      	ldr	r3, [pc, #36]	; (8006974 <rtGetInf+0x5c>)
 800694e:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8006950:	2300      	movs	r3, #0
 8006952:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 8006954:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006958:	e9c7 3404 	strd	r3, r4, [r7, #16]
  }

  return inf;
 800695c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006960:	ec44 3b17 	vmov	d7, r3, r4
}
 8006964:	eeb0 0a47 	vmov.f32	s0, s14
 8006968:	eef0 0a67 	vmov.f32	s1, s15
 800696c:	371c      	adds	r7, #28
 800696e:	46bd      	mov	sp, r7
 8006970:	bd90      	pop	{r4, r7, pc}
 8006972:	bf00      	nop
 8006974:	7ff00000 	.word	0x7ff00000

08006978 <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 800697e:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8006982:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	ee07 3a90 	vmov	s15, r3
}
 800698a:	eeb0 0a67 	vmov.f32	s0, s15
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 8006998:	b590      	push	{r4, r7, lr}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800699e:	2340      	movs	r3, #64	; 0x40
 80069a0:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 80069a2:	f04f 0300 	mov.w	r3, #0
 80069a6:	f04f 0400 	mov.w	r4, #0
 80069aa:	e9c7 3404 	strd	r3, r4, [r7, #16]
  if (bitsPerReal == 32U) {
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	d10b      	bne.n	80069cc <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 80069b4:	f000 f820 	bl	80069f8 <rtGetMinusInfF>
 80069b8:	ee10 3a10 	vmov	r3, s0
 80069bc:	4618      	mov	r0, r3
 80069be:	f7f9 fd6b 	bl	8000498 <__aeabi_f2d>
 80069c2:	4603      	mov	r3, r0
 80069c4:	460c      	mov	r4, r1
 80069c6:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80069ca:	e007      	b.n	80069dc <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 80069cc:	4b09      	ldr	r3, [pc, #36]	; (80069f4 <rtGetMinusInf+0x5c>)
 80069ce:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 80069d4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80069d8:	e9c7 3404 	strd	r3, r4, [r7, #16]
  }

  return minf;
 80069dc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80069e0:	ec44 3b17 	vmov	d7, r3, r4
}
 80069e4:	eeb0 0a47 	vmov.f32	s0, s14
 80069e8:	eef0 0a67 	vmov.f32	s1, s15
 80069ec:	371c      	adds	r7, #28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd90      	pop	{r4, r7, pc}
 80069f2:	bf00      	nop
 80069f4:	fff00000 	.word	0xfff00000

080069f8 <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 80069fe:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <rtGetMinusInfF+0x20>)
 8006a00:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	ee07 3a90 	vmov	s15, r3
}
 8006a08:	eeb0 0a67 	vmov.f32	s0, s15
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	ff800000 	.word	0xff800000

08006a1c <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 8006a1c:	b590      	push	{r4, r7, lr}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8006a22:	2340      	movs	r3, #64	; 0x40
 8006a24:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 8006a26:	f04f 0300 	mov.w	r3, #0
 8006a2a:	f04f 0400 	mov.w	r4, #0
 8006a2e:	e9c7 3404 	strd	r3, r4, [r7, #16]
  if (bitsPerReal == 32U) {
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	d10b      	bne.n	8006a50 <rtGetNaN+0x34>
    nan = rtGetNaNF();
 8006a38:	f000 f820 	bl	8006a7c <rtGetNaNF>
 8006a3c:	ee10 3a10 	vmov	r3, s0
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7f9 fd29 	bl	8000498 <__aeabi_f2d>
 8006a46:	4603      	mov	r3, r0
 8006a48:	460c      	mov	r4, r1
 8006a4a:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8006a4e:	e007      	b.n	8006a60 <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 8006a50:	4b09      	ldr	r3, [pc, #36]	; (8006a78 <rtGetNaN+0x5c>)
 8006a52:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 8006a58:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006a5c:	e9c7 3404 	strd	r3, r4, [r7, #16]
  }

  return nan;
 8006a60:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006a64:	ec44 3b17 	vmov	d7, r3, r4
}
 8006a68:	eeb0 0a47 	vmov.f32	s0, s14
 8006a6c:	eef0 0a67 	vmov.f32	s1, s15
 8006a70:	371c      	adds	r7, #28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd90      	pop	{r4, r7, pc}
 8006a76:	bf00      	nop
 8006a78:	fff80000 	.word	0xfff80000

08006a7c <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0 } };
 8006a82:	f04f 0300 	mov.w	r3, #0
 8006a86:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 8006a88:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <rtGetNaNF+0x24>)
 8006a8a:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	ee07 3a90 	vmov	s15, r3
}
 8006a92:	eeb0 0a67 	vmov.f32	s0, s15
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	ffc00000 	.word	0xffc00000

08006aa4 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 8006aac:	f7ff ffb6 	bl	8006a1c <rtGetNaN>
 8006ab0:	eeb0 7a40 	vmov.f32	s14, s0
 8006ab4:	eef0 7a60 	vmov.f32	s15, s1
 8006ab8:	4b16      	ldr	r3, [pc, #88]	; (8006b14 <rt_InitInfAndNaN+0x70>)
 8006aba:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 8006abe:	f7ff ffdd 	bl	8006a7c <rtGetNaNF>
 8006ac2:	eef0 7a40 	vmov.f32	s15, s0
 8006ac6:	4b14      	ldr	r3, [pc, #80]	; (8006b18 <rt_InitInfAndNaN+0x74>)
 8006ac8:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 8006acc:	f7ff ff24 	bl	8006918 <rtGetInf>
 8006ad0:	eeb0 7a40 	vmov.f32	s14, s0
 8006ad4:	eef0 7a60 	vmov.f32	s15, s1
 8006ad8:	4b10      	ldr	r3, [pc, #64]	; (8006b1c <rt_InitInfAndNaN+0x78>)
 8006ada:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 8006ade:	f7ff ff4b 	bl	8006978 <rtGetInfF>
 8006ae2:	eef0 7a40 	vmov.f32	s15, s0
 8006ae6:	4b0e      	ldr	r3, [pc, #56]	; (8006b20 <rt_InitInfAndNaN+0x7c>)
 8006ae8:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 8006aec:	f7ff ff54 	bl	8006998 <rtGetMinusInf>
 8006af0:	eeb0 7a40 	vmov.f32	s14, s0
 8006af4:	eef0 7a60 	vmov.f32	s15, s1
 8006af8:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <rt_InitInfAndNaN+0x80>)
 8006afa:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 8006afe:	f7ff ff7b 	bl	80069f8 <rtGetMinusInfF>
 8006b02:	eef0 7a40 	vmov.f32	s15, s0
 8006b06:	4b08      	ldr	r3, [pc, #32]	; (8006b28 <rt_InitInfAndNaN+0x84>)
 8006b08:	edc3 7a00 	vstr	s15, [r3]
}
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	20000430 	.word	0x20000430
 8006b18:	20000420 	.word	0x20000420
 8006b1c:	20000428 	.word	0x20000428
 8006b20:	20000424 	.word	0x20000424
 8006b24:	20000438 	.word	0x20000438
 8006b28:	20000440 	.word	0x20000440

08006b2c <rtIsInf>:

/* Test if value is infinite */
boolean_T rtIsInf(real_T value)
{
 8006b2c:	b590      	push	{r4, r7, lr}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 8006b36:	4b0f      	ldr	r3, [pc, #60]	; (8006b74 <rtIsInf+0x48>)
 8006b38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	4623      	mov	r3, r4
 8006b40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b44:	f7f9 ff68 	bl	8000a18 <__aeabi_dcmpeq>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10b      	bne.n	8006b66 <rtIsInf+0x3a>
 8006b4e:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <rtIsInf+0x4c>)
 8006b50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b54:	461a      	mov	r2, r3
 8006b56:	4623      	mov	r3, r4
 8006b58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b5c:	f7f9 ff5c 	bl	8000a18 <__aeabi_dcmpeq>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <rtIsInf+0x3e>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e000      	b.n	8006b6c <rtIsInf+0x40>
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd90      	pop	{r4, r7, pc}
 8006b74:	20000428 	.word	0x20000428
 8006b78:	20000438 	.word	0x20000438

08006b7c <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
boolean_T rtIsNaN(real_T value)
{
 8006b7c:	b590      	push	{r4, r7, lr}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	ed87 0b00 	vstr	d0, [r7]
  boolean_T result = (boolean_T) 0;
 8006b86:	2300      	movs	r3, #0
 8006b88:	75fb      	strb	r3, [r7, #23]
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8006b8a:	2340      	movs	r3, #64	; 0x40
 8006b8c:	613b      	str	r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d10b      	bne.n	8006bac <rtIsNaN+0x30>
    result = rtIsNaNF((real32_T)value);
 8006b94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b98:	f7f9 ffae 	bl	8000af8 <__aeabi_d2f>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	ee00 3a10 	vmov	s0, r3
 8006ba2:	f000 f821 	bl	8006be8 <rtIsNaNF>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	75fb      	strb	r3, [r7, #23]
 8006baa:	e015      	b.n	8006bd8 <rtIsNaN+0x5c>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.fltVal = value;
 8006bac:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006bb0:	e9c7 3402 	strd	r3, r4, [r7, #8]
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <rtIsNaN+0x68>)
 8006bb8:	4013      	ands	r3, r2
 8006bba:	4a0a      	ldr	r2, [pc, #40]	; (8006be4 <rtIsNaN+0x68>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d109      	bne.n	8006bd4 <rtIsNaN+0x58>
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d102      	bne.n	8006bd0 <rtIsNaN+0x54>
                          (tmpVal.bitVal.words.wordL != 0) ));
 8006bca:	68bb      	ldr	r3, [r7, #8]
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d001      	beq.n	8006bd4 <rtIsNaN+0x58>
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e000      	b.n	8006bd6 <rtIsNaN+0x5a>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8006bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	371c      	adds	r7, #28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd90      	pop	{r4, r7, pc}
 8006be2:	bf00      	nop
 8006be4:	7ff00000 	.word	0x7ff00000

08006be8 <rtIsNaNF>:

/* Test if single-precision value is not a number */
boolean_T rtIsNaNF(real32_T value)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 8006bfc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006c00:	d106      	bne.n	8006c10 <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <rtIsNaNF+0x28>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e000      	b.n	8006c12 <rtIsNaNF+0x2a>
 8006c10:	2300      	movs	r3, #0
 8006c12:	b2db      	uxtb	r3, r3
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <rtIOStreamBlockingSend>:
#endif

/* Blocks until all requested outgoing data is sent */
int rtIOStreamBlockingSend(const int streamID, 
                           const void * const src, 
                           uint32_T size) {
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08a      	sub	sp, #40	; 0x28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]

    size_t transferAmount;
    size_t sizeSent;
    int errorCode      = RTIOSTREAM_NO_ERROR;   
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	627b      	str	r3, [r7, #36]	; 0x24
    const IOUnit_T * srcPtr = (const IOUnit_T *) src;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	623b      	str	r3, [r7, #32]
    
    /* use a variable to avoid SIZE_MAX being treated as a constant
     * which leads to compiler warnings for "MIN" on platforms where
     * SIZE_MAX > UINT32_MAX */
    size_t sizeMax = SIZE_MAX;
 8006c34:	f04f 33ff 	mov.w	r3, #4294967295
 8006c38:	61fb      	str	r3, [r7, #28]
    while (size > 0) {
 8006c3a:	e01b      	b.n	8006c74 <rtIOStreamBlockingSend+0x54>
        /* support full uint32 size */
        transferAmount = (size_t) MIN(sizeMax, size);        
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	4293      	cmp	r3, r2
 8006c42:	bf28      	it	cs
 8006c44:	4613      	movcs	r3, r2
 8006c46:	61bb      	str	r3, [r7, #24]
        errorCode = rtIOStreamSend(streamID,
 8006c48:	f107 0314 	add.w	r3, r7, #20
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	6a39      	ldr	r1, [r7, #32]
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f7fe fd29 	bl	80056a8 <rtIOStreamSend>
 8006c56:	6278      	str	r0, [r7, #36]	; 0x24
                                   (const void *) srcPtr,
                                   transferAmount,
                                   &sizeSent);
        if (errorCode == RTIOSTREAM_ERROR) {
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5e:	d101      	bne.n	8006c64 <rtIOStreamBlockingSend+0x44>
            return errorCode;
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	e00b      	b.n	8006c7c <rtIOStreamBlockingSend+0x5c>
        }
        else {            
            size -= (uint32_T) sizeSent;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	607b      	str	r3, [r7, #4]
            srcPtr += sizeSent;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	6a3a      	ldr	r2, [r7, #32]
 8006c70:	4413      	add	r3, r2
 8006c72:	623b      	str	r3, [r7, #32]
    while (size > 0) {
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e0      	bne.n	8006c3c <rtIOStreamBlockingSend+0x1c>
        }
    }
    return errorCode;
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3728      	adds	r7, #40	; 0x28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <rtIOStreamBlockingRecv>:

/* Blocks until all requested incoming data is received */
int rtIOStreamBlockingRecv(const int streamID,
                           void * const dst,
                           uint32_T size) {
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b08a      	sub	sp, #40	; 0x28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]

   size_t transferAmount;
   size_t sizeRecvd;
   int errorCode      = RTIOSTREAM_NO_ERROR;
 8006c90:	2300      	movs	r3, #0
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
   IOUnit_T * dstPtr = (IOUnit_T *) dst;
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	623b      	str	r3, [r7, #32]
   
   /* use a variable to avoid SIZE_MAX being treated as a constant
    * which leads to compiler warnings for "MIN" on platforms where 
    * SIZE_MAX > UINT32_MAX */
   size_t sizeMax = SIZE_MAX;
 8006c98:	f04f 33ff 	mov.w	r3, #4294967295
 8006c9c:	61fb      	str	r3, [r7, #28]
   while (size > 0) {
 8006c9e:	e01b      	b.n	8006cd8 <rtIOStreamBlockingRecv+0x54>
      /* support full uint32 size */
      transferAmount = (size_t) MIN(sizeMax, size);      
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	bf28      	it	cs
 8006ca8:	4613      	movcs	r3, r2
 8006caa:	61bb      	str	r3, [r7, #24]
      errorCode = rtIOStreamRecv(streamID, 
 8006cac:	f107 0314 	add.w	r3, r7, #20
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	6a39      	ldr	r1, [r7, #32]
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f7fe fd1b 	bl	80056f0 <rtIOStreamRecv>
 8006cba:	6278      	str	r0, [r7, #36]	; 0x24
                                 (void *) dstPtr, 
                                 transferAmount, 
                                 &sizeRecvd);
      if (errorCode == RTIOSTREAM_ERROR) {
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc2:	d101      	bne.n	8006cc8 <rtIOStreamBlockingRecv+0x44>
            return errorCode;
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	e00b      	b.n	8006ce0 <rtIOStreamBlockingRecv+0x5c>
      }
      else {          
         size -= (uint32_T) sizeRecvd;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	607b      	str	r3, [r7, #4]
         dstPtr += sizeRecvd;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	6a3a      	ldr	r2, [r7, #32]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	623b      	str	r3, [r7, #32]
   while (size > 0) {
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1e0      	bne.n	8006ca0 <rtIOStreamBlockingRecv+0x1c>
      }
   }
   return errorCode;
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3728      	adds	r7, #40	; 0x28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <resetXILWriteBuffer>:
static IOUnit_T* xilWriteDataPtr;
static uint16_T xilWriteDataAvail;
static MemUnit_T* commandResponseType;

/* reset the write buffer */
XIL_INTERFACE_LIB_ERROR_CODE resetXILWriteBuffer(void) {
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	af00      	add	r7, sp, #0
    
    /* Ask the CS to allocate a buffer that the XIL app service will use for
     * transmission
     */
    if (!xilTgtAppSvcAllocBuffer(&pBuffer, XIL_TX_BUFFER_MEMUNIT_SIZE)) {
 8006cec:	2180      	movs	r1, #128	; 0x80
 8006cee:	4811      	ldr	r0, [pc, #68]	; (8006d34 <resetXILWriteBuffer+0x4c>)
 8006cf0:	f001 f922 	bl	8007f38 <xilTgtAppSvcAllocBuffer>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <resetXILWriteBuffer+0x16>
        return XIL_INTERFACE_LIB_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e018      	b.n	8006d30 <resetXILWriteBuffer+0x48>
    }
    xilWriteBuffer = xilTgtAppSvcGetBufferDataPtr(pBuffer);
 8006cfe:	4b0d      	ldr	r3, [pc, #52]	; (8006d34 <resetXILWriteBuffer+0x4c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f001 f92a 	bl	8007f5c <xilTgtAppSvcGetBufferDataPtr>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <resetXILWriteBuffer+0x50>)
 8006d0c:	601a      	str	r2, [r3, #0]
    
    /* set commandResponseType and xilWriteDataPtr pointer */
    commandResponseType = (MemUnit_T *) &xilWriteBuffer[COMMAND_COMPLETE_IDX];
 8006d0e:	4b0a      	ldr	r3, [pc, #40]	; (8006d38 <resetXILWriteBuffer+0x50>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a0a      	ldr	r2, [pc, #40]	; (8006d3c <resetXILWriteBuffer+0x54>)
 8006d14:	6013      	str	r3, [r2, #0]
    xilWriteDataPtr = &xilWriteBuffer[WRITE_DATA_BUFFER_IDX];
 8006d16:	4b08      	ldr	r3, [pc, #32]	; (8006d38 <resetXILWriteBuffer+0x50>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	4a08      	ldr	r2, [pc, #32]	; (8006d40 <resetXILWriteBuffer+0x58>)
 8006d1e:	6013      	str	r3, [r2, #0]
    
    /* ready for next command */
    xilWriteDataAvail = 0;
 8006d20:	4b08      	ldr	r3, [pc, #32]	; (8006d44 <resetXILWriteBuffer+0x5c>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	801a      	strh	r2, [r3, #0]
    *commandResponseType = XIL_COMMAND_NOT_COMPLETE;
 8006d26:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <resetXILWriteBuffer+0x54>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	701a      	strb	r2, [r3, #0]
    
    return XIL_INTERFACE_LIB_SUCCESS;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	200000e4 	.word	0x200000e4
 8006d38:	200000e8 	.word	0x200000e8
 8006d3c:	200000f4 	.word	0x200000f4
 8006d40:	200000ec 	.word	0x200000ec
 8006d44:	200000f0 	.word	0x200000f0

08006d48 <silpilInit>:

XIL_INTERFACE_LIB_ERROR_CODE silpilInit(void) {
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	af00      	add	r7, sp, #0
    
    /* Create XIL service */
    if (xilTgtAppSvcCreate() != XILTGTAPPSVC_SUCCESS) {
 8006d4c:	f001 f8e4 	bl	8007f18 <xilTgtAppSvcCreate>
 8006d50:	4603      	mov	r3, r0
 8006d52:	461a      	mov	r2, r3
 8006d54:	2301      	movs	r3, #1
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d001      	beq.n	8006d5e <silpilInit+0x16>
        return XIL_INTERFACE_LIB_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e002      	b.n	8006d64 <silpilInit+0x1c>
    }
    
    /* Reset write buffer */
    return resetXILWriteBuffer();
 8006d5e:	f7ff ffc3 	bl	8006ce8 <resetXILWriteBuffer>
 8006d62:	4603      	mov	r3, r0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <sendWriteBuffer>:

/* send pending writes */
static XIL_DATA_STREAM_ERROR_CODE sendWriteBuffer(void) {
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	af00      	add	r7, sp, #0
       
    if (xilTgtAppSvcSend(pBuffer, USED_WRITE_BUFFER_SIZE) == XILTGTAPPSVC_ERROR) {
 8006d6c:	4b0d      	ldr	r3, [pc, #52]	; (8006da4 <sendWriteBuffer+0x3c>)
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	4b0d      	ldr	r3, [pc, #52]	; (8006da8 <sendWriteBuffer+0x40>)
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	3301      	adds	r3, #1
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	f001 f8fc 	bl	8007f78 <xilTgtAppSvcSend>
 8006d80:	4603      	mov	r3, r0
 8006d82:	461a      	mov	r2, r3
 8006d84:	2300      	movs	r3, #0
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d101      	bne.n	8006d8e <sendWriteBuffer+0x26>
        return XIL_DATA_FLUSH_ERROR;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e007      	b.n	8006d9e <sendWriteBuffer+0x36>
    }
    
   /* reset */
   if (resetXILWriteBuffer()!= XIL_INTERFACE_LIB_SUCCESS) {
 8006d8e:	f7ff ffab 	bl	8006ce8 <resetXILWriteBuffer>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <sendWriteBuffer+0x34>
	   return XIL_DATA_FLUSH_ERROR;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e000      	b.n	8006d9e <sendWriteBuffer+0x36>
   }
   
   return XIL_DATA_STREAM_SUCCESS;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	200000e4 	.word	0x200000e4
 8006da8:	200000f0 	.word	0x200000f0

08006dac <xilWriteData>:

XIL_DATA_STREAM_ERROR_CODE xilWriteData(const MemUnit_T * src, uint32_T size) {
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
   XIL_DATA_STREAM_ERROR_CODE errorCode = XIL_DATA_STREAM_SUCCESS;
 8006db6:	2300      	movs	r3, #0
 8006db8:	75fb      	strb	r3, [r7, #23]
   const IOUnit_T * srcPtr = (const IOUnit_T *) src;   
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	613b      	str	r3, [r7, #16]
   size_t transferAmount;
   uint16_T bufferAvail;
  
   /* block until all data is processed */
   while (size > 0) {      
 8006dbe:	e037      	b.n	8006e30 <xilWriteData+0x84>
      /* send if we have a full message worth of data */   
      if (xilWriteDataAvail == WRITE_BUFFER_SIZE) {
 8006dc0:	4b1f      	ldr	r3, [pc, #124]	; (8006e40 <xilWriteData+0x94>)
 8006dc2:	881b      	ldrh	r3, [r3, #0]
 8006dc4:	2b7a      	cmp	r3, #122	; 0x7a
 8006dc6:	d108      	bne.n	8006dda <xilWriteData+0x2e>
         errorCode = sendWriteBuffer();
 8006dc8:	f7ff ffce 	bl	8006d68 <sendWriteBuffer>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	75fb      	strb	r3, [r7, #23]
         if (errorCode != XIL_DATA_STREAM_SUCCESS) {
 8006dd0:	7dfb      	ldrb	r3, [r7, #23]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <xilWriteData+0x2e>
            return errorCode;
 8006dd6:	7dfb      	ldrb	r3, [r7, #23]
 8006dd8:	e02e      	b.n	8006e38 <xilWriteData+0x8c>
         }
      }
      bufferAvail = WRITE_BUFFER_SIZE - xilWriteDataAvail;
 8006dda:	4b19      	ldr	r3, [pc, #100]	; (8006e40 <xilWriteData+0x94>)
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	f1c3 037a 	rsb	r3, r3, #122	; 0x7a
 8006de2:	81fb      	strh	r3, [r7, #14]
      transferAmount = (uint16_T) MIN(bufferAvail, size);
 8006de4:	89fb      	ldrh	r3, [r7, #14]
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d802      	bhi.n	8006df2 <xilWriteData+0x46>
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	e000      	b.n	8006df4 <xilWriteData+0x48>
 8006df2:	89fb      	ldrh	r3, [r7, #14]
 8006df4:	60bb      	str	r3, [r7, #8]
      /* copy data into write buffer */
      memcpy((void *) xilWriteDataPtr, srcPtr, transferAmount);
 8006df6:	4b13      	ldr	r3, [pc, #76]	; (8006e44 <xilWriteData+0x98>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	6939      	ldr	r1, [r7, #16]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f001 f9c2 	bl	8008188 <memcpy>
      size -= (uint32_T) transferAmount;
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	603b      	str	r3, [r7, #0]
      xilWriteDataAvail += (uint16_T) transferAmount;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	4b0b      	ldr	r3, [pc, #44]	; (8006e40 <xilWriteData+0x94>)
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	4413      	add	r3, r2
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	4b09      	ldr	r3, [pc, #36]	; (8006e40 <xilWriteData+0x94>)
 8006e1a:	801a      	strh	r2, [r3, #0]
      srcPtr += transferAmount;
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	4413      	add	r3, r2
 8006e22:	613b      	str	r3, [r7, #16]
      xilWriteDataPtr += transferAmount;
 8006e24:	4b07      	ldr	r3, [pc, #28]	; (8006e44 <xilWriteData+0x98>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	4a05      	ldr	r2, [pc, #20]	; (8006e44 <xilWriteData+0x98>)
 8006e2e:	6013      	str	r3, [r2, #0]
   while (size > 0) {      
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1c4      	bne.n	8006dc0 <xilWriteData+0x14>
   }
   return errorCode;
 8006e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3718      	adds	r7, #24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	200000f0 	.word	0x200000f0
 8006e44:	200000ec 	.word	0x200000ec

08006e48 <xilReadData>:

XIL_DATA_STREAM_ERROR_CODE xilReadData(MemUnit_T * dst, uint32_T size) {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]

    XIL_DATA_STREAM_ERROR_CODE errorCode = XIL_DATA_STREAM_SUCCESS;
 8006e52:	2300      	movs	r3, #0
 8006e54:	76fb      	strb	r3, [r7, #27]
     
    static IOUnit_T* currentBufferPosition = NULL;
    static uint16_T currentBufSize = 0;
    uint16_T readAmount;
    int32_T index = 0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	61fb      	str	r3, [r7, #28]
    int rtIOStreamErrorStatus;
    IOUnit_T * dstPtr = (IOUnit_T *) dst;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	617b      	str	r3, [r7, #20]

    while (size > 0)
 8006e5e:	e03d      	b.n	8006edc <xilReadData+0x94>
    {
        if (currentBufSize > 0) {
 8006e60:	4b22      	ldr	r3, [pc, #136]	; (8006eec <xilReadData+0xa4>)
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d02e      	beq.n	8006ec6 <xilReadData+0x7e>

            readAmount = (uint16_T) MIN(currentBufSize, size);
 8006e68:	4b20      	ldr	r3, [pc, #128]	; (8006eec <xilReadData+0xa4>)
 8006e6a:	881b      	ldrh	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d802      	bhi.n	8006e7a <xilReadData+0x32>
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	e001      	b.n	8006e7e <xilReadData+0x36>
 8006e7a:	4b1c      	ldr	r3, [pc, #112]	; (8006eec <xilReadData+0xa4>)
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	827b      	strh	r3, [r7, #18]
            memcpy(dstPtr+index, currentBufferPosition, (size_t)readAmount);
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	18d0      	adds	r0, r2, r3
 8006e86:	4b1a      	ldr	r3, [pc, #104]	; (8006ef0 <xilReadData+0xa8>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	8a7a      	ldrh	r2, [r7, #18]
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	f001 f97b 	bl	8008188 <memcpy>

            currentBufSize -= readAmount;
 8006e92:	4b16      	ldr	r3, [pc, #88]	; (8006eec <xilReadData+0xa4>)
 8006e94:	881a      	ldrh	r2, [r3, #0]
 8006e96:	8a7b      	ldrh	r3, [r7, #18]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	4b13      	ldr	r3, [pc, #76]	; (8006eec <xilReadData+0xa4>)
 8006e9e:	801a      	strh	r2, [r3, #0]
            currentBufferPosition +=readAmount;
 8006ea0:	4b13      	ldr	r3, [pc, #76]	; (8006ef0 <xilReadData+0xa8>)
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	8a7b      	ldrh	r3, [r7, #18]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	4a11      	ldr	r2, [pc, #68]	; (8006ef0 <xilReadData+0xa8>)
 8006eaa:	6013      	str	r3, [r2, #0]
            size -= (uint32_T)readAmount;
 8006eac:	8a7b      	ldrh	r3, [r7, #18]
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	603b      	str	r3, [r7, #0]

            if (size == 0) {
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <xilReadData+0x76>
                /* If we've satisfied the data request we're done, return */
                return errorCode;
 8006eba:	7efb      	ldrb	r3, [r7, #27]
 8006ebc:	e012      	b.n	8006ee4 <xilReadData+0x9c>
            }

            /*Buffer empty and more data needed get new data*/
            index += (int32_T)readAmount;
 8006ebe:	8a7b      	ldrh	r3, [r7, #18]
 8006ec0:	69fa      	ldr	r2, [r7, #28]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	61fb      	str	r3, [r7, #28]
            /*Setup buffer position and size from message data*/
            currentBufSize = tmpSize;
            currentBufferPosition = (IOUnit_T *)tmpData;
        }
#else
        rtIOStreamErrorStatus = rtiostreamReadMessage(&currentBufferPosition, &currentBufSize);
 8006ec6:	4909      	ldr	r1, [pc, #36]	; (8006eec <xilReadData+0xa4>)
 8006ec8:	4809      	ldr	r0, [pc, #36]	; (8006ef0 <xilReadData+0xa8>)
 8006eca:	f001 f8f5 	bl	80080b8 <rtiostreamReadMessage>
 8006ece:	60f8      	str	r0, [r7, #12]

        if (rtIOStreamErrorStatus == RTIOSTREAM_ERROR)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed6:	d101      	bne.n	8006edc <xilReadData+0x94>
	    	return XIL_READ_DATA_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e003      	b.n	8006ee4 <xilReadData+0x9c>
    while (size > 0)
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1be      	bne.n	8006e60 <xilReadData+0x18>

    
#endif
    }

    return errorCode;
 8006ee2:	7efb      	ldrb	r3, [r7, #27]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3720      	adds	r7, #32
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	200000f8 	.word	0x200000f8
 8006ef0:	200000fc 	.word	0x200000fc

08006ef4 <xilDataFlush>:



XIL_DATA_STREAM_ERROR_CODE xilDataFlush(MemUnit_T isEndOfXILStep) {
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	4603      	mov	r3, r0
 8006efc:	71fb      	strb	r3, [r7, #7]
    
    /* final part of command */
    if (isEndOfXILStep) {
 8006efe:	79fb      	ldrb	r3, [r7, #7]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d004      	beq.n	8006f0e <xilDataFlush+0x1a>
        *commandResponseType = XIL_STEP_COMPLETE;
 8006f04:	4b0a      	ldr	r3, [pc, #40]	; (8006f30 <xilDataFlush+0x3c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2202      	movs	r2, #2
 8006f0a:	701a      	strb	r2, [r3, #0]
 8006f0c:	e003      	b.n	8006f16 <xilDataFlush+0x22>
    } else {
        *commandResponseType = XIL_COMMAND_COMPLETE;
 8006f0e:	4b08      	ldr	r3, [pc, #32]	; (8006f30 <xilDataFlush+0x3c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2201      	movs	r2, #1
 8006f14:	701a      	strb	r2, [r3, #0]
    }

    /* send the write buffer */
    if (sendWriteBuffer() == XIL_DATA_FLUSH_ERROR){
 8006f16:	f7ff ff27 	bl	8006d68 <sendWriteBuffer>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d101      	bne.n	8006f24 <xilDataFlush+0x30>
        return XIL_DATA_FLUSH_ERROR;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e000      	b.n	8006f26 <xilDataFlush+0x32>
    }
    
    return XIL_DATA_STREAM_SUCCESS;
 8006f24:	2300      	movs	r3, #0

}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	200000f4 	.word	0x200000f4

08006f34 <silpilTerminate>:

void silpilTerminate(void) {
 8006f34:	b580      	push	{r7, lr}
 8006f36:	af00      	add	r7, sp, #0
    xilTgtAppSvcDestroy();
 8006f38:	f000 fff6 	bl	8007f28 <xilTgtAppSvcDestroy>
}
 8006f3c:	bf00      	nop
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <xilProcessParams>:
static XILIOData xil_fcnid0_task1_y[4];
static XILIOData xil_fcnid0_init_y[4];

/* In-the-Loop Interface functions - see xil_interface.h */
XIL_INTERFACE_ERROR_CODE xilProcessParams(uint32_T xilFcnId)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  /* Single In-the-Loop Component */
  if (xilFcnId != 0) {
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <xilProcessParams+0x12>
    return XIL_INTERFACE_UNKNOWN_FCNID;
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e000      	b.n	8006f54 <xilProcessParams+0x14>
  }

  return XIL_INTERFACE_SUCCESS;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <xilGetDataTypeInfo>:

XIL_INTERFACE_ERROR_CODE xilGetDataTypeInfo(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
  {
    /* send response id code */
    MemUnit_T memUnitData = XIL_RESPONSE_TYPE_SIZE;
 8006f66:	2306      	movs	r3, #6
 8006f68:	71fb      	strb	r3, [r7, #7]
    if (xilWriteData(&memUnitData, sizeof(memUnitData)) !=
 8006f6a:	1dfb      	adds	r3, r7, #7
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7ff ff1c 	bl	8006dac <xilWriteData>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <xilGetDataTypeInfo+0x1e>
        XIL_DATA_STREAM_SUCCESS) {
      return XIL_INTERFACE_COMMS_FAILURE;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e01a      	b.n	8006fb4 <xilGetDataTypeInfo+0x54>
    }

    /* send type id */
    memUnitData = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	71fb      	strb	r3, [r7, #7]
    if (xilWriteData(&memUnitData, sizeof(memUnitData)) !=
 8006f82:	1dfb      	adds	r3, r7, #7
 8006f84:	2101      	movs	r1, #1
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7ff ff10 	bl	8006dac <xilWriteData>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <xilGetDataTypeInfo+0x36>
        XIL_DATA_STREAM_SUCCESS) {
      return XIL_INTERFACE_COMMS_FAILURE;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e00e      	b.n	8006fb4 <xilGetDataTypeInfo+0x54>
#ifndef PIL_DOUBLE_SIZE
#define PIL_DOUBLE_SIZE                sizeof(double)
#endif

    /* send size in bytes */
    memUnitData = (MemUnit_T) PIL_DOUBLE_SIZE;
 8006f96:	2308      	movs	r3, #8
 8006f98:	71fb      	strb	r3, [r7, #7]

#ifndef HOST_WORD_ADDRESSABLE_TESTING

    /* convert MemUnits to bytes */
    memUnitData *= MEM_UNIT_BYTES;
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
 8006f9c:	71fb      	strb	r3, [r7, #7]

#endif

    if (xilWriteData(&memUnitData, sizeof(memUnitData)) !=
 8006f9e:	1dfb      	adds	r3, r7, #7
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7ff ff02 	bl	8006dac <xilWriteData>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <xilGetDataTypeInfo+0x52>
        XIL_DATA_STREAM_SUCCESS) {
      return XIL_INTERFACE_COMMS_FAILURE;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e000      	b.n	8006fb4 <xilGetDataTypeInfo+0x54>
    }
  }

  return XIL_INTERFACE_SUCCESS;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <xilInitialize>:

XIL_INTERFACE_ERROR_CODE xilInitialize(uint32_T xilFcnId)
{
 8006fbc:	b590      	push	{r4, r7, lr}
 8006fbe:	b08b      	sub	sp, #44	; 0x2c
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  XIL_INTERFACE_ERROR_CODE errorCode = XIL_INTERFACE_SUCCESS;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* initialize output storage owned by In-the-Loop */
  /* Call all Get class methods */
  {
    {
      uint32_T xilLinearIdx = 0;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	623b      	str	r3, [r7, #32]
      uint32_T elementIdx_0;
      for (elementIdx_0 = 0; elementIdx_0 < 4; elementIdx_0++) {
 8006fce:	2300      	movs	r3, #0
 8006fd0:	61fb      	str	r3, [r7, #28]
 8006fd2:	e00f      	b.n	8006ff4 <xilInitialize+0x38>
        o_E[elementIdx_0] = 0;
 8006fd4:	4a2b      	ldr	r2, [pc, #172]	; (8007084 <xilInitialize+0xc8>)
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	00db      	lsls	r3, r3, #3
 8006fda:	441a      	add	r2, r3
 8006fdc:	f04f 0300 	mov.w	r3, #0
 8006fe0:	f04f 0400 	mov.w	r4, #0
 8006fe4:	e9c2 3400 	strd	r3, r4, [r2]
        xilLinearIdx++;
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	3301      	adds	r3, #1
 8006fec:	623b      	str	r3, [r7, #32]
      for (elementIdx_0 = 0; elementIdx_0 < 4; elementIdx_0++) {
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	61fb      	str	r3, [r7, #28]
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	2b03      	cmp	r3, #3
 8006ff8:	d9ec      	bls.n	8006fd4 <xilInitialize+0x18>
    }
  }

  {
    {
      uint32_T xilLinearIdx = 0;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	61bb      	str	r3, [r7, #24]
      uint32_T elementIdx_0;
      for (elementIdx_0 = 0; elementIdx_0 < 8; elementIdx_0++) {
 8006ffe:	2300      	movs	r3, #0
 8007000:	617b      	str	r3, [r7, #20]
 8007002:	e00f      	b.n	8007024 <xilInitialize+0x68>
        o_F[elementIdx_0] = 0;
 8007004:	4a20      	ldr	r2, [pc, #128]	; (8007088 <xilInitialize+0xcc>)
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	00db      	lsls	r3, r3, #3
 800700a:	441a      	add	r2, r3
 800700c:	f04f 0300 	mov.w	r3, #0
 8007010:	f04f 0400 	mov.w	r4, #0
 8007014:	e9c2 3400 	strd	r3, r4, [r2]
        xilLinearIdx++;
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	3301      	adds	r3, #1
 800701c:	61bb      	str	r3, [r7, #24]
      for (elementIdx_0 = 0; elementIdx_0 < 8; elementIdx_0++) {
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	3301      	adds	r3, #1
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	2b07      	cmp	r3, #7
 8007028:	d9ec      	bls.n	8007004 <xilInitialize+0x48>
    }
  }

  {
    {
      uint32_T xilLinearIdx = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	613b      	str	r3, [r7, #16]
      uint32_T elementIdx_0;
      for (elementIdx_0 = 0; elementIdx_0 < 2; elementIdx_0++) {
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	e00f      	b.n	8007054 <xilInitialize+0x98>
        o_G[elementIdx_0] = 0;
 8007034:	4a15      	ldr	r2, [pc, #84]	; (800708c <xilInitialize+0xd0>)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	00db      	lsls	r3, r3, #3
 800703a:	441a      	add	r2, r3
 800703c:	f04f 0300 	mov.w	r3, #0
 8007040:	f04f 0400 	mov.w	r4, #0
 8007044:	e9c2 3400 	strd	r3, r4, [r2]
        xilLinearIdx++;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	3301      	adds	r3, #1
 800704c:	613b      	str	r3, [r7, #16]
      for (elementIdx_0 = 0; elementIdx_0 < 2; elementIdx_0++) {
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3301      	adds	r3, #1
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d9ec      	bls.n	8007034 <xilInitialize+0x78>
      }                                /* for */
    }
  }

  /* Single In-the-Loop Component */
  if (xilFcnId == 0) {
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d108      	bne.n	8007072 <xilInitialize+0xb6>
    Model_for_PIL_initialize(rt_errorStatus, RTModel_ptr);
 8007060:	4b0b      	ldr	r3, [pc, #44]	; (8007090 <xilInitialize+0xd4>)
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <xilInitialize+0xd8>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4619      	mov	r1, r3
 800706a:	4610      	mov	r0, r2
 800706c:	f7fe fac8 	bl	8005600 <Model_for_PIL_initialize>
 8007070:	e002      	b.n	8007078 <xilInitialize+0xbc>
  } else {
    errorCode = XIL_INTERFACE_UNKNOWN_FCNID;
 8007072:	2302      	movs	r3, #2
 8007074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return errorCode;
 8007078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800707c:	4618      	mov	r0, r3
 800707e:	372c      	adds	r7, #44	; 0x2c
 8007080:	46bd      	mov	sp, r7
 8007082:	bd90      	pop	{r4, r7, pc}
 8007084:	20000540 	.word	0x20000540
 8007088:	200004f8 	.word	0x200004f8
 800708c:	20000490 	.word	0x20000490
 8007090:	20000020 	.word	0x20000020
 8007094:	20000024 	.word	0x20000024

08007098 <xilPause>:

XIL_INTERFACE_ERROR_CODE xilPause(uint32_T xilFcnId)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  XIL_INTERFACE_ERROR_CODE errorCode = XIL_INTERFACE_SUCCESS;
 80070a0:	2300      	movs	r3, #0
 80070a2:	73fb      	strb	r3, [r7, #15]
  if (xilFcnId == 0) {
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <xilPause+0x16>
    /* Nothing to do */
  } else {
    errorCode = XIL_INTERFACE_UNKNOWN_FCNID;
 80070aa:	2302      	movs	r3, #2
 80070ac:	73fb      	strb	r3, [r7, #15]
  }                                    /* if */

  return errorCode;
 80070ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3714      	adds	r7, #20
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <xilSystemInitialize>:

XIL_INTERFACE_ERROR_CODE xilSystemInitialize(uint32_T xilFcnId)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  XIL_INTERFACE_ERROR_CODE errorCode = XIL_INTERFACE_SUCCESS;
 80070c4:	2300      	movs	r3, #0
 80070c6:	73fb      	strb	r3, [r7, #15]

  /* Single In-the-Loop Component */
  if (xilFcnId == 0) {
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <xilSystemInitialize+0x16>
    /* No Function to Call */
  } else {
    errorCode = XIL_INTERFACE_UNKNOWN_FCNID;
 80070ce:	2302      	movs	r3, #2
 80070d0:	73fb      	strb	r3, [r7, #15]
  }

  return errorCode;
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <xilSystemReset>:

XIL_INTERFACE_ERROR_CODE xilSystemReset(uint32_T xilFcnId)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  XIL_INTERFACE_ERROR_CODE errorCode = XIL_INTERFACE_SUCCESS;
 80070e8:	2300      	movs	r3, #0
 80070ea:	73fb      	strb	r3, [r7, #15]

  /* Single In-the-Loop Component */
  if (xilFcnId == 0) {
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <xilSystemReset+0x16>
    /* No Function to Call */
  } else {
    errorCode = XIL_INTERFACE_UNKNOWN_FCNID;
 80070f2:	2302      	movs	r3, #2
 80070f4:	73fb      	strb	r3, [r7, #15]
  }

  return errorCode;
 80070f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <xilGetHostToTargetData>:

XIL_INTERFACE_ERROR_CODE xilGetHostToTargetData(uint32_T xilFcnId,
  XIL_COMMAND_TYPE_ENUM xilCommandType, uint32_T xilCommandIdx, XILIOData
  ** xilIOData)
{
 8007104:	b480      	push	{r7}
 8007106:	b093      	sub	sp, #76	; 0x4c
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	607a      	str	r2, [r7, #4]
 800710e:	603b      	str	r3, [r7, #0]
 8007110:	460b      	mov	r3, r1
 8007112:	72fb      	strb	r3, [r7, #11]
  XIL_INTERFACE_ERROR_CODE errorCode = XIL_INTERFACE_SUCCESS;
 8007114:	2300      	movs	r3, #0
 8007116:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  *xilIOData = 0;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2200      	movs	r2, #0
 800711e:	601a      	str	r2, [r3, #0]

  /* Single In-the-Loop Component */
  if (xilFcnId != 0) {
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d005      	beq.n	8007132 <xilGetHostToTargetData+0x2e>
    errorCode = XIL_INTERFACE_UNKNOWN_FCNID;
 8007126:	2302      	movs	r3, #2
 8007128:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    return errorCode;
 800712c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007130:	e0c9      	b.n	80072c6 <xilGetHostToTargetData+0x1c2>
  }

  switch (xilCommandType) {
 8007132:	7afb      	ldrb	r3, [r7, #11]
 8007134:	2b03      	cmp	r3, #3
 8007136:	f040 80c0 	bne.w	80072ba <xilGetHostToTargetData+0x1b6>
   case XIL_OUTPUT_COMMAND:
    {
      static int initComplete = 0;
      if (!initComplete) {
 800713a:	4b66      	ldr	r3, [pc, #408]	; (80072d4 <xilGetHostToTargetData+0x1d0>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	f040 80b7 	bne.w	80072b2 <xilGetHostToTargetData+0x1ae>
        uint32_T tableIdx = 0;
 8007144:	2300      	movs	r3, #0
 8007146:	643b      	str	r3, [r7, #64]	; 0x40

        {
          void * dataAddress = (void *) &(i_SafeX);
 8007148:	4b63      	ldr	r3, [pc, #396]	; (80072d8 <xilGetHostToTargetData+0x1d4>)
 800714a:	63fb      	str	r3, [r7, #60]	; 0x3c
          xil_fcnid0_task1_output_u[tableIdx].memUnitLength = 1 * sizeof(real_T);
 800714c:	4a63      	ldr	r2, [pc, #396]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 800714e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007150:	2108      	movs	r1, #8
 8007152:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
          xil_fcnid0_task1_output_u[tableIdx++].address = (MemUnit_T *)
 8007156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	643a      	str	r2, [r7, #64]	; 0x40
 800715c:	4a5f      	ldr	r2, [pc, #380]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	4413      	add	r3, r2
 8007162:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007164:	605a      	str	r2, [r3, #4]
            dataAddress;
        }

        {
          void * dataAddress = (void *) &(i_SafeY);
 8007166:	4b5e      	ldr	r3, [pc, #376]	; (80072e0 <xilGetHostToTargetData+0x1dc>)
 8007168:	63bb      	str	r3, [r7, #56]	; 0x38
          xil_fcnid0_task1_output_u[tableIdx].memUnitLength = 1 * sizeof(real_T);
 800716a:	4a5c      	ldr	r2, [pc, #368]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 800716c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800716e:	2108      	movs	r1, #8
 8007170:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
          xil_fcnid0_task1_output_u[tableIdx++].address = (MemUnit_T *)
 8007174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007176:	1c5a      	adds	r2, r3, #1
 8007178:	643a      	str	r2, [r7, #64]	; 0x40
 800717a:	4a58      	ldr	r2, [pc, #352]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 800717c:	00db      	lsls	r3, r3, #3
 800717e:	4413      	add	r3, r2
 8007180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007182:	605a      	str	r2, [r3, #4]
            dataAddress;
        }

        {
          void * dataAddress = (void *) &(i_EndX);
 8007184:	4b57      	ldr	r3, [pc, #348]	; (80072e4 <xilGetHostToTargetData+0x1e0>)
 8007186:	637b      	str	r3, [r7, #52]	; 0x34
          xil_fcnid0_task1_output_u[tableIdx].memUnitLength = 1 * sizeof(real_T);
 8007188:	4a54      	ldr	r2, [pc, #336]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 800718a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800718c:	2108      	movs	r1, #8
 800718e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
          xil_fcnid0_task1_output_u[tableIdx++].address = (MemUnit_T *)
 8007192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	643a      	str	r2, [r7, #64]	; 0x40
 8007198:	4a50      	ldr	r2, [pc, #320]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 800719a:	00db      	lsls	r3, r3, #3
 800719c:	4413      	add	r3, r2
 800719e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071a0:	605a      	str	r2, [r3, #4]
            dataAddress;
        }

        {
          void * dataAddress = (void *) &(i_EndY);
 80071a2:	4b51      	ldr	r3, [pc, #324]	; (80072e8 <xilGetHostToTargetData+0x1e4>)
 80071a4:	633b      	str	r3, [r7, #48]	; 0x30
          xil_fcnid0_task1_output_u[tableIdx].memUnitLength = 1 * sizeof(real_T);
 80071a6:	4a4d      	ldr	r2, [pc, #308]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 80071a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071aa:	2108      	movs	r1, #8
 80071ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
          xil_fcnid0_task1_output_u[tableIdx++].address = (MemUnit_T *)
 80071b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071b2:	1c5a      	adds	r2, r3, #1
 80071b4:	643a      	str	r2, [r7, #64]	; 0x40
 80071b6:	4a49      	ldr	r2, [pc, #292]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 80071b8:	00db      	lsls	r3, r3, #3
 80071ba:	4413      	add	r3, r2
 80071bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071be:	605a      	str	r2, [r3, #4]
            dataAddress;
        }

        {
          void * dataAddress = (void *) &(i_EntryPoint[0]);
 80071c0:	4b4a      	ldr	r3, [pc, #296]	; (80072ec <xilGetHostToTargetData+0x1e8>)
 80071c2:	62fb      	str	r3, [r7, #44]	; 0x2c
          xil_fcnid0_task1_output_u[tableIdx].memUnitLength = 4 * sizeof(real_T);
 80071c4:	4a45      	ldr	r2, [pc, #276]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 80071c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071c8:	2120      	movs	r1, #32
 80071ca:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
          xil_fcnid0_task1_output_u[tableIdx++].address = (MemUnit_T *)
 80071ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071d0:	1c5a      	adds	r2, r3, #1
 80071d2:	643a      	str	r2, [r7, #64]	; 0x40
 80071d4:	4a41      	ldr	r2, [pc, #260]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 80071d6:	00db      	lsls	r3, r3, #3
 80071d8:	4413      	add	r3, r2
 80071da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071dc:	605a      	str	r2, [r3, #4]
            dataAddress;
        }

        {
          void * dataAddress = (void *) &(i_DetPoint[0]);
 80071de:	4b44      	ldr	r3, [pc, #272]	; (80072f0 <xilGetHostToTargetData+0x1ec>)
 80071e0:	62bb      	str	r3, [r7, #40]	; 0x28
          xil_fcnid0_task1_output_u[tableIdx].memUnitLength = 4 * sizeof(real_T);
 80071e2:	4a3e      	ldr	r2, [pc, #248]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 80071e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071e6:	2120      	movs	r1, #32
 80071e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
          xil_fcnid0_task1_output_u[tableIdx++].address = (MemUnit_T *)
 80071ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ee:	1c5a      	adds	r2, r3, #1
 80071f0:	643a      	str	r2, [r7, #64]	; 0x40
 80071f2:	4a3a      	ldr	r2, [pc, #232]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 80071f4:	00db      	lsls	r3, r3, #3
 80071f6:	4413      	add	r3, r2
 80071f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071fa:	605a      	str	r2, [r3, #4]
            dataAddress;
        }

        {
          void * dataAddress = (void *) &(i_detection);
 80071fc:	4b3d      	ldr	r3, [pc, #244]	; (80072f4 <xilGetHostToTargetData+0x1f0>)
 80071fe:	627b      	str	r3, [r7, #36]	; 0x24
          xil_fcnid0_task1_output_u[tableIdx].memUnitLength = 1 * sizeof(real_T);
 8007200:	4a36      	ldr	r2, [pc, #216]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 8007202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007204:	2108      	movs	r1, #8
 8007206:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
          xil_fcnid0_task1_output_u[tableIdx++].address = (MemUnit_T *)
 800720a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800720c:	1c5a      	adds	r2, r3, #1
 800720e:	643a      	str	r2, [r7, #64]	; 0x40
 8007210:	4a32      	ldr	r2, [pc, #200]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 8007212:	00db      	lsls	r3, r3, #3
 8007214:	4413      	add	r3, r2
 8007216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007218:	605a      	str	r2, [r3, #4]
            dataAddress;
        }

        {
          void * dataAddress = (void *) &(i_Zone);
 800721a:	4b37      	ldr	r3, [pc, #220]	; (80072f8 <xilGetHostToTargetData+0x1f4>)
 800721c:	623b      	str	r3, [r7, #32]
          xil_fcnid0_task1_output_u[tableIdx].memUnitLength = 1 * sizeof(real_T);
 800721e:	4a2f      	ldr	r2, [pc, #188]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 8007220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007222:	2108      	movs	r1, #8
 8007224:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
          xil_fcnid0_task1_output_u[tableIdx++].address = (MemUnit_T *)
 8007228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	643a      	str	r2, [r7, #64]	; 0x40
 800722e:	4a2b      	ldr	r2, [pc, #172]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 8007230:	00db      	lsls	r3, r3, #3
 8007232:	4413      	add	r3, r2
 8007234:	6a3a      	ldr	r2, [r7, #32]
 8007236:	605a      	str	r2, [r3, #4]
            dataAddress;
        }

        {
          void * dataAddress = (void *) &(i_Lw);
 8007238:	4b30      	ldr	r3, [pc, #192]	; (80072fc <xilGetHostToTargetData+0x1f8>)
 800723a:	61fb      	str	r3, [r7, #28]
          xil_fcnid0_task1_output_u[tableIdx].memUnitLength = 1 * sizeof(real_T);
 800723c:	4a27      	ldr	r2, [pc, #156]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 800723e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007240:	2108      	movs	r1, #8
 8007242:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
          xil_fcnid0_task1_output_u[tableIdx++].address = (MemUnit_T *)
 8007246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	643a      	str	r2, [r7, #64]	; 0x40
 800724c:	4a23      	ldr	r2, [pc, #140]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	4413      	add	r3, r2
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	605a      	str	r2, [r3, #4]
            dataAddress;
        }

        {
          void * dataAddress = (void *) &(i_Reference[0]);
 8007256:	4b2a      	ldr	r3, [pc, #168]	; (8007300 <xilGetHostToTargetData+0x1fc>)
 8007258:	61bb      	str	r3, [r7, #24]
          xil_fcnid0_task1_output_u[tableIdx].memUnitLength = 4 * sizeof(real_T);
 800725a:	4a20      	ldr	r2, [pc, #128]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 800725c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800725e:	2120      	movs	r1, #32
 8007260:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
          xil_fcnid0_task1_output_u[tableIdx++].address = (MemUnit_T *)
 8007264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	643a      	str	r2, [r7, #64]	; 0x40
 800726a:	4a1c      	ldr	r2, [pc, #112]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 800726c:	00db      	lsls	r3, r3, #3
 800726e:	4413      	add	r3, r2
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	605a      	str	r2, [r3, #4]
            dataAddress;
        }

        {
          void * dataAddress = (void *) &(i_Curvature);
 8007274:	4b23      	ldr	r3, [pc, #140]	; (8007304 <xilGetHostToTargetData+0x200>)
 8007276:	617b      	str	r3, [r7, #20]
          xil_fcnid0_task1_output_u[tableIdx].memUnitLength = 1 * sizeof(real_T);
 8007278:	4a18      	ldr	r2, [pc, #96]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 800727a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800727c:	2108      	movs	r1, #8
 800727e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
          xil_fcnid0_task1_output_u[tableIdx++].address = (MemUnit_T *)
 8007282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007284:	1c5a      	adds	r2, r3, #1
 8007286:	643a      	str	r2, [r7, #64]	; 0x40
 8007288:	4a14      	ldr	r2, [pc, #80]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 800728a:	00db      	lsls	r3, r3, #3
 800728c:	4413      	add	r3, r2
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	605a      	str	r2, [r3, #4]
            dataAddress;
        }

        xil_fcnid0_task1_output_u[tableIdx].memUnitLength = 0;
 8007292:	4a12      	ldr	r2, [pc, #72]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 8007294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007296:	2100      	movs	r1, #0
 8007298:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        xil_fcnid0_task1_output_u[tableIdx++].address = (MemUnit_T *) 0;
 800729c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800729e:	1c5a      	adds	r2, r3, #1
 80072a0:	643a      	str	r2, [r7, #64]	; 0x40
 80072a2:	4a0e      	ldr	r2, [pc, #56]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 80072a4:	00db      	lsls	r3, r3, #3
 80072a6:	4413      	add	r3, r2
 80072a8:	2200      	movs	r2, #0
 80072aa:	605a      	str	r2, [r3, #4]
        initComplete = 1;
 80072ac:	4b09      	ldr	r3, [pc, #36]	; (80072d4 <xilGetHostToTargetData+0x1d0>)
 80072ae:	2201      	movs	r2, #1
 80072b0:	601a      	str	r2, [r3, #0]
      }

      *xilIOData = &xil_fcnid0_task1_output_u[0];
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	4a09      	ldr	r2, [pc, #36]	; (80072dc <xilGetHostToTargetData+0x1d8>)
 80072b6:	601a      	str	r2, [r3, #0]
      break;
 80072b8:	e003      	b.n	80072c2 <xilGetHostToTargetData+0x1be>
    }

   default:
    errorCode = XIL_INTERFACE_UNKNOWN_TID;
 80072ba:	2301      	movs	r3, #1
 80072bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    break;
 80072c0:	bf00      	nop
  }

  UNUSED_PARAMETER(xilCommandIdx);
  return errorCode;
 80072c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	374c      	adds	r7, #76	; 0x4c
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	200001a4 	.word	0x200001a4
 80072d8:	20000488 	.word	0x20000488
 80072dc:	20000104 	.word	0x20000104
 80072e0:	200004c0 	.word	0x200004c0
 80072e4:	20000538 	.word	0x20000538
 80072e8:	20000478 	.word	0x20000478
 80072ec:	20000448 	.word	0x20000448
 80072f0:	200004d0 	.word	0x200004d0
 80072f4:	20000480 	.word	0x20000480
 80072f8:	200004f0 	.word	0x200004f0
 80072fc:	20000470 	.word	0x20000470
 8007300:	200004a0 	.word	0x200004a0
 8007304:	20000468 	.word	0x20000468

08007308 <xilOutput>:

XIL_INTERFACE_ERROR_CODE xilOutput(uint32_T xilFcnId, uint32_T xilTID)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b08c      	sub	sp, #48	; 0x30
 800730c:	af0a      	add	r7, sp, #40	; 0x28
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  /* Single In-the-Loop Component */
  if (xilFcnId != 0) {
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <xilOutput+0x14>
    return XIL_INTERFACE_UNKNOWN_FCNID;
 8007318:	2302      	movs	r3, #2
 800731a:	e020      	b.n	800735e <xilOutput+0x56>
  }

  switch (xilTID) {
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d11c      	bne.n	800735c <xilOutput+0x54>
   case 1:
    /* Call all Set class methods */
    Model_for_PIL(&(i_SafeX), &(i_SafeY), &(i_EndX), &(i_EndY), i_EntryPoint,
 8007322:	4b11      	ldr	r3, [pc, #68]	; (8007368 <xilOutput+0x60>)
 8007324:	9309      	str	r3, [sp, #36]	; 0x24
 8007326:	4b11      	ldr	r3, [pc, #68]	; (800736c <xilOutput+0x64>)
 8007328:	9308      	str	r3, [sp, #32]
 800732a:	4b11      	ldr	r3, [pc, #68]	; (8007370 <xilOutput+0x68>)
 800732c:	9307      	str	r3, [sp, #28]
 800732e:	4b11      	ldr	r3, [pc, #68]	; (8007374 <xilOutput+0x6c>)
 8007330:	9306      	str	r3, [sp, #24]
 8007332:	4b11      	ldr	r3, [pc, #68]	; (8007378 <xilOutput+0x70>)
 8007334:	9305      	str	r3, [sp, #20]
 8007336:	4b11      	ldr	r3, [pc, #68]	; (800737c <xilOutput+0x74>)
 8007338:	9304      	str	r3, [sp, #16]
 800733a:	4b11      	ldr	r3, [pc, #68]	; (8007380 <xilOutput+0x78>)
 800733c:	9303      	str	r3, [sp, #12]
 800733e:	4b11      	ldr	r3, [pc, #68]	; (8007384 <xilOutput+0x7c>)
 8007340:	9302      	str	r3, [sp, #8]
 8007342:	4b11      	ldr	r3, [pc, #68]	; (8007388 <xilOutput+0x80>)
 8007344:	9301      	str	r3, [sp, #4]
 8007346:	4b11      	ldr	r3, [pc, #68]	; (800738c <xilOutput+0x84>)
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	4b11      	ldr	r3, [pc, #68]	; (8007390 <xilOutput+0x88>)
 800734c:	4a11      	ldr	r2, [pc, #68]	; (8007394 <xilOutput+0x8c>)
 800734e:	4912      	ldr	r1, [pc, #72]	; (8007398 <xilOutput+0x90>)
 8007350:	4812      	ldr	r0, [pc, #72]	; (800739c <xilOutput+0x94>)
 8007352:	f7fd f875 	bl	8004440 <Model_for_PIL>
                  i_DetPoint, &(i_detection), &(i_Zone), &(i_Lw), i_Reference,
                  &(i_Curvature), o_E, o_F, o_G);

    /* Call all Get class methods */
    break;
 8007356:	bf00      	nop

   default:
    return XIL_INTERFACE_UNKNOWN_TID;
  }

  return XIL_INTERFACE_SUCCESS;
 8007358:	2300      	movs	r3, #0
 800735a:	e000      	b.n	800735e <xilOutput+0x56>
    return XIL_INTERFACE_UNKNOWN_TID;
 800735c:	2301      	movs	r3, #1
}
 800735e:	4618      	mov	r0, r3
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20000490 	.word	0x20000490
 800736c:	200004f8 	.word	0x200004f8
 8007370:	20000540 	.word	0x20000540
 8007374:	20000468 	.word	0x20000468
 8007378:	200004a0 	.word	0x200004a0
 800737c:	20000470 	.word	0x20000470
 8007380:	200004f0 	.word	0x200004f0
 8007384:	20000480 	.word	0x20000480
 8007388:	200004d0 	.word	0x200004d0
 800738c:	20000448 	.word	0x20000448
 8007390:	20000478 	.word	0x20000478
 8007394:	20000538 	.word	0x20000538
 8007398:	200004c0 	.word	0x200004c0
 800739c:	20000488 	.word	0x20000488

080073a0 <xilUpdate>:

XIL_INTERFACE_ERROR_CODE xilUpdate(uint32_T xilFcnId, uint32_T xilTID)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  /* Single In-the-Loop Component */
  if (xilFcnId != 0) {
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <xilUpdate+0x14>
    return XIL_INTERFACE_UNKNOWN_FCNID;
 80073b0:	2302      	movs	r3, #2
 80073b2:	e000      	b.n	80073b6 <xilUpdate+0x16>
  }

  /* No Update Function */
  UNUSED_PARAMETER(xilTID);
  return XIL_INTERFACE_SUCCESS;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
	...

080073c4 <xilGetTargetToHostData>:

XIL_INTERFACE_ERROR_CODE xilGetTargetToHostData(uint32_T xilFcnId,
  XIL_COMMAND_TYPE_ENUM xilCommandType, uint32_T xilCommandIdx, XILIOData
  ** xilIOData)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b08f      	sub	sp, #60	; 0x3c
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	607a      	str	r2, [r7, #4]
 80073ce:	603b      	str	r3, [r7, #0]
 80073d0:	460b      	mov	r3, r1
 80073d2:	72fb      	strb	r3, [r7, #11]
  XIL_INTERFACE_ERROR_CODE errorCode = XIL_INTERFACE_SUCCESS;
 80073d4:	2300      	movs	r3, #0
 80073d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /* Single In-the-Loop Component */
  *xilIOData = 0;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2200      	movs	r2, #0
 80073de:	601a      	str	r2, [r3, #0]
  if (xilFcnId != 0) {
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d005      	beq.n	80073f2 <xilGetTargetToHostData+0x2e>
    errorCode = XIL_INTERFACE_UNKNOWN_FCNID;
 80073e6:	2302      	movs	r3, #2
 80073e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    return errorCode;
 80073ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073f0:	e099      	b.n	8007526 <xilGetTargetToHostData+0x162>
  }

  switch (xilCommandType) {
 80073f2:	7afb      	ldrb	r3, [r7, #11]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d002      	beq.n	80073fe <xilGetTargetToHostData+0x3a>
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	d047      	beq.n	800748c <xilGetTargetToHostData+0xc8>
 80073fc:	e08d      	b.n	800751a <xilGetTargetToHostData+0x156>
   case XIL_INITIALIZE_COMMAND:
    {
      static int initComplete = 0;
      if (!initComplete) {
 80073fe:	4b4d      	ldr	r3, [pc, #308]	; (8007534 <xilGetTargetToHostData+0x170>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d13e      	bne.n	8007484 <xilGetTargetToHostData+0xc0>
        uint32_T tableIdx = 0;
 8007406:	2300      	movs	r3, #0
 8007408:	623b      	str	r3, [r7, #32]

        {
          void * dataAddress = (void *) &(o_E[0]);
 800740a:	4b4b      	ldr	r3, [pc, #300]	; (8007538 <xilGetTargetToHostData+0x174>)
 800740c:	61fb      	str	r3, [r7, #28]
          xil_fcnid0_init_y[tableIdx].memUnitLength = 4 * sizeof(real_T);
 800740e:	4a4b      	ldr	r2, [pc, #300]	; (800753c <xilGetTargetToHostData+0x178>)
 8007410:	6a3b      	ldr	r3, [r7, #32]
 8007412:	2120      	movs	r1, #32
 8007414:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
          xil_fcnid0_init_y[tableIdx++].address = (MemUnit_T *) dataAddress;
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	623a      	str	r2, [r7, #32]
 800741e:	4a47      	ldr	r2, [pc, #284]	; (800753c <xilGetTargetToHostData+0x178>)
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	4413      	add	r3, r2
 8007424:	69fa      	ldr	r2, [r7, #28]
 8007426:	605a      	str	r2, [r3, #4]
        }

        {
          void * dataAddress = (void *) &(o_F[0]);
 8007428:	4b45      	ldr	r3, [pc, #276]	; (8007540 <xilGetTargetToHostData+0x17c>)
 800742a:	61bb      	str	r3, [r7, #24]
          xil_fcnid0_init_y[tableIdx].memUnitLength = 8 * sizeof(real_T);
 800742c:	4a43      	ldr	r2, [pc, #268]	; (800753c <xilGetTargetToHostData+0x178>)
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	2140      	movs	r1, #64	; 0x40
 8007432:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
          xil_fcnid0_init_y[tableIdx++].address = (MemUnit_T *) dataAddress;
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	1c5a      	adds	r2, r3, #1
 800743a:	623a      	str	r2, [r7, #32]
 800743c:	4a3f      	ldr	r2, [pc, #252]	; (800753c <xilGetTargetToHostData+0x178>)
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	4413      	add	r3, r2
 8007442:	69ba      	ldr	r2, [r7, #24]
 8007444:	605a      	str	r2, [r3, #4]
        }

        {
          void * dataAddress = (void *) &(o_G[0]);
 8007446:	4b3f      	ldr	r3, [pc, #252]	; (8007544 <xilGetTargetToHostData+0x180>)
 8007448:	617b      	str	r3, [r7, #20]
          xil_fcnid0_init_y[tableIdx].memUnitLength = 2 * sizeof(real_T);
 800744a:	4a3c      	ldr	r2, [pc, #240]	; (800753c <xilGetTargetToHostData+0x178>)
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	2110      	movs	r1, #16
 8007450:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
          xil_fcnid0_init_y[tableIdx++].address = (MemUnit_T *) dataAddress;
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	623a      	str	r2, [r7, #32]
 800745a:	4a38      	ldr	r2, [pc, #224]	; (800753c <xilGetTargetToHostData+0x178>)
 800745c:	00db      	lsls	r3, r3, #3
 800745e:	4413      	add	r3, r2
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	605a      	str	r2, [r3, #4]
        }

        xil_fcnid0_init_y[tableIdx].memUnitLength = 0;
 8007464:	4a35      	ldr	r2, [pc, #212]	; (800753c <xilGetTargetToHostData+0x178>)
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	2100      	movs	r1, #0
 800746a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        xil_fcnid0_init_y[tableIdx++].address = (MemUnit_T *) 0;
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	623a      	str	r2, [r7, #32]
 8007474:	4a31      	ldr	r2, [pc, #196]	; (800753c <xilGetTargetToHostData+0x178>)
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	4413      	add	r3, r2
 800747a:	2200      	movs	r2, #0
 800747c:	605a      	str	r2, [r3, #4]
        initComplete = 1;
 800747e:	4b2d      	ldr	r3, [pc, #180]	; (8007534 <xilGetTargetToHostData+0x170>)
 8007480:	2201      	movs	r2, #1
 8007482:	601a      	str	r2, [r3, #0]
      }

      *xilIOData = &xil_fcnid0_init_y[0];
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	4a2d      	ldr	r2, [pc, #180]	; (800753c <xilGetTargetToHostData+0x178>)
 8007488:	601a      	str	r2, [r3, #0]
      break;
 800748a:	e04a      	b.n	8007522 <xilGetTargetToHostData+0x15e>
    }

   case XIL_OUTPUT_COMMAND:
    {
      static int initComplete = 0;
      if (!initComplete) {
 800748c:	4b2e      	ldr	r3, [pc, #184]	; (8007548 <xilGetTargetToHostData+0x184>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d13e      	bne.n	8007512 <xilGetTargetToHostData+0x14e>
        uint32_T tableIdx = 0;
 8007494:	2300      	movs	r3, #0
 8007496:	633b      	str	r3, [r7, #48]	; 0x30

        {
          void * dataAddress = (void *) &(o_E[0]);
 8007498:	4b27      	ldr	r3, [pc, #156]	; (8007538 <xilGetTargetToHostData+0x174>)
 800749a:	62fb      	str	r3, [r7, #44]	; 0x2c
          xil_fcnid0_task1_y[tableIdx].memUnitLength = 4 * sizeof(real_T);
 800749c:	4a2b      	ldr	r2, [pc, #172]	; (800754c <xilGetTargetToHostData+0x188>)
 800749e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a0:	2120      	movs	r1, #32
 80074a2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
          xil_fcnid0_task1_y[tableIdx++].address = (MemUnit_T *) dataAddress;
 80074a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	633a      	str	r2, [r7, #48]	; 0x30
 80074ac:	4a27      	ldr	r2, [pc, #156]	; (800754c <xilGetTargetToHostData+0x188>)
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	4413      	add	r3, r2
 80074b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074b4:	605a      	str	r2, [r3, #4]
        }

        {
          void * dataAddress = (void *) &(o_F[0]);
 80074b6:	4b22      	ldr	r3, [pc, #136]	; (8007540 <xilGetTargetToHostData+0x17c>)
 80074b8:	62bb      	str	r3, [r7, #40]	; 0x28
          xil_fcnid0_task1_y[tableIdx].memUnitLength = 8 * sizeof(real_T);
 80074ba:	4a24      	ldr	r2, [pc, #144]	; (800754c <xilGetTargetToHostData+0x188>)
 80074bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074be:	2140      	movs	r1, #64	; 0x40
 80074c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
          xil_fcnid0_task1_y[tableIdx++].address = (MemUnit_T *) dataAddress;
 80074c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	633a      	str	r2, [r7, #48]	; 0x30
 80074ca:	4a20      	ldr	r2, [pc, #128]	; (800754c <xilGetTargetToHostData+0x188>)
 80074cc:	00db      	lsls	r3, r3, #3
 80074ce:	4413      	add	r3, r2
 80074d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074d2:	605a      	str	r2, [r3, #4]
        }

        {
          void * dataAddress = (void *) &(o_G[0]);
 80074d4:	4b1b      	ldr	r3, [pc, #108]	; (8007544 <xilGetTargetToHostData+0x180>)
 80074d6:	627b      	str	r3, [r7, #36]	; 0x24
          xil_fcnid0_task1_y[tableIdx].memUnitLength = 2 * sizeof(real_T);
 80074d8:	4a1c      	ldr	r2, [pc, #112]	; (800754c <xilGetTargetToHostData+0x188>)
 80074da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074dc:	2110      	movs	r1, #16
 80074de:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
          xil_fcnid0_task1_y[tableIdx++].address = (MemUnit_T *) dataAddress;
 80074e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e4:	1c5a      	adds	r2, r3, #1
 80074e6:	633a      	str	r2, [r7, #48]	; 0x30
 80074e8:	4a18      	ldr	r2, [pc, #96]	; (800754c <xilGetTargetToHostData+0x188>)
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	4413      	add	r3, r2
 80074ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074f0:	605a      	str	r2, [r3, #4]
        }

        xil_fcnid0_task1_y[tableIdx].memUnitLength = 0;
 80074f2:	4a16      	ldr	r2, [pc, #88]	; (800754c <xilGetTargetToHostData+0x188>)
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	2100      	movs	r1, #0
 80074f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        xil_fcnid0_task1_y[tableIdx++].address = (MemUnit_T *) 0;
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	633a      	str	r2, [r7, #48]	; 0x30
 8007502:	4a12      	ldr	r2, [pc, #72]	; (800754c <xilGetTargetToHostData+0x188>)
 8007504:	00db      	lsls	r3, r3, #3
 8007506:	4413      	add	r3, r2
 8007508:	2200      	movs	r2, #0
 800750a:	605a      	str	r2, [r3, #4]
        initComplete = 1;
 800750c:	4b0e      	ldr	r3, [pc, #56]	; (8007548 <xilGetTargetToHostData+0x184>)
 800750e:	2201      	movs	r2, #1
 8007510:	601a      	str	r2, [r3, #0]
      }

      *xilIOData = &xil_fcnid0_task1_y[0];
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	4a0d      	ldr	r2, [pc, #52]	; (800754c <xilGetTargetToHostData+0x188>)
 8007516:	601a      	str	r2, [r3, #0]
      break;
 8007518:	e003      	b.n	8007522 <xilGetTargetToHostData+0x15e>
    }

   default:
    errorCode = XIL_INTERFACE_UNKNOWN_TID;
 800751a:	2301      	movs	r3, #1
 800751c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    break;
 8007520:	bf00      	nop
  }

  UNUSED_PARAMETER(xilCommandIdx);
  return errorCode;
 8007522:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8007526:	4618      	mov	r0, r3
 8007528:	373c      	adds	r7, #60	; 0x3c
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	200001a8 	.word	0x200001a8
 8007538:	20000540 	.word	0x20000540
 800753c:	20000184 	.word	0x20000184
 8007540:	200004f8 	.word	0x200004f8
 8007544:	20000490 	.word	0x20000490
 8007548:	200001ac 	.word	0x200001ac
 800754c:	20000164 	.word	0x20000164

08007550 <xilTerminate>:

XIL_INTERFACE_ERROR_CODE xilTerminate(uint32_T xilFcnId)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  if (xilFcnId != 0) {
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <xilTerminate+0x12>
    return XIL_INTERFACE_UNKNOWN_FCNID;
 800755e:	2302      	movs	r3, #2
 8007560:	e000      	b.n	8007564 <xilTerminate+0x14>
  }                                    /* if */

  /* Invoke any terminate Function */
  /* No Function to Call */
  return XIL_INTERFACE_SUCCESS;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <xilEnable>:

XIL_INTERFACE_ERROR_CODE xilEnable(uint32_T xilFcnId, uint32_T xilTID)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  /* Single In-the-Loop Component */
  if (xilFcnId != 0) {
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <xilEnable+0x14>
    return XIL_INTERFACE_UNKNOWN_FCNID;
 8007580:	2302      	movs	r3, #2
 8007582:	e000      	b.n	8007586 <xilEnable+0x16>
  }

  UNUSED_PARAMETER(xilTID);

  /* No Enable Function - this function should never be called */
  return XIL_INTERFACE_UNKNOWN_TID;
 8007584:	2301      	movs	r3, #1
}
 8007586:	4618      	mov	r0, r3
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <xilDisable>:

XIL_INTERFACE_ERROR_CODE xilDisable(uint32_T xilFcnId, uint32_T xilTID)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	6039      	str	r1, [r7, #0]
  /* Single In-the-Loop Component */
  if (xilFcnId != 0) {
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <xilDisable+0x14>
    return XIL_INTERFACE_UNKNOWN_FCNID;
 80075a2:	2302      	movs	r3, #2
 80075a4:	e000      	b.n	80075a8 <xilDisable+0x16>
  }

  UNUSED_PARAMETER(xilTID);

  /* No Disable Function - this function should never be called */
  return XIL_INTERFACE_UNKNOWN_TID;
 80075a6:	2301      	movs	r3, #1
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <getNextXILIOData>:
    cc.command    = cachedCtx.command;
    cc.commandIdx = cachedCtx.commandIdx;
    cc.fcnId      = cachedCtx.fcnId;
}

static void getNextXILIOData(void) {
 80075b4:	b480      	push	{r7}
 80075b6:	af00      	add	r7, sp, #0
   /* increment xilIOData ptr if we have not reached the end */
   if (xilIODataPtr->memUnitLength!=0) {
 80075b8:	4b07      	ldr	r3, [pc, #28]	; (80075d8 <getNextXILIOData+0x24>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d004      	beq.n	80075cc <getNextXILIOData+0x18>
      xilIODataPtr++;
 80075c2:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <getNextXILIOData+0x24>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3308      	adds	r3, #8
 80075c8:	4a03      	ldr	r2, [pc, #12]	; (80075d8 <getNextXILIOData+0x24>)
 80075ca:	6013      	str	r3, [r2, #0]
   }
}
 80075cc:	bf00      	nop
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	200001b0 	.word	0x200001b0

080075dc <processHostToTargetData>:

static XIL_PROCESSDATA_ERROR_CODE processHostToTargetData(uint32_T fcnId,
        XIL_COMMAND_TYPE_ENUM command,
        uint32_T commandIdx)  {
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	460b      	mov	r3, r1
 80075e6:	607a      	str	r2, [r7, #4]
 80075e8:	72fb      	strb	r3, [r7, #11]
     * to so we can continue copying the remaining data the next time we 
     * receive them.
     */
    static MemUnit_T * uDataAddress = NULL;
    static uint32_T uDataLength = 0;
    int processingComplete = 0;
 80075ea:	2300      	movs	r3, #0
 80075ec:	617b      	str	r3, [r7, #20]
        
	/* initialize uDataAddress and uDataLength if necessary*/
    if (uDataAddress == NULL) {
 80075ee:	4b21      	ldr	r3, [pc, #132]	; (8007674 <processHostToTargetData+0x98>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d136      	bne.n	8007664 <processHostToTargetData+0x88>
		/* initialise xilIODataPtr before beginning to process data */
		if (xilGetHostToTargetData(fcnId, command, commandIdx, &xilIODataPtr)) {
 80075f6:	7af9      	ldrb	r1, [r7, #11]
 80075f8:	4b1f      	ldr	r3, [pc, #124]	; (8007678 <processHostToTargetData+0x9c>)
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f7ff fd81 	bl	8007104 <xilGetHostToTargetData>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <processHostToTargetData+0x34>
			/* no udata processing to be done - we're complete */
			processingComplete = 1;			
 8007608:	2301      	movs	r3, #1
 800760a:	617b      	str	r3, [r7, #20]
			return XIL_PROCESSDATA_SUCCESS;
 800760c:	2300      	movs	r3, #0
 800760e:	e02d      	b.n	800766c <processHostToTargetData+0x90>
		}

        uDataAddress = xilIODataPtr->address;
 8007610:	4b19      	ldr	r3, [pc, #100]	; (8007678 <processHostToTargetData+0x9c>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	4a17      	ldr	r2, [pc, #92]	; (8007674 <processHostToTargetData+0x98>)
 8007618:	6013      	str	r3, [r2, #0]
        uDataLength = xilIODataPtr->memUnitLength;
 800761a:	4b17      	ldr	r3, [pc, #92]	; (8007678 <processHostToTargetData+0x9c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a16      	ldr	r2, [pc, #88]	; (800767c <processHostToTargetData+0xa0>)
 8007622:	6013      	str	r3, [r2, #0]
    }
    
    while(!(processingComplete)) {
 8007624:	e01e      	b.n	8007664 <processHostToTargetData+0x88>
        xilReadData(uDataAddress, uDataLength);
 8007626:	4b13      	ldr	r3, [pc, #76]	; (8007674 <processHostToTargetData+0x98>)
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	4b14      	ldr	r3, [pc, #80]	; (800767c <processHostToTargetData+0xa0>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4619      	mov	r1, r3
 8007630:	4610      	mov	r0, r2
 8007632:	f7ff fc09 	bl	8006e48 <xilReadData>
        getNextXILIOData();
 8007636:	f7ff ffbd 	bl	80075b4 <getNextXILIOData>
            
        if (xilIODataPtr->memUnitLength == 0) {
 800763a:	4b0f      	ldr	r3, [pc, #60]	; (8007678 <processHostToTargetData+0x9c>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d105      	bne.n	8007650 <processHostToTargetData+0x74>
            /* done processing all xilIOData */                
            processingComplete = 1;
 8007644:	2301      	movs	r3, #1
 8007646:	617b      	str	r3, [r7, #20]
            uDataAddress = NULL;
 8007648:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <processHostToTargetData+0x98>)
 800764a:	2200      	movs	r2, #0
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	e009      	b.n	8007664 <processHostToTargetData+0x88>
        } else {
            /* reset our pointer to next xilIOData */
            uDataAddress = xilIODataPtr->address;
 8007650:	4b09      	ldr	r3, [pc, #36]	; (8007678 <processHostToTargetData+0x9c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	4a07      	ldr	r2, [pc, #28]	; (8007674 <processHostToTargetData+0x98>)
 8007658:	6013      	str	r3, [r2, #0]
            uDataLength = xilIODataPtr->memUnitLength;
 800765a:	4b07      	ldr	r3, [pc, #28]	; (8007678 <processHostToTargetData+0x9c>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a06      	ldr	r2, [pc, #24]	; (800767c <processHostToTargetData+0xa0>)
 8007662:	6013      	str	r3, [r2, #0]
    while(!(processingComplete)) {
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d0dd      	beq.n	8007626 <processHostToTargetData+0x4a>
        }
    }

    return XIL_PROCESSDATA_SUCCESS;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3718      	adds	r7, #24
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	200001c8 	.word	0x200001c8
 8007678:	200001b0 	.word	0x200001b0
 800767c:	200001cc 	.word	0x200001cc

08007680 <processTargetToHostData>:

static XIL_PROCESSDATA_ERROR_CODE processTargetToHostData(uint32_T fcnId,
        MemUnit_T responseId,
        XIL_COMMAND_TYPE_ENUM command,
        uint32_T commandIdx)  {
 8007680:	b580      	push	{r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	607b      	str	r3, [r7, #4]
 800768a:	460b      	mov	r3, r1
 800768c:	72fb      	strb	r3, [r7, #11]
 800768e:	4613      	mov	r3, r2
 8007690:	72bb      	strb	r3, [r7, #10]
        
    int moreXILData = 1;
 8007692:	2301      	movs	r3, #1
 8007694:	617b      	str	r3, [r7, #20]
    
    /* initialise before beginning to process data */    
    if (xilGetTargetToHostData(fcnId, command, commandIdx, &xilIODataPtr)) {
 8007696:	7ab9      	ldrb	r1, [r7, #10]
 8007698:	4b20      	ldr	r3, [pc, #128]	; (800771c <processTargetToHostData+0x9c>)
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f7ff fe91 	bl	80073c4 <xilGetTargetToHostData>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d001      	beq.n	80076ac <processTargetToHostData+0x2c>
        /* no ydata processing to be done - we're complete */        
        return XIL_PROCESSDATA_SUCCESS;
 80076a8:	2300      	movs	r3, #0
 80076aa:	e032      	b.n	8007712 <processTargetToHostData+0x92>
    }
    /* send response id */
    if (xilWriteData(&responseId, sizeof(responseId)) != XIL_DATA_STREAM_SUCCESS) {        
 80076ac:	f107 030b 	add.w	r3, r7, #11
 80076b0:	2101      	movs	r1, #1
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff fb7a 	bl	8006dac <xilWriteData>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <processTargetToHostData+0x42>
        return XIL_PROCESSDATA_DATA_STREAM_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e027      	b.n	8007712 <processTargetToHostData+0x92>
    }
    
    /* send server function id if this is a caller function */
    if (responseId == XIL_RESPONSE_CS_REQUEST_SERVICE) {
 80076c2:	7afb      	ldrb	r3, [r7, #11]
 80076c4:	2b07      	cmp	r3, #7
 80076c6:	d120      	bne.n	800770a <processTargetToHostData+0x8a>
        if (xilWriteData((MemUnit_T *) &serverFcnId, sizeof(serverFcnId)) != XIL_DATA_STREAM_SUCCESS) {
 80076c8:	2104      	movs	r1, #4
 80076ca:	4815      	ldr	r0, [pc, #84]	; (8007720 <processTargetToHostData+0xa0>)
 80076cc:	f7ff fb6e 	bl	8006dac <xilWriteData>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d019      	beq.n	800770a <processTargetToHostData+0x8a>
            return XIL_PROCESSDATA_DATA_STREAM_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e01b      	b.n	8007712 <processTargetToHostData+0x92>
        }
    }
    
    while(moreXILData) {
        if (xilWriteData(xilIODataPtr->address, xilIODataPtr->memUnitLength) != XIL_DATA_STREAM_SUCCESS) {            
 80076da:	4b10      	ldr	r3, [pc, #64]	; (800771c <processTargetToHostData+0x9c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	4b0e      	ldr	r3, [pc, #56]	; (800771c <processTargetToHostData+0x9c>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4619      	mov	r1, r3
 80076e8:	4610      	mov	r0, r2
 80076ea:	f7ff fb5f 	bl	8006dac <xilWriteData>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d001      	beq.n	80076f8 <processTargetToHostData+0x78>
            return XIL_PROCESSDATA_DATA_STREAM_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e00c      	b.n	8007712 <processTargetToHostData+0x92>
        }
        /* get next xilIOData */
        getNextXILIOData();
 80076f8:	f7ff ff5c 	bl	80075b4 <getNextXILIOData>
        if (xilIODataPtr->memUnitLength == 0) {
 80076fc:	4b07      	ldr	r3, [pc, #28]	; (800771c <processTargetToHostData+0x9c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <processTargetToHostData+0x8a>
            moreXILData = 0;
 8007706:	2300      	movs	r3, #0
 8007708:	617b      	str	r3, [r7, #20]
    while(moreXILData) {
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1e4      	bne.n	80076da <processTargetToHostData+0x5a>
        }
    }
    return XIL_PROCESSDATA_SUCCESS;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3718      	adds	r7, #24
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	200001b0 	.word	0x200001b0
 8007720:	200001b8 	.word	0x200001b8

08007724 <finalizeCommandResponse>:

static XIL_INTERFACE_LIB_ERROR_CODE finalizeCommandResponse(XIL_RESPONSE_ERROR_ID errorId, MemUnit_T isEndOfXILStep)  {
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	4603      	mov	r3, r0
 800772c:	460a      	mov	r2, r1
 800772e:	71fb      	strb	r3, [r7, #7]
 8007730:	4613      	mov	r3, r2
 8007732:	71bb      	strb	r3, [r7, #6]
        return XIL_INTERFACE_LIB_ERROR;
    }
#endif

   /* only send the error id if necessary */
   if (errorId != XIL_RESPONSE_ERROR_SUCCESS) {
 8007734:	79fb      	ldrb	r3, [r7, #7]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d019      	beq.n	800776e <finalizeCommandResponse+0x4a>
      /* send response id code */
      MemUnit_T memUnitData = XIL_RESPONSE_ERROR;
 800773a:	2300      	movs	r3, #0
 800773c:	73fb      	strb	r3, [r7, #15]
      if (xilWriteData(&memUnitData, sizeof(memUnitData)) != XIL_DATA_STREAM_SUCCESS) {
 800773e:	f107 030f 	add.w	r3, r7, #15
 8007742:	2101      	movs	r1, #1
 8007744:	4618      	mov	r0, r3
 8007746:	f7ff fb31 	bl	8006dac <xilWriteData>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d001      	beq.n	8007754 <finalizeCommandResponse+0x30>
        return XIL_INTERFACE_LIB_ERROR;      
 8007750:	2301      	movs	r3, #1
 8007752:	e016      	b.n	8007782 <finalizeCommandResponse+0x5e>
      }
      /* send error id */
	  memUnitData = (MemUnit_T) errorId;
 8007754:	79fb      	ldrb	r3, [r7, #7]
 8007756:	73fb      	strb	r3, [r7, #15]
      if (xilWriteData(&memUnitData, sizeof(memUnitData)) != XIL_DATA_STREAM_SUCCESS) {
 8007758:	f107 030f 	add.w	r3, r7, #15
 800775c:	2101      	movs	r1, #1
 800775e:	4618      	mov	r0, r3
 8007760:	f7ff fb24 	bl	8006dac <xilWriteData>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <finalizeCommandResponse+0x4a>
         return XIL_INTERFACE_LIB_ERROR;      
 800776a:	2301      	movs	r3, #1
 800776c:	e009      	b.n	8007782 <finalizeCommandResponse+0x5e>
      }	  
   }
   /* flush the output stream 
    * before beginning next command */
   if (xilDataFlush(isEndOfXILStep) != XIL_DATA_STREAM_SUCCESS) {
 800776e:	79bb      	ldrb	r3, [r7, #6]
 8007770:	4618      	mov	r0, r3
 8007772:	f7ff fbbf 	bl	8006ef4 <xilDataFlush>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <finalizeCommandResponse+0x5c>
      return XIL_INTERFACE_LIB_ERROR;      
 800777c:	2301      	movs	r3, #1
 800777e:	e000      	b.n	8007782 <finalizeCommandResponse+0x5e>
   }   
   return XIL_INTERFACE_LIB_SUCCESS;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
	...

0800778c <computeNextState>:

/* Given current state and command, compute the next state for handleReceive */
static XIL_HANDLE_RECV_STATE computeNextState(XIL_HANDLE_RECV_STATE state, XIL_COMMAND_TYPE_ENUM command) {
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	4603      	mov	r3, r0
 8007794:	460a      	mov	r2, r1
 8007796:	71fb      	strb	r3, [r7, #7]
 8007798:	4613      	mov	r3, r2
 800779a:	71bb      	strb	r3, [r7, #6]
    
    XIL_HANDLE_RECV_STATE nextState;
    
    switch(state) {
 800779c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077a0:	2b05      	cmp	r3, #5
 80077a2:	f200 80e8 	bhi.w	8007976 <computeNextState+0x1ea>
 80077a6:	a201      	add	r2, pc, #4	; (adr r2, 80077ac <computeNextState+0x20>)
 80077a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ac:	080077c5 	.word	0x080077c5
 80077b0:	0800781d 	.word	0x0800781d
 80077b4:	08007881 	.word	0x08007881
 80077b8:	080078c3 	.word	0x080078c3
 80077bc:	08007919 	.word	0x08007919
 80077c0:	08007971 	.word	0x08007971
        case XIL_READ_COMMAND_CODE:
            switch(command) {
 80077c4:	79bb      	ldrb	r3, [r7, #6]
 80077c6:	2b0d      	cmp	r3, #13
 80077c8:	d824      	bhi.n	8007814 <computeNextState+0x88>
 80077ca:	a201      	add	r2, pc, #4	; (adr r2, 80077d0 <computeNextState+0x44>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	08007809 	.word	0x08007809
 80077d4:	08007809 	.word	0x08007809
 80077d8:	08007809 	.word	0x08007809
 80077dc:	08007809 	.word	0x08007809
 80077e0:	08007809 	.word	0x08007809
 80077e4:	08007809 	.word	0x08007809
 80077e8:	08007809 	.word	0x08007809
 80077ec:	08007809 	.word	0x08007809
 80077f0:	08007809 	.word	0x08007809
 80077f4:	08007809 	.word	0x08007809
 80077f8:	0800780f 	.word	0x0800780f
 80077fc:	08007809 	.word	0x08007809
 8007800:	08007809 	.word	0x08007809
 8007804:	08007809 	.word	0x08007809
                case XIL_CLIENT_SERVER_COMMAND:
                case XIL_UPDATE_COMMAND:
                case XIL_OUTPUT_COMMAND:
                case XIL_SYSTEM_RESET_COMMAND:
                case XIL_PAUSE_COMMAND:
                    nextState = XIL_READ_FCNID;
 8007808:	2301      	movs	r3, #1
 800780a:	73fb      	strb	r3, [r7, #15]
                    break;
 800780c:	e005      	b.n	800781a <computeNextState+0x8e>
                case XIL_SHUTDOWN_COMMAND:
                    nextState = XIL_READ_FCNID;
 800780e:	2301      	movs	r3, #1
 8007810:	73fb      	strb	r3, [r7, #15]
                    break;
 8007812:	e002      	b.n	800781a <computeNextState+0x8e>
                default:
                    nextState = XIL_INVALID_STATE;
 8007814:	23ff      	movs	r3, #255	; 0xff
 8007816:	73fb      	strb	r3, [r7, #15]
                    break;
 8007818:	bf00      	nop
            }
            break;
 800781a:	e0af      	b.n	800797c <computeNextState+0x1f0>
        case XIL_READ_FCNID:
            switch(command) {
 800781c:	79bb      	ldrb	r3, [r7, #6]
 800781e:	2b0d      	cmp	r3, #13
 8007820:	d82a      	bhi.n	8007878 <computeNextState+0xec>
 8007822:	a201      	add	r2, pc, #4	; (adr r2, 8007828 <computeNextState+0x9c>)
 8007824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007828:	08007861 	.word	0x08007861
 800782c:	0800786d 	.word	0x0800786d
 8007830:	0800786d 	.word	0x0800786d
 8007834:	08007873 	.word	0x08007873
 8007838:	0800786d 	.word	0x0800786d
 800783c:	08007873 	.word	0x08007873
 8007840:	08007873 	.word	0x08007873
 8007844:	08007867 	.word	0x08007867
 8007848:	0800786d 	.word	0x0800786d
 800784c:	08007873 	.word	0x08007873
 8007850:	08007879 	.word	0x08007879
 8007854:	08007873 	.word	0x08007873
 8007858:	0800786d 	.word	0x0800786d
 800785c:	08007861 	.word	0x08007861
                case XIL_INIT_COMMAND:
                case XIL_PAUSE_COMMAND:
                    nextState = XIL_CALL_XILINTERFACE;
 8007860:	2304      	movs	r3, #4
 8007862:	73fb      	strb	r3, [r7, #15]
                    break;
 8007864:	e00b      	b.n	800787e <computeNextState+0xf2>
                case XIL_CONST_OUTPUT_COMMAND:
                    nextState = XIL_PROCESS_TARGET_TO_HOST_DATA;
 8007866:	2305      	movs	r3, #5
 8007868:	73fb      	strb	r3, [r7, #15]
                    break;
 800786a:	e008      	b.n	800787e <computeNextState+0xf2>
                case XIL_INITIALIZE_COMMAND:
                case XIL_SYSTEM_INITIALIZE_COMMAND:
                case XIL_TERMINATE_COMMAND:
                case XIL_PROCESS_PARAMS_COMMAND:
                case XIL_SYSTEM_RESET_COMMAND:
                    nextState = XIL_PROCESS_HOST_TO_TARGET_DATA;
 800786c:	2303      	movs	r3, #3
 800786e:	73fb      	strb	r3, [r7, #15]
                    break;
 8007870:	e005      	b.n	800787e <computeNextState+0xf2>
                case XIL_ENABLE_COMMAND:
                case XIL_DISABLE_COMMAND:
                case XIL_CLIENT_SERVER_COMMAND:  
                case XIL_UPDATE_COMMAND:
                case XIL_OUTPUT_COMMAND:
                    nextState = XIL_READ_XILTID;
 8007872:	2302      	movs	r3, #2
 8007874:	73fb      	strb	r3, [r7, #15]
                    break;
 8007876:	e002      	b.n	800787e <computeNextState+0xf2>
                default:
                    nextState = XIL_INVALID_STATE;
 8007878:	23ff      	movs	r3, #255	; 0xff
 800787a:	73fb      	strb	r3, [r7, #15]
                    break;
 800787c:	bf00      	nop
            }
            break;            
 800787e:	e07d      	b.n	800797c <computeNextState+0x1f0>
        case XIL_READ_XILTID:
            switch(command) {
 8007880:	79bb      	ldrb	r3, [r7, #6]
 8007882:	3b03      	subs	r3, #3
 8007884:	2b08      	cmp	r3, #8
 8007886:	d818      	bhi.n	80078ba <computeNextState+0x12e>
 8007888:	a201      	add	r2, pc, #4	; (adr r2, 8007890 <computeNextState+0x104>)
 800788a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788e:	bf00      	nop
 8007890:	080078b5 	.word	0x080078b5
 8007894:	080078bb 	.word	0x080078bb
 8007898:	080078b5 	.word	0x080078b5
 800789c:	080078b5 	.word	0x080078b5
 80078a0:	080078bb 	.word	0x080078bb
 80078a4:	080078bb 	.word	0x080078bb
 80078a8:	080078b5 	.word	0x080078b5
 80078ac:	080078bb 	.word	0x080078bb
 80078b0:	080078b5 	.word	0x080078b5
                case XIL_ENABLE_COMMAND:
                case XIL_DISABLE_COMMAND:
                case XIL_CLIENT_SERVER_COMMAND:
                case XIL_OUTPUT_COMMAND:
                case XIL_UPDATE_COMMAND:
                    nextState = XIL_PROCESS_HOST_TO_TARGET_DATA;
 80078b4:	2303      	movs	r3, #3
 80078b6:	73fb      	strb	r3, [r7, #15]
                    break;
 80078b8:	e002      	b.n	80078c0 <computeNextState+0x134>
                default:
                    nextState = XIL_INVALID_STATE;
 80078ba:	23ff      	movs	r3, #255	; 0xff
 80078bc:	73fb      	strb	r3, [r7, #15]
                    break;
 80078be:	bf00      	nop
            }
            break;
 80078c0:	e05c      	b.n	800797c <computeNextState+0x1f0>
        case XIL_PROCESS_HOST_TO_TARGET_DATA:
            switch(command) {
 80078c2:	79bb      	ldrb	r3, [r7, #6]
 80078c4:	3b01      	subs	r3, #1
 80078c6:	2b0c      	cmp	r3, #12
 80078c8:	d822      	bhi.n	8007910 <computeNextState+0x184>
 80078ca:	a201      	add	r2, pc, #4	; (adr r2, 80078d0 <computeNextState+0x144>)
 80078cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d0:	08007905 	.word	0x08007905
 80078d4:	08007905 	.word	0x08007905
 80078d8:	08007905 	.word	0x08007905
 80078dc:	08007905 	.word	0x08007905
 80078e0:	08007905 	.word	0x08007905
 80078e4:	08007905 	.word	0x08007905
 80078e8:	08007911 	.word	0x08007911
 80078ec:	08007905 	.word	0x08007905
 80078f0:	0800790b 	.word	0x0800790b
 80078f4:	08007911 	.word	0x08007911
 80078f8:	08007905 	.word	0x08007905
 80078fc:	08007905 	.word	0x08007905
 8007900:	08007905 	.word	0x08007905
                case XIL_PROCESS_PARAMS_COMMAND:
                case XIL_OUTPUT_COMMAND:
                case XIL_UPDATE_COMMAND:
                case XIL_SYSTEM_RESET_COMMAND:
                case XIL_PAUSE_COMMAND:
                    nextState = XIL_CALL_XILINTERFACE;
 8007904:	2304      	movs	r3, #4
 8007906:	73fb      	strb	r3, [r7, #15]
                    break;
 8007908:	e005      	b.n	8007916 <computeNextState+0x18a>
                case XIL_CLIENT_SERVER_COMMAND:
                    nextState = XIL_COMPLETE;
 800790a:	2306      	movs	r3, #6
 800790c:	73fb      	strb	r3, [r7, #15]
                    break;
 800790e:	e002      	b.n	8007916 <computeNextState+0x18a>
                default:
                    nextState = XIL_INVALID_STATE;
 8007910:	23ff      	movs	r3, #255	; 0xff
 8007912:	73fb      	strb	r3, [r7, #15]
                    break;
 8007914:	bf00      	nop
            }
            break;
 8007916:	e031      	b.n	800797c <computeNextState+0x1f0>
        case XIL_CALL_XILINTERFACE:
            switch(command) {
 8007918:	79bb      	ldrb	r3, [r7, #6]
 800791a:	2b0d      	cmp	r3, #13
 800791c:	d824      	bhi.n	8007968 <computeNextState+0x1dc>
 800791e:	a201      	add	r2, pc, #4	; (adr r2, 8007924 <computeNextState+0x198>)
 8007920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007924:	0800795d 	.word	0x0800795d
 8007928:	08007963 	.word	0x08007963
 800792c:	08007963 	.word	0x08007963
 8007930:	08007963 	.word	0x08007963
 8007934:	08007963 	.word	0x08007963
 8007938:	08007963 	.word	0x08007963
 800793c:	08007963 	.word	0x08007963
 8007940:	08007963 	.word	0x08007963
 8007944:	0800795d 	.word	0x0800795d
 8007948:	08007969 	.word	0x08007969
 800794c:	08007969 	.word	0x08007969
 8007950:	0800795d 	.word	0x0800795d
 8007954:	08007963 	.word	0x08007963
 8007958:	08007963 	.word	0x08007963
                case XIL_UPDATE_COMMAND:
                case XIL_INIT_COMMAND:
                case XIL_PROCESS_PARAMS_COMMAND:
                    nextState = XIL_COMPLETE;
 800795c:	2306      	movs	r3, #6
 800795e:	73fb      	strb	r3, [r7, #15]
                    break;
 8007960:	e005      	b.n	800796e <computeNextState+0x1e2>
                case XIL_DISABLE_COMMAND:                
                case XIL_OUTPUT_COMMAND:
                case XIL_SYSTEM_RESET_COMMAND:
                case XIL_PAUSE_COMMAND:
                case XIL_TERMINATE_COMMAND:   
                    nextState = XIL_PROCESS_TARGET_TO_HOST_DATA;
 8007962:	2305      	movs	r3, #5
 8007964:	73fb      	strb	r3, [r7, #15]
                    break;
 8007966:	e002      	b.n	800796e <computeNextState+0x1e2>
                default:
                    nextState = XIL_INVALID_STATE;
 8007968:	23ff      	movs	r3, #255	; 0xff
 800796a:	73fb      	strb	r3, [r7, #15]
                    break;
 800796c:	bf00      	nop
            }
            break;
 800796e:	e005      	b.n	800797c <computeNextState+0x1f0>
        case XIL_PROCESS_TARGET_TO_HOST_DATA:
            /* done */
            nextState = XIL_COMPLETE;
 8007970:	2306      	movs	r3, #6
 8007972:	73fb      	strb	r3, [r7, #15]
            break;
 8007974:	e002      	b.n	800797c <computeNextState+0x1f0>
        default:
            nextState = XIL_INVALID_STATE;
 8007976:	23ff      	movs	r3, #255	; 0xff
 8007978:	73fb      	strb	r3, [r7, #15]
            break;
 800797a:	bf00      	nop
    }
    return nextState;
 800797c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <xilReadCommandCode>:

#define XIL_EXIT_ERROR_IF_INVALID_STATE if (cc.state == XIL_INVALID_STATE) {      \
                                         XIL_RUN_EXIT_ERROR;                   \
                                      }                                                                                           

static void xilReadCommandCode(void) {
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
    MemUnit_T commandCode;    
    if (cc.state==XIL_READ_COMMAND_CODE) {
 8007992:	4b1d      	ldr	r3, [pc, #116]	; (8007a08 <xilReadCommandCode+0x7c>)
 8007994:	f993 3000 	ldrsb.w	r3, [r3]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d131      	bne.n	8007a00 <xilReadCommandCode+0x74>
        /* read commandCode */

        xilReadData(&(commandCode), XIL_COMMAND_TYPE_SIZE);
 800799c:	1dfb      	adds	r3, r7, #7
 800799e:	2101      	movs	r1, #1
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7ff fa51 	bl	8006e48 <xilReadData>

        /* cast from the MemUnit commandCode to the enumeration commandCode */
        cc.command = (XIL_COMMAND_TYPE_ENUM) commandCode;
 80079a6:	79fa      	ldrb	r2, [r7, #7]
 80079a8:	4b17      	ldr	r3, [pc, #92]	; (8007a08 <xilReadCommandCode+0x7c>)
 80079aa:	705a      	strb	r2, [r3, #1]
            
        if (cc.command == XIL_SHUTDOWN_COMMAND) {
 80079ac:	4b16      	ldr	r3, [pc, #88]	; (8007a08 <xilReadCommandCode+0x7c>)
 80079ae:	785b      	ldrb	r3, [r3, #1]
 80079b0:	2b0a      	cmp	r3, #10
 80079b2:	d10d      	bne.n	80079d0 <xilReadCommandCode+0x44>
			/* Terminate this process when XIL simulation is complete */
            isShutdownCommand = 1;             
 80079b4:	4b15      	ldr	r3, [pc, #84]	; (8007a0c <xilReadCommandCode+0x80>)
 80079b6:	2201      	movs	r2, #1
 80079b8:	601a      	str	r2, [r3, #0]
            if (finalizeCommandResponse(XIL_RESPONSE_ERROR_TERMINATE, 1) != XIL_INTERFACE_LIB_SUCCESS) {
 80079ba:	2101      	movs	r1, #1
 80079bc:	2008      	movs	r0, #8
 80079be:	f7ff feb1 	bl	8007724 <finalizeCommandResponse>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d01a      	beq.n	80079fe <xilReadCommandCode+0x72>
                XIL_RUN_EXIT_ERROR;
 80079c8:	4b11      	ldr	r3, [pc, #68]	; (8007a10 <xilReadCommandCode+0x84>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	e017      	b.n	8007a00 <xilReadCommandCode+0x74>
            else {
                XIL_RUN_EXIT;
            }
        } else {
            /* compute next state */
            cc.state = computeNextState(cc.state, cc.command);
 80079d0:	4b0d      	ldr	r3, [pc, #52]	; (8007a08 <xilReadCommandCode+0x7c>)
 80079d2:	f993 2000 	ldrsb.w	r2, [r3]
 80079d6:	4b0c      	ldr	r3, [pc, #48]	; (8007a08 <xilReadCommandCode+0x7c>)
 80079d8:	785b      	ldrb	r3, [r3, #1]
 80079da:	4619      	mov	r1, r3
 80079dc:	4610      	mov	r0, r2
 80079de:	f7ff fed5 	bl	800778c <computeNextState>
 80079e2:	4603      	mov	r3, r0
 80079e4:	461a      	mov	r2, r3
 80079e6:	4b08      	ldr	r3, [pc, #32]	; (8007a08 <xilReadCommandCode+0x7c>)
 80079e8:	701a      	strb	r2, [r3, #0]
            XIL_EXIT_ERROR_IF_INVALID_STATE;
 80079ea:	4b07      	ldr	r3, [pc, #28]	; (8007a08 <xilReadCommandCode+0x7c>)
 80079ec:	f993 3000 	ldrsb.w	r3, [r3]
 80079f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f4:	d104      	bne.n	8007a00 <xilReadCommandCode+0x74>
 80079f6:	4b06      	ldr	r3, [pc, #24]	; (8007a10 <xilReadCommandCode+0x84>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	601a      	str	r2, [r3, #0]
 80079fc:	e000      	b.n	8007a00 <xilReadCommandCode+0x74>
                XIL_RUN_EXIT;
 80079fe:	bf00      	nop
        }
    }
}
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	200001bc 	.word	0x200001bc
 8007a0c:	200001b4 	.word	0x200001b4
 8007a10:	20000028 	.word	0x20000028

08007a14 <xilProcessMsg>:
                           
void xilProcessMsg(void) { 
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
    /* read commandCode */
    xilReadCommandCode();
 8007a1a:	f7ff ffb7 	bl	800798c <xilReadCommandCode>
    
    if (cc.state==XIL_READ_FCNID) {
 8007a1e:	4bbf      	ldr	r3, [pc, #764]	; (8007d1c <xilProcessMsg+0x308>)
 8007a20:	f993 3000 	ldrsb.w	r3, [r3]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d11a      	bne.n	8007a5e <xilProcessMsg+0x4a>
        /* read fcnId */
#ifdef HOST_BIG_ENDIAN_PROTOCOL_TESTING
        xilReadDataAndSwapBytes(((MemUnit_T*)&(cc.fcnId)), XIL_COMMAND_FCNID_SIZE);
#else
        xilReadData(((MemUnit_T*)&(cc.fcnId)), XIL_COMMAND_FCNID_SIZE);
 8007a28:	2104      	movs	r1, #4
 8007a2a:	48bd      	ldr	r0, [pc, #756]	; (8007d20 <xilProcessMsg+0x30c>)
 8007a2c:	f7ff fa0c 	bl	8006e48 <xilReadData>
#endif /*HOST_BIG_ENDIAN_PROTOCOL_TESTING*/
        

            
        /* compute next state */
        cc.state = computeNextState(cc.state, cc.command);
 8007a30:	4bba      	ldr	r3, [pc, #744]	; (8007d1c <xilProcessMsg+0x308>)
 8007a32:	f993 2000 	ldrsb.w	r2, [r3]
 8007a36:	4bb9      	ldr	r3, [pc, #740]	; (8007d1c <xilProcessMsg+0x308>)
 8007a38:	785b      	ldrb	r3, [r3, #1]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	f7ff fea5 	bl	800778c <computeNextState>
 8007a42:	4603      	mov	r3, r0
 8007a44:	461a      	mov	r2, r3
 8007a46:	4bb5      	ldr	r3, [pc, #724]	; (8007d1c <xilProcessMsg+0x308>)
 8007a48:	701a      	strb	r2, [r3, #0]
        XIL_EXIT_ERROR_IF_INVALID_STATE;
 8007a4a:	4bb4      	ldr	r3, [pc, #720]	; (8007d1c <xilProcessMsg+0x308>)
 8007a4c:	f993 3000 	ldrsb.w	r3, [r3]
 8007a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a54:	d103      	bne.n	8007a5e <xilProcessMsg+0x4a>
 8007a56:	4bb3      	ldr	r3, [pc, #716]	; (8007d24 <xilProcessMsg+0x310>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]
 8007a5c:	e21d      	b.n	8007e9a <xilProcessMsg+0x486>
    }
        
        
    if (cc.state==XIL_READ_XILTID) {
 8007a5e:	4baf      	ldr	r3, [pc, #700]	; (8007d1c <xilProcessMsg+0x308>)
 8007a60:	f993 3000 	ldrsb.w	r3, [r3]
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d11a      	bne.n	8007a9e <xilProcessMsg+0x8a>
        /* read commandIdx */
        
#ifdef HOST_BIG_ENDIAN_PROTOCOL_TESTING
        xilReadDataAndSwapBytes(((MemUnit_T*)&(cc.commandIdx)), XIL_COMMAND_XILTID_SIZE);
#else
        xilReadData(((MemUnit_T*)&(cc.commandIdx)), XIL_COMMAND_XILTID_SIZE);
 8007a68:	2104      	movs	r1, #4
 8007a6a:	48af      	ldr	r0, [pc, #700]	; (8007d28 <xilProcessMsg+0x314>)
 8007a6c:	f7ff f9ec 	bl	8006e48 <xilReadData>
#endif /*HOST_BIG_ENDIAN_PROTOCOL_TESTING*/

        /* compute next state */
        cc.state = computeNextState(cc.state, cc.command);
 8007a70:	4baa      	ldr	r3, [pc, #680]	; (8007d1c <xilProcessMsg+0x308>)
 8007a72:	f993 2000 	ldrsb.w	r2, [r3]
 8007a76:	4ba9      	ldr	r3, [pc, #676]	; (8007d1c <xilProcessMsg+0x308>)
 8007a78:	785b      	ldrb	r3, [r3, #1]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	f7ff fe85 	bl	800778c <computeNextState>
 8007a82:	4603      	mov	r3, r0
 8007a84:	461a      	mov	r2, r3
 8007a86:	4ba5      	ldr	r3, [pc, #660]	; (8007d1c <xilProcessMsg+0x308>)
 8007a88:	701a      	strb	r2, [r3, #0]
            XIL_EXIT_ERROR_IF_INVALID_STATE;
 8007a8a:	4ba4      	ldr	r3, [pc, #656]	; (8007d1c <xilProcessMsg+0x308>)
 8007a8c:	f993 3000 	ldrsb.w	r3, [r3]
 8007a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a94:	d103      	bne.n	8007a9e <xilProcessMsg+0x8a>
 8007a96:	4ba3      	ldr	r3, [pc, #652]	; (8007d24 <xilProcessMsg+0x310>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	e1fd      	b.n	8007e9a <xilProcessMsg+0x486>
    }
        
    if (cc.state == XIL_PROCESS_HOST_TO_TARGET_DATA) {
 8007a9e:	4b9f      	ldr	r3, [pc, #636]	; (8007d1c <xilProcessMsg+0x308>)
 8007aa0:	f993 3000 	ldrsb.w	r3, [r3]
 8007aa4:	2b03      	cmp	r3, #3
 8007aa6:	d137      	bne.n	8007b18 <xilProcessMsg+0x104>
        /* process inputs if required by command */
        XIL_PROCESSDATA_ERROR_CODE processDataError;
        /* process data from host */
        processDataError = processHostToTargetData(cc.fcnId, cc.command, cc.commandIdx);
 8007aa8:	4b9c      	ldr	r3, [pc, #624]	; (8007d1c <xilProcessMsg+0x308>)
 8007aaa:	6898      	ldr	r0, [r3, #8]
 8007aac:	4b9b      	ldr	r3, [pc, #620]	; (8007d1c <xilProcessMsg+0x308>)
 8007aae:	7859      	ldrb	r1, [r3, #1]
 8007ab0:	4b9a      	ldr	r3, [pc, #616]	; (8007d1c <xilProcessMsg+0x308>)
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	f7ff fd91 	bl	80075dc <processHostToTargetData>
 8007aba:	4603      	mov	r3, r0
 8007abc:	71fb      	strb	r3, [r7, #7]
        if (processDataError == XIL_PROCESSDATA_DATA_STREAM_ERROR) {
 8007abe:	79fb      	ldrb	r3, [r7, #7]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d103      	bne.n	8007acc <xilProcessMsg+0xb8>
            XIL_RUN_EXIT_ERROR;
 8007ac4:	4b97      	ldr	r3, [pc, #604]	; (8007d24 <xilProcessMsg+0x310>)
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	601a      	str	r2, [r3, #0]
 8007aca:	e1e6      	b.n	8007e9a <xilProcessMsg+0x486>
        } else if (processDataError != XIL_PROCESSDATA_SUCCESS) {
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00b      	beq.n	8007aea <xilProcessMsg+0xd6>
            if (finalizeCommandResponse(XIL_RESPONSE_ERROR_PROCESS_UDATA, 1) != XIL_INTERFACE_LIB_SUCCESS) {
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	2001      	movs	r0, #1
 8007ad6:	f7ff fe25 	bl	8007724 <finalizeCommandResponse>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 81c3 	beq.w	8007e68 <xilProcessMsg+0x454>
                XIL_RUN_EXIT_ERROR;
 8007ae2:	4b90      	ldr	r3, [pc, #576]	; (8007d24 <xilProcessMsg+0x310>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	e1d7      	b.n	8007e9a <xilProcessMsg+0x486>
                XIL_RUN_EXIT;
            }
        }
            
        /* compute next state */
        cc.state = computeNextState(cc.state, cc.command);
 8007aea:	4b8c      	ldr	r3, [pc, #560]	; (8007d1c <xilProcessMsg+0x308>)
 8007aec:	f993 2000 	ldrsb.w	r2, [r3]
 8007af0:	4b8a      	ldr	r3, [pc, #552]	; (8007d1c <xilProcessMsg+0x308>)
 8007af2:	785b      	ldrb	r3, [r3, #1]
 8007af4:	4619      	mov	r1, r3
 8007af6:	4610      	mov	r0, r2
 8007af8:	f7ff fe48 	bl	800778c <computeNextState>
 8007afc:	4603      	mov	r3, r0
 8007afe:	461a      	mov	r2, r3
 8007b00:	4b86      	ldr	r3, [pc, #536]	; (8007d1c <xilProcessMsg+0x308>)
 8007b02:	701a      	strb	r2, [r3, #0]
            XIL_EXIT_ERROR_IF_INVALID_STATE
 8007b04:	4b85      	ldr	r3, [pc, #532]	; (8007d1c <xilProcessMsg+0x308>)
 8007b06:	f993 3000 	ldrsb.w	r3, [r3]
 8007b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0e:	d103      	bne.n	8007b18 <xilProcessMsg+0x104>
 8007b10:	4b84      	ldr	r3, [pc, #528]	; (8007d24 <xilProcessMsg+0x310>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	e1c0      	b.n	8007e9a <xilProcessMsg+0x486>
    }
        
    if (cc.state == XIL_CALL_XILINTERFACE) {
 8007b18:	4b80      	ldr	r3, [pc, #512]	; (8007d1c <xilProcessMsg+0x308>)
 8007b1a:	f993 3000 	ldrsb.w	r3, [r3]
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	f040 814a 	bne.w	8007db8 <xilProcessMsg+0x3a4>
        /* call xilInterface function */
        switch(cc.command) {
 8007b24:	4b7d      	ldr	r3, [pc, #500]	; (8007d1c <xilProcessMsg+0x308>)
 8007b26:	785b      	ldrb	r3, [r3, #1]
 8007b28:	2b0d      	cmp	r3, #13
 8007b2a:	f200 8113 	bhi.w	8007d54 <xilProcessMsg+0x340>
 8007b2e:	a201      	add	r2, pc, #4	; (adr r2, 8007b34 <xilProcessMsg+0x120>)
 8007b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b34:	08007b6d 	.word	0x08007b6d
 8007b38:	08007bbd 	.word	0x08007bbd
 8007b3c:	08007c11 	.word	0x08007c11
 8007b40:	08007cef 	.word	0x08007cef
 8007b44:	08007c3b 	.word	0x08007c3b
 8007b48:	08007c65 	.word	0x08007c65
 8007b4c:	08007c93 	.word	0x08007c93
 8007b50:	08007d5d 	.word	0x08007d5d
 8007b54:	08007b93 	.word	0x08007b93
 8007b58:	08007d55 	.word	0x08007d55
 8007b5c:	08007d55 	.word	0x08007d55
 8007b60:	08007cc1 	.word	0x08007cc1
 8007b64:	08007d2d 	.word	0x08007d2d
 8007b68:	08007be7 	.word	0x08007be7
#ifndef OUT_OF_PROCESS_EXEC
            case XIL_INIT_COMMAND:
            {
#if CODER_ASSUMPTIONS_ENABLED == 1
                /* run validation of coder assumptions */
                if (coderAssumptionsRun() != XIL_INTERFACE_LIB_SUCCESS) {
 8007b6c:	f7fe f9bb 	bl	8005ee6 <coderAssumptionsRun>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <xilProcessMsg+0x16a>
                    XIL_RUN_EXIT_ERROR;
 8007b76:	4b6b      	ldr	r3, [pc, #428]	; (8007d24 <xilProcessMsg+0x310>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	601a      	str	r2, [r3, #0]
 8007b7c:	e18d      	b.n	8007e9a <xilProcessMsg+0x486>
                } 
#endif
                if (xilGetDataTypeInfo() != XIL_INTERFACE_SUCCESS) {
 8007b7e:	f7ff f9ef 	bl	8006f60 <xilGetDataTypeInfo>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 80eb 	beq.w	8007d60 <xilProcessMsg+0x34c>
                    XIL_RUN_EXIT_ERROR;
 8007b8a:	4b66      	ldr	r3, [pc, #408]	; (8007d24 <xilProcessMsg+0x310>)
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	e183      	b.n	8007e9a <xilProcessMsg+0x486>
            }
            case XIL_CONST_OUTPUT_COMMAND:
                /* no function */
                break;
            case XIL_PROCESS_PARAMS_COMMAND:
                if (xilProcessParams(cc.fcnId) != XIL_INTERFACE_SUCCESS) {
 8007b92:	4b62      	ldr	r3, [pc, #392]	; (8007d1c <xilProcessMsg+0x308>)
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7ff f9d2 	bl	8006f40 <xilProcessParams>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 80e0 	beq.w	8007d64 <xilProcessMsg+0x350>
                    if (finalizeCommandResponse(XIL_RESPONSE_ERROR_PROCESS_PARAMS, 1) != XIL_INTERFACE_LIB_SUCCESS) {
 8007ba4:	2101      	movs	r1, #1
 8007ba6:	2003      	movs	r0, #3
 8007ba8:	f7ff fdbc 	bl	8007724 <finalizeCommandResponse>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 815c 	beq.w	8007e6c <xilProcessMsg+0x458>
                        XIL_RUN_EXIT_ERROR;
 8007bb4:	4b5b      	ldr	r3, [pc, #364]	; (8007d24 <xilProcessMsg+0x310>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	e16e      	b.n	8007e9a <xilProcessMsg+0x486>
                        XIL_RUN_EXIT;
                    }
                }
                break;
            case XIL_INITIALIZE_COMMAND:
                if (xilInitialize(cc.fcnId) != XIL_INTERFACE_SUCCESS) {
 8007bbc:	4b57      	ldr	r3, [pc, #348]	; (8007d1c <xilProcessMsg+0x308>)
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7ff f9fb 	bl	8006fbc <xilInitialize>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 80cd 	beq.w	8007d68 <xilProcessMsg+0x354>
                    if (finalizeCommandResponse(XIL_RESPONSE_ERROR_INITIALIZE, 1) != XIL_INTERFACE_LIB_SUCCESS) {
 8007bce:	2101      	movs	r1, #1
 8007bd0:	2004      	movs	r0, #4
 8007bd2:	f7ff fda7 	bl	8007724 <finalizeCommandResponse>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 8149 	beq.w	8007e70 <xilProcessMsg+0x45c>
                        XIL_RUN_EXIT_ERROR;
 8007bde:	4b51      	ldr	r3, [pc, #324]	; (8007d24 <xilProcessMsg+0x310>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	601a      	str	r2, [r3, #0]
 8007be4:	e159      	b.n	8007e9a <xilProcessMsg+0x486>
                        XIL_RUN_EXIT;
                    }
                }
                break;
            case XIL_PAUSE_COMMAND:
                if (xilPause(cc.fcnId) != XIL_INTERFACE_SUCCESS) {
 8007be6:	4b4d      	ldr	r3, [pc, #308]	; (8007d1c <xilProcessMsg+0x308>)
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7ff fa54 	bl	8007098 <xilPause>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 80ba 	beq.w	8007d6c <xilProcessMsg+0x358>
                    if (finalizeCommandResponse(XIL_RESPONSE_ERROR_INITIALIZE, 1) != XIL_INTERFACE_LIB_SUCCESS) {
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	2004      	movs	r0, #4
 8007bfc:	f7ff fd92 	bl	8007724 <finalizeCommandResponse>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 8136 	beq.w	8007e74 <xilProcessMsg+0x460>
                        XIL_RUN_EXIT_ERROR;
 8007c08:	4b46      	ldr	r3, [pc, #280]	; (8007d24 <xilProcessMsg+0x310>)
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	e144      	b.n	8007e9a <xilProcessMsg+0x486>
                        XIL_RUN_EXIT;
                    }
                }
                break;
            case XIL_SYSTEM_INITIALIZE_COMMAND:
                if (xilSystemInitialize(cc.fcnId) != XIL_INTERFACE_SUCCESS) {
 8007c10:	4b42      	ldr	r3, [pc, #264]	; (8007d1c <xilProcessMsg+0x308>)
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7ff fa51 	bl	80070bc <xilSystemInitialize>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 80a7 	beq.w	8007d70 <xilProcessMsg+0x35c>
                    if (finalizeCommandResponse(XIL_RESPONSE_ERROR_SYSTEM_INITIALIZE, 1) != XIL_INTERFACE_LIB_SUCCESS) {
 8007c22:	2101      	movs	r1, #1
 8007c24:	2005      	movs	r0, #5
 8007c26:	f7ff fd7d 	bl	8007724 <finalizeCommandResponse>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 8123 	beq.w	8007e78 <xilProcessMsg+0x464>
                        XIL_RUN_EXIT_ERROR;
 8007c32:	4b3c      	ldr	r3, [pc, #240]	; (8007d24 <xilProcessMsg+0x310>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	e12f      	b.n	8007e9a <xilProcessMsg+0x486>
                        XIL_RUN_EXIT;
                    }
                }
                break;
            case XIL_TERMINATE_COMMAND:
                if (xilTerminate(cc.fcnId) != XIL_INTERFACE_SUCCESS) {
 8007c3a:	4b38      	ldr	r3, [pc, #224]	; (8007d1c <xilProcessMsg+0x308>)
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7ff fc86 	bl	8007550 <xilTerminate>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f000 8094 	beq.w	8007d74 <xilProcessMsg+0x360>
                    if (finalizeCommandResponse(XIL_RESPONSE_ERROR_TERMINATE, 1) != XIL_INTERFACE_LIB_SUCCESS) {
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	2008      	movs	r0, #8
 8007c50:	f7ff fd68 	bl	8007724 <finalizeCommandResponse>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f000 8110 	beq.w	8007e7c <xilProcessMsg+0x468>
                        XIL_RUN_EXIT_ERROR;
 8007c5c:	4b31      	ldr	r3, [pc, #196]	; (8007d24 <xilProcessMsg+0x310>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	601a      	str	r2, [r3, #0]
 8007c62:	e11a      	b.n	8007e9a <xilProcessMsg+0x486>
                        XIL_RUN_EXIT;
                    }
                }
                break;
            case XIL_ENABLE_COMMAND:
                if (xilEnable(cc.fcnId, cc.commandIdx) != XIL_INTERFACE_SUCCESS) {
 8007c64:	4b2d      	ldr	r3, [pc, #180]	; (8007d1c <xilProcessMsg+0x308>)
 8007c66:	689a      	ldr	r2, [r3, #8]
 8007c68:	4b2c      	ldr	r3, [pc, #176]	; (8007d1c <xilProcessMsg+0x308>)
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	4610      	mov	r0, r2
 8007c70:	f7ff fc7e 	bl	8007570 <xilEnable>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d07e      	beq.n	8007d78 <xilProcessMsg+0x364>
                    if (finalizeCommandResponse(XIL_RESPONSE_ERROR_ENABLE, 1) != XIL_INTERFACE_LIB_SUCCESS) {
 8007c7a:	2101      	movs	r1, #1
 8007c7c:	2009      	movs	r0, #9
 8007c7e:	f7ff fd51 	bl	8007724 <finalizeCommandResponse>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f000 80fb 	beq.w	8007e80 <xilProcessMsg+0x46c>
                        XIL_RUN_EXIT_ERROR;
 8007c8a:	4b26      	ldr	r3, [pc, #152]	; (8007d24 <xilProcessMsg+0x310>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	601a      	str	r2, [r3, #0]
 8007c90:	e103      	b.n	8007e9a <xilProcessMsg+0x486>
                        XIL_RUN_EXIT;
                    }
                }
                break;
            case XIL_DISABLE_COMMAND:
                if (xilDisable(cc.fcnId, cc.commandIdx) != XIL_INTERFACE_SUCCESS) {
 8007c92:	4b22      	ldr	r3, [pc, #136]	; (8007d1c <xilProcessMsg+0x308>)
 8007c94:	689a      	ldr	r2, [r3, #8]
 8007c96:	4b21      	ldr	r3, [pc, #132]	; (8007d1c <xilProcessMsg+0x308>)
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	f7ff fc78 	bl	8007592 <xilDisable>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d069      	beq.n	8007d7c <xilProcessMsg+0x368>
                    if (finalizeCommandResponse(XIL_RESPONSE_ERROR_DISABLE, 1) != XIL_INTERFACE_LIB_SUCCESS) {
 8007ca8:	2101      	movs	r1, #1
 8007caa:	200a      	movs	r0, #10
 8007cac:	f7ff fd3a 	bl	8007724 <finalizeCommandResponse>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f000 80e6 	beq.w	8007e84 <xilProcessMsg+0x470>
                        XIL_RUN_EXIT_ERROR;
 8007cb8:	4b1a      	ldr	r3, [pc, #104]	; (8007d24 <xilProcessMsg+0x310>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	e0ec      	b.n	8007e9a <xilProcessMsg+0x486>
                        XIL_RUN_EXIT;
                    }
                }
                break;
            case XIL_UPDATE_COMMAND:
                if (xilUpdate(cc.fcnId, cc.commandIdx) != XIL_INTERFACE_SUCCESS) {
 8007cc0:	4b16      	ldr	r3, [pc, #88]	; (8007d1c <xilProcessMsg+0x308>)
 8007cc2:	689a      	ldr	r2, [r3, #8]
 8007cc4:	4b15      	ldr	r3, [pc, #84]	; (8007d1c <xilProcessMsg+0x308>)
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	4610      	mov	r0, r2
 8007ccc:	f7ff fb68 	bl	80073a0 <xilUpdate>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d054      	beq.n	8007d80 <xilProcessMsg+0x36c>
                    if (finalizeCommandResponse(XIL_RESPONSE_ERROR_UPDATE, 1) != XIL_INTERFACE_LIB_SUCCESS) {
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	2007      	movs	r0, #7
 8007cda:	f7ff fd23 	bl	8007724 <finalizeCommandResponse>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 80d1 	beq.w	8007e88 <xilProcessMsg+0x474>
                        XIL_RUN_EXIT_ERROR;
 8007ce6:	4b0f      	ldr	r3, [pc, #60]	; (8007d24 <xilProcessMsg+0x310>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	e0d5      	b.n	8007e9a <xilProcessMsg+0x486>
                    }
                }
                break;
#endif
            case XIL_OUTPUT_COMMAND:
                if (xilOutput(cc.fcnId, cc.commandIdx) != XIL_INTERFACE_SUCCESS) {
 8007cee:	4b0b      	ldr	r3, [pc, #44]	; (8007d1c <xilProcessMsg+0x308>)
 8007cf0:	689a      	ldr	r2, [r3, #8]
 8007cf2:	4b0a      	ldr	r3, [pc, #40]	; (8007d1c <xilProcessMsg+0x308>)
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	f7ff fb05 	bl	8007308 <xilOutput>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d03f      	beq.n	8007d84 <xilProcessMsg+0x370>
                    if (finalizeCommandResponse(XIL_RESPONSE_ERROR_OUTPUT, 1) != XIL_INTERFACE_LIB_SUCCESS) {
 8007d04:	2101      	movs	r1, #1
 8007d06:	2006      	movs	r0, #6
 8007d08:	f7ff fd0c 	bl	8007724 <finalizeCommandResponse>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 80bc 	beq.w	8007e8c <xilProcessMsg+0x478>
                        XIL_RUN_EXIT_ERROR;
 8007d14:	4b03      	ldr	r3, [pc, #12]	; (8007d24 <xilProcessMsg+0x310>)
 8007d16:	2200      	movs	r2, #0
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	e0be      	b.n	8007e9a <xilProcessMsg+0x486>
 8007d1c:	200001bc 	.word	0x200001bc
 8007d20:	200001c4 	.word	0x200001c4
 8007d24:	20000028 	.word	0x20000028
 8007d28:	200001c0 	.word	0x200001c0
                    }
                }
                break;
#ifndef OUT_OF_PROCESS_EXEC
            case XIL_SYSTEM_RESET_COMMAND:
                if (xilSystemReset(cc.fcnId) != XIL_INTERFACE_SUCCESS) {
 8007d2c:	4b5c      	ldr	r3, [pc, #368]	; (8007ea0 <xilProcessMsg+0x48c>)
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7ff f9d5 	bl	80070e0 <xilSystemReset>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d025      	beq.n	8007d88 <xilProcessMsg+0x374>
                    if (finalizeCommandResponse(XIL_RESPONSE_ERROR_SYSTEM_RESET, 1) != XIL_INTERFACE_LIB_SUCCESS) {
 8007d3c:	2101      	movs	r1, #1
 8007d3e:	200b      	movs	r0, #11
 8007d40:	f7ff fcf0 	bl	8007724 <finalizeCommandResponse>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 80a2 	beq.w	8007e90 <xilProcessMsg+0x47c>
                        XIL_RUN_EXIT_ERROR;
 8007d4c:	4b55      	ldr	r3, [pc, #340]	; (8007ea4 <xilProcessMsg+0x490>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
 8007d52:	e0a2      	b.n	8007e9a <xilProcessMsg+0x486>
                    }
                }                     
                break;
#endif
            default:
                XIL_RUN_EXIT_ERROR;
 8007d54:	4b53      	ldr	r3, [pc, #332]	; (8007ea4 <xilProcessMsg+0x490>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	601a      	str	r2, [r3, #0]
 8007d5a:	e09e      	b.n	8007e9a <xilProcessMsg+0x486>
                break;
 8007d5c:	bf00      	nop
 8007d5e:	e014      	b.n	8007d8a <xilProcessMsg+0x376>
                break;
 8007d60:	bf00      	nop
 8007d62:	e012      	b.n	8007d8a <xilProcessMsg+0x376>
                break;
 8007d64:	bf00      	nop
 8007d66:	e010      	b.n	8007d8a <xilProcessMsg+0x376>
                break;
 8007d68:	bf00      	nop
 8007d6a:	e00e      	b.n	8007d8a <xilProcessMsg+0x376>
                break;
 8007d6c:	bf00      	nop
 8007d6e:	e00c      	b.n	8007d8a <xilProcessMsg+0x376>
                break;
 8007d70:	bf00      	nop
 8007d72:	e00a      	b.n	8007d8a <xilProcessMsg+0x376>
                break;
 8007d74:	bf00      	nop
 8007d76:	e008      	b.n	8007d8a <xilProcessMsg+0x376>
                break;
 8007d78:	bf00      	nop
 8007d7a:	e006      	b.n	8007d8a <xilProcessMsg+0x376>
                break;
 8007d7c:	bf00      	nop
 8007d7e:	e004      	b.n	8007d8a <xilProcessMsg+0x376>
                break;
 8007d80:	bf00      	nop
 8007d82:	e002      	b.n	8007d8a <xilProcessMsg+0x376>
                break;
 8007d84:	bf00      	nop
 8007d86:	e000      	b.n	8007d8a <xilProcessMsg+0x376>
                break;
 8007d88:	bf00      	nop
        }
        /* compute next state */
        cc.state = computeNextState(cc.state, cc.command);
 8007d8a:	4b45      	ldr	r3, [pc, #276]	; (8007ea0 <xilProcessMsg+0x48c>)
 8007d8c:	f993 2000 	ldrsb.w	r2, [r3]
 8007d90:	4b43      	ldr	r3, [pc, #268]	; (8007ea0 <xilProcessMsg+0x48c>)
 8007d92:	785b      	ldrb	r3, [r3, #1]
 8007d94:	4619      	mov	r1, r3
 8007d96:	4610      	mov	r0, r2
 8007d98:	f7ff fcf8 	bl	800778c <computeNextState>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	461a      	mov	r2, r3
 8007da0:	4b3f      	ldr	r3, [pc, #252]	; (8007ea0 <xilProcessMsg+0x48c>)
 8007da2:	701a      	strb	r2, [r3, #0]
        XIL_EXIT_ERROR_IF_INVALID_STATE;
 8007da4:	4b3e      	ldr	r3, [pc, #248]	; (8007ea0 <xilProcessMsg+0x48c>)
 8007da6:	f993 3000 	ldrsb.w	r3, [r3]
 8007daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dae:	d103      	bne.n	8007db8 <xilProcessMsg+0x3a4>
 8007db0:	4b3c      	ldr	r3, [pc, #240]	; (8007ea4 <xilProcessMsg+0x490>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	e070      	b.n	8007e9a <xilProcessMsg+0x486>
    }
    if (cc.state == XIL_PROCESS_TARGET_TO_HOST_DATA) {
 8007db8:	4b39      	ldr	r3, [pc, #228]	; (8007ea0 <xilProcessMsg+0x48c>)
 8007dba:	f993 3000 	ldrsb.w	r3, [r3]
 8007dbe:	2b05      	cmp	r3, #5
 8007dc0:	d136      	bne.n	8007e30 <xilProcessMsg+0x41c>
        XIL_PROCESSDATA_ERROR_CODE processDataError;
        /* process data from target */
        processDataError = processTargetToHostData(cc.fcnId, XIL_RESPONSE_OUTPUT_DATA, cc.command, cc.commandIdx);
 8007dc2:	4b37      	ldr	r3, [pc, #220]	; (8007ea0 <xilProcessMsg+0x48c>)
 8007dc4:	6898      	ldr	r0, [r3, #8]
 8007dc6:	4b36      	ldr	r3, [pc, #216]	; (8007ea0 <xilProcessMsg+0x48c>)
 8007dc8:	785a      	ldrb	r2, [r3, #1]
 8007dca:	4b35      	ldr	r3, [pc, #212]	; (8007ea0 <xilProcessMsg+0x48c>)
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	2101      	movs	r1, #1
 8007dd0:	f7ff fc56 	bl	8007680 <processTargetToHostData>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	71bb      	strb	r3, [r7, #6]
        if (processDataError == XIL_PROCESSDATA_DATA_STREAM_ERROR) {
 8007dd8:	79bb      	ldrb	r3, [r7, #6]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d103      	bne.n	8007de6 <xilProcessMsg+0x3d2>
            XIL_RUN_EXIT_ERROR;
 8007dde:	4b31      	ldr	r3, [pc, #196]	; (8007ea4 <xilProcessMsg+0x490>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	601a      	str	r2, [r3, #0]
 8007de4:	e059      	b.n	8007e9a <xilProcessMsg+0x486>
        } else if (processDataError != XIL_PROCESSDATA_SUCCESS) {
 8007de6:	79bb      	ldrb	r3, [r7, #6]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00a      	beq.n	8007e02 <xilProcessMsg+0x3ee>
            if (finalizeCommandResponse(XIL_RESPONSE_ERROR_PROCESS_YDATA, 1) != XIL_INTERFACE_LIB_SUCCESS) {
 8007dec:	2101      	movs	r1, #1
 8007dee:	2002      	movs	r0, #2
 8007df0:	f7ff fc98 	bl	8007724 <finalizeCommandResponse>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d04c      	beq.n	8007e94 <xilProcessMsg+0x480>
                XIL_RUN_EXIT_ERROR;
 8007dfa:	4b2a      	ldr	r3, [pc, #168]	; (8007ea4 <xilProcessMsg+0x490>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	e04b      	b.n	8007e9a <xilProcessMsg+0x486>
            else {
                XIL_RUN_EXIT;
            }
        }
        /* compute next state */
        cc.state = computeNextState(cc.state, cc.command);
 8007e02:	4b27      	ldr	r3, [pc, #156]	; (8007ea0 <xilProcessMsg+0x48c>)
 8007e04:	f993 2000 	ldrsb.w	r2, [r3]
 8007e08:	4b25      	ldr	r3, [pc, #148]	; (8007ea0 <xilProcessMsg+0x48c>)
 8007e0a:	785b      	ldrb	r3, [r3, #1]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	f7ff fcbc 	bl	800778c <computeNextState>
 8007e14:	4603      	mov	r3, r0
 8007e16:	461a      	mov	r2, r3
 8007e18:	4b21      	ldr	r3, [pc, #132]	; (8007ea0 <xilProcessMsg+0x48c>)
 8007e1a:	701a      	strb	r2, [r3, #0]
        XIL_EXIT_ERROR_IF_INVALID_STATE;
 8007e1c:	4b20      	ldr	r3, [pc, #128]	; (8007ea0 <xilProcessMsg+0x48c>)
 8007e1e:	f993 3000 	ldrsb.w	r3, [r3]
 8007e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e26:	d103      	bne.n	8007e30 <xilProcessMsg+0x41c>
 8007e28:	4b1e      	ldr	r3, [pc, #120]	; (8007ea4 <xilProcessMsg+0x490>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	601a      	str	r2, [r3, #0]
 8007e2e:	e034      	b.n	8007e9a <xilProcessMsg+0x486>
        callTargetUploadFcns();
    }
#endif /* LDRA_ENABLED */
                
    /* client/server commands could be executed in the middle of a step */
    if ((cc.state == XIL_COMPLETE) && (cc.command != XIL_CLIENT_SERVER_COMMAND)) { 
 8007e30:	4b1b      	ldr	r3, [pc, #108]	; (8007ea0 <xilProcessMsg+0x48c>)
 8007e32:	f993 3000 	ldrsb.w	r3, [r3]
 8007e36:	2b06      	cmp	r3, #6
 8007e38:	d12e      	bne.n	8007e98 <xilProcessMsg+0x484>
 8007e3a:	4b19      	ldr	r3, [pc, #100]	; (8007ea0 <xilProcessMsg+0x48c>)
 8007e3c:	785b      	ldrb	r3, [r3, #1]
 8007e3e:	2b09      	cmp	r3, #9
 8007e40:	d02a      	beq.n	8007e98 <xilProcessMsg+0x484>
        /* finalize the response */
        MemUnit_T isEndOfXILStep = 1;
 8007e42:	2301      	movs	r3, #1
 8007e44:	717b      	strb	r3, [r7, #5]
        if (finalizeCommandResponse(XIL_RESPONSE_ERROR_SUCCESS, isEndOfXILStep) != XIL_INTERFACE_LIB_SUCCESS) {
 8007e46:	797b      	ldrb	r3, [r7, #5]
 8007e48:	4619      	mov	r1, r3
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	f7ff fc6a 	bl	8007724 <finalizeCommandResponse>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <xilProcessMsg+0x44a>
            XIL_RUN_EXIT_ERROR;
 8007e56:	4b13      	ldr	r3, [pc, #76]	; (8007ea4 <xilProcessMsg+0x490>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	e01d      	b.n	8007e9a <xilProcessMsg+0x486>
        }
        
        /* reset state */
        cc.state = XIL_READ_COMMAND_CODE;
 8007e5e:	4b10      	ldr	r3, [pc, #64]	; (8007ea0 <xilProcessMsg+0x48c>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	701a      	strb	r2, [r3, #0]
    }

    XIL_RUN_EXIT;
 8007e64:	bf00      	nop
 8007e66:	e017      	b.n	8007e98 <xilProcessMsg+0x484>
                XIL_RUN_EXIT;
 8007e68:	bf00      	nop
 8007e6a:	e016      	b.n	8007e9a <xilProcessMsg+0x486>
                        XIL_RUN_EXIT;
 8007e6c:	bf00      	nop
 8007e6e:	e014      	b.n	8007e9a <xilProcessMsg+0x486>
                        XIL_RUN_EXIT;
 8007e70:	bf00      	nop
 8007e72:	e012      	b.n	8007e9a <xilProcessMsg+0x486>
                        XIL_RUN_EXIT;
 8007e74:	bf00      	nop
 8007e76:	e010      	b.n	8007e9a <xilProcessMsg+0x486>
                        XIL_RUN_EXIT;
 8007e78:	bf00      	nop
 8007e7a:	e00e      	b.n	8007e9a <xilProcessMsg+0x486>
                        XIL_RUN_EXIT;
 8007e7c:	bf00      	nop
 8007e7e:	e00c      	b.n	8007e9a <xilProcessMsg+0x486>
                        XIL_RUN_EXIT;
 8007e80:	bf00      	nop
 8007e82:	e00a      	b.n	8007e9a <xilProcessMsg+0x486>
                        XIL_RUN_EXIT;
 8007e84:	bf00      	nop
 8007e86:	e008      	b.n	8007e9a <xilProcessMsg+0x486>
                        XIL_RUN_EXIT;
 8007e88:	bf00      	nop
 8007e8a:	e006      	b.n	8007e9a <xilProcessMsg+0x486>
                        XIL_RUN_EXIT;
 8007e8c:	bf00      	nop
 8007e8e:	e004      	b.n	8007e9a <xilProcessMsg+0x486>
                        XIL_RUN_EXIT;
 8007e90:	bf00      	nop
 8007e92:	e002      	b.n	8007e9a <xilProcessMsg+0x486>
                XIL_RUN_EXIT;
 8007e94:	bf00      	nop
 8007e96:	e000      	b.n	8007e9a <xilProcessMsg+0x486>
    XIL_RUN_EXIT;
 8007e98:	bf00      	nop
    
}
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	200001bc 	.word	0x200001bc
 8007ea4:	20000028 	.word	0x20000028

08007ea8 <commsRun>:

/* Call xilProcessMsg to process host to target data */
uint8_T commsRun(void)
{            
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
    const uint8_T success = 1;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	71fb      	strb	r3, [r7, #7]

    xilProcessMsg();
 8007eb2:	f7ff fdaf 	bl	8007a14 <xilProcessMsg>
    return success;
 8007eb6:	79fb      	ldrb	r3, [r7, #7]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <xilRun>:

XIL_INTERFACE_LIB_ERROR_CODE xilRun(void) {
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
    XIL_INTERFACE_LIB_ERROR_CODE errorCode = XIL_INTERFACE_LIB_SUCCESS;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	71fb      	strb	r3, [r7, #7]
    int success;             

    /* read one msg and pass to owning application */
    success = commsRun();
 8007eca:	f7ff ffed 	bl	8007ea8 <commsRun>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	603b      	str	r3, [r7, #0]
    
    success = success && processMsgSuccess;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d005      	beq.n	8007ee4 <xilRun+0x24>
 8007ed8:	4b0d      	ldr	r3, [pc, #52]	; (8007f10 <xilRun+0x50>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <xilRun+0x24>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e000      	b.n	8007ee6 <xilRun+0x26>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	603b      	str	r3, [r7, #0]
    if (success) {        
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d009      	beq.n	8007f02 <xilRun+0x42>
        if (isShutdownCommand) {
 8007eee:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <xilRun+0x54>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d002      	beq.n	8007efc <xilRun+0x3c>
            errorCode = XIL_INTERFACE_LIB_TERMINATE;
 8007ef6:	2302      	movs	r3, #2
 8007ef8:	71fb      	strb	r3, [r7, #7]
 8007efa:	e004      	b.n	8007f06 <xilRun+0x46>
        } else {
            errorCode = XIL_INTERFACE_LIB_SUCCESS;
 8007efc:	2300      	movs	r3, #0
 8007efe:	71fb      	strb	r3, [r7, #7]
 8007f00:	e001      	b.n	8007f06 <xilRun+0x46>
        }
        
    } else {
        errorCode = XIL_INTERFACE_LIB_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	71fb      	strb	r3, [r7, #7]
    }
    return errorCode;
 8007f06:	79fb      	ldrb	r3, [r7, #7]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	20000028 	.word	0x20000028
 8007f14:	200001b4 	.word	0x200001b4

08007f18 <xilTgtAppSvcCreate>:
#include "XILTgtAppSvc_CInterface.h"

/* XIL buffer is statically allocated for rtiostream-based implementation */
static IOUnit_T xilWriteBuffer[XIL_TX_BUFFER_MEMUNIT_SIZE];

extern uint8_T xilTgtAppSvcCreate(void) {
 8007f18:	b480      	push	{r7}
 8007f1a:	af00      	add	r7, sp, #0
    return XILTGTAPPSVC_SUCCESS;
 8007f1c:	2301      	movs	r3, #1
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <xilTgtAppSvcDestroy>:

extern void xilTgtAppSvcDestroy(void) {
 8007f28:	b480      	push	{r7}
 8007f2a:	af00      	add	r7, sp, #0
}
 8007f2c:	bf00      	nop
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
	...

08007f38 <xilTgtAppSvcAllocBuffer>:

/* Allocation method simply returns the statically allocated buffer */
extern uint8_T xilTgtAppSvcAllocBuffer(
        void** ppBuf,
        const uint16_T dataSize) {
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	807b      	strh	r3, [r7, #2]
    
    /* buffer is already statically allocated */
    *ppBuf = &xilWriteBuffer[APPLICATION_ID_IDX];
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a04      	ldr	r2, [pc, #16]	; (8007f58 <xilTgtAppSvcAllocBuffer+0x20>)
 8007f48:	601a      	str	r2, [r3, #0]
    
    UNUSED_PARAMETER(dataSize);
    
    /* nothing to do as buffer is already statically allocated */
    return XILTGTAPPSVC_SUCCESS;
 8007f4a:	2301      	movs	r3, #1
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	200001d0 	.word	0x200001d0

08007f5c <xilTgtAppSvcGetBufferDataPtr>:

/* return pointer to XIL buffer data */
extern IOUnit_T * xilTgtAppSvcGetBufferDataPtr(
        void* const pBuf) {
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
    
    /* buffer is already statically allocated */
    UNUSED_PARAMETER(pBuf);
       
    return &xilWriteBuffer[PAYLOAD_IDX];
 8007f64:	4b03      	ldr	r3, [pc, #12]	; (8007f74 <xilTgtAppSvcGetBufferDataPtr+0x18>)
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	200001d5 	.word	0x200001d5

08007f78 <xilTgtAppSvcSend>:

/* send data over rtiostream */
extern uint8_T xilTgtAppSvcSend(
        void* const pBuf,        
        const uint16_T dataSize) {
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	807b      	strh	r3, [r7, #2]
    
    return (uint8_T)commsEnqueueBuffer(pBuf, XIL_RTIOSTREAM_BASED_SERVICE_ID, dataSize);
 8007f84:	887b      	ldrh	r3, [r7, #2]
 8007f86:	461a      	mov	r2, r3
 8007f88:	2101      	movs	r1, #1
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f860 	bl	8008050 <commsEnqueueBuffer>
 8007f90:	4603      	mov	r3, r0
 8007f92:	b2db      	uxtb	r3, r3
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <xilInit>:
  xilTerminateComms();
}
#endif

/* Entry point (called from sil_main.c & pil_main.c) to initialize services */
XIL_INTERFACE_LIB_ERROR_CODE xilInit(const int argc, void *argv[]) {
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
    
    if (commsInit(argc, argv) != COMMS_SUCCESS) {
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f825 	bl	8007ff8 <commsInit>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d001      	beq.n	8007fba <xilInit+0x1e>
        return XIL_INTERFACE_LIB_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e00e      	b.n	8007fd8 <xilInit+0x3c>
    }
    
    if (silpilInit()!=XIL_INTERFACE_LIB_SUCCESS) {
 8007fba:	f7fe fec5 	bl	8006d48 <silpilInit>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d001      	beq.n	8007fc8 <xilInit+0x2c>
        return XIL_INTERFACE_LIB_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e007      	b.n	8007fd8 <xilInit+0x3c>
        return XIL_INTERFACE_LIB_ERROR;
    }
#endif
    
#if CODER_ASSUMPTIONS_ENABLED == 1
    if (coderAssumptionsInit()!=XIL_INTERFACE_LIB_SUCCESS) {
 8007fc8:	f7fe f810 	bl	8005fec <coderAssumptionsInit>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d001      	beq.n	8007fd6 <xilInit+0x3a>
        return XIL_INTERFACE_LIB_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e000      	b.n	8007fd8 <xilInit+0x3c>
    _MM_SET_FLUSH_ZERO_MODE(_MM_FLUSH_ZERO_ON);
    #elif SIL_DISABLE_SUBNORMAL_SUPPORT == 2
    _MM_SET_DENORMALS_ZERO_MODE(_MM_DENORMALS_ZERO_ON);
    #endif
#endif
    return XIL_INTERFACE_LIB_SUCCESS;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <xilTerminateComms>:

/* Entry point (called from sil_main.c & pil_main.c) to terminate services */
XIL_INTERFACE_LIB_ERROR_CODE xilTerminateComms(void) {
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	af00      	add	r7, sp, #0
    
    silpilTerminate();
 8007fe4:	f7fe ffa6 	bl	8006f34 <silpilTerminate>
#ifdef CODE_INSTRUMENTATION_ENABLED
    codeInstrTerminate();
#endif
    
#if CODER_ASSUMPTIONS_ENABLED == 1
    coderAssumptionsTerminate();
 8007fe8:	f7fe f810 	bl	800600c <coderAssumptionsTerminate>
#endif
    
    commsTerminate();
 8007fec:	f000 f81e 	bl	800802c <commsTerminate>
    
    return XIL_INTERFACE_LIB_SUCCESS;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	bd80      	pop	{r7, pc}
	...

08007ff8 <commsInit>:
/* allocate the buffers */
static IOUnit_T xilCommsBuffer[RTIOSTREAM_RX_BUFFER_SIZE];


/* open rtiostream */
int commsInit(const int argc, void * argv[]){
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
    
    streamID = rtIOStreamOpen(argc, argv);
 8008002:	6839      	ldr	r1, [r7, #0]
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7fd fb37 	bl	8005678 <rtIOStreamOpen>
 800800a:	4602      	mov	r2, r0
 800800c:	4b06      	ldr	r3, [pc, #24]	; (8008028 <commsInit+0x30>)
 800800e:	601a      	str	r2, [r3, #0]
    if (streamID == RTIOSTREAM_ERROR) {
 8008010:	4b05      	ldr	r3, [pc, #20]	; (8008028 <commsInit+0x30>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008018:	d101      	bne.n	800801e <commsInit+0x26>
        return COMMS_ERROR;
 800801a:	2300      	movs	r3, #0
 800801c:	e000      	b.n	8008020 <commsInit+0x28>
    }
    return COMMS_SUCCESS;
 800801e:	2301      	movs	r3, #1
}
 8008020:	4618      	mov	r0, r3
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	20000250 	.word	0x20000250

0800802c <commsTerminate>:

/* close rtiostream */
int commsTerminate(void) {    
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0
    if (rtIOStreamClose(streamID) == RTIOSTREAM_NO_ERROR) {
 8008030:	4b06      	ldr	r3, [pc, #24]	; (800804c <commsTerminate+0x20>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4618      	mov	r0, r3
 8008036:	f7fd fb2b 	bl	8005690 <rtIOStreamClose>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <commsTerminate+0x18>
        return COMMS_SUCCESS;
 8008040:	2301      	movs	r3, #1
 8008042:	e000      	b.n	8008046 <commsTerminate+0x1a>
    } else {
        return COMMS_ERROR;
 8008044:	2300      	movs	r3, #0
    }
}
 8008046:	4618      	mov	r0, r3
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	20000250 	.word	0x20000250

08008050 <commsEnqueueBuffer>:

/* call rtIOStreamBlockingSend to send data*/
int commsEnqueueBuffer(        
        void* const pBuf,
        const uint8_T appId,
        const uint16_T dataSize) {
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	460b      	mov	r3, r1
 800805a:	70fb      	strb	r3, [r7, #3]
 800805c:	4613      	mov	r3, r2
 800805e:	803b      	strh	r3, [r7, #0]
    
    int rtIOStreamErrorStatus;
    IOUnit_T* appBuffer;
    MemUnit_T appIdMemUnit = (MemUnit_T)appId;
 8008060:	78fb      	ldrb	r3, [r7, #3]
 8008062:	73fb      	strb	r3, [r7, #15]
    uint32_T writeDataAvail = (uint32_T)dataSize;   
 8008064:	883b      	ldrh	r3, [r7, #0]
 8008066:	61fb      	str	r3, [r7, #28]
    uint32_T transferSize = writeDataAvail + BUFFER_HEADER_SIZE;           
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	3305      	adds	r3, #5
 800806c:	61bb      	str	r3, [r7, #24]
        /* send the abort message */
        abort();
    }
    
#else
    uint32_T writeDataAvailMemUnits = writeDataAvail;
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	60bb      	str	r3, [r7, #8]
#endif
    
    /* get the pointer for the application buffer of the given app id */
    appBuffer = (IOUnit_T*) pBuf;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	617b      	str	r3, [r7, #20]
	if (appBuffer == NULL) {
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <commsEnqueueBuffer+0x30>
		/* early return */
		return COMMS_ERROR;
 800807c:	2300      	movs	r3, #0
 800807e:	e015      	b.n	80080ac <commsEnqueueBuffer+0x5c>
	}
        
    UNUSED_PARAMETER(pBuf);
    
    memcpy((void *) &appBuffer[APPLICATION_ID_IDX], &appIdMemUnit, sizeof(appIdMemUnit));        
 8008080:	7bfa      	ldrb	r2, [r7, #15]
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	701a      	strb	r2, [r3, #0]
#ifdef HOST_BIG_ENDIAN_PROTOCOL_TESTING
    /* swap the bytes of the playload size that will be sent to the host */
    swapBytes((MemUnit_T*)(&writeDataAvailMemUnits), sizeof(writeDataAvailMemUnits));
#endif /*HOST_BIG_ENDIAN_PROTOCOL_TESTING*/

    memcpy((void *) &appBuffer[PAYLOAD_SIZE_IDX], &writeDataAvailMemUnits, sizeof(writeDataAvailMemUnits));    
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	3301      	adds	r3, #1
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	601a      	str	r2, [r3, #0]
    
   /* Blocks until all requested outgoing data is sent */
   rtIOStreamErrorStatus = rtIOStreamBlockingSend(streamID,
 800808e:	4b09      	ldr	r3, [pc, #36]	; (80080b4 <commsEnqueueBuffer+0x64>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	69ba      	ldr	r2, [r7, #24]
 8008094:	6979      	ldr	r1, [r7, #20]
 8008096:	4618      	mov	r0, r3
 8008098:	f7fe fdc2 	bl	8006c20 <rtIOStreamBlockingSend>
 800809c:	6138      	str	r0, [r7, #16]
                                                 (const void *) appBuffer,
                                                 transferSize);
                                                      
   if (rtIOStreamErrorStatus == RTIOSTREAM_ERROR)
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a4:	d101      	bne.n	80080aa <commsEnqueueBuffer+0x5a>
         return COMMS_ERROR;
 80080a6:	2300      	movs	r3, #0
 80080a8:	e000      	b.n	80080ac <commsEnqueueBuffer+0x5c>
   
   return COMMS_SUCCESS;
 80080aa:	2301      	movs	r3, #1
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3720      	adds	r7, #32
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	20000250 	.word	0x20000250

080080b8 <rtiostreamReadMessage>:

int rtiostreamReadMessage(IOUnit_T ** currentBufferPosition, uint16_T *currentBufSize) {
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
    
    int rtIOStreamErrorStatus;
    uint32_T dataSize = 0;
 80080c2:	2300      	movs	r3, #0
 80080c4:	613b      	str	r3, [r7, #16]
    MemUnit_T appId;


    rtIOStreamErrorStatus = rtIOStreamBlockingRecv(streamID,
 80080c6:	4b19      	ldr	r3, [pc, #100]	; (800812c <rtiostreamReadMessage+0x74>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f107 010f 	add.w	r1, r7, #15
 80080ce:	2201      	movs	r2, #1
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7fe fdd7 	bl	8006c84 <rtIOStreamBlockingRecv>
 80080d6:	6178      	str	r0, [r7, #20]
        (void *) &appId,
        sizeof(appId));

    if (rtIOStreamErrorStatus == RTIOSTREAM_ERROR)
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080de:	d101      	bne.n	80080e4 <rtiostreamReadMessage+0x2c>
	    return COMMS_ERROR;
 80080e0:	2300      	movs	r3, #0
 80080e2:	e01e      	b.n	8008122 <rtiostreamReadMessage+0x6a>

    
    /* receive size of data contained in the buffer */
    rtIOStreamErrorStatus = rtIOStreamBlockingRecv(streamID,
 80080e4:	4b11      	ldr	r3, [pc, #68]	; (800812c <rtiostreamReadMessage+0x74>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f107 0110 	add.w	r1, r7, #16
 80080ec:	2204      	movs	r2, #4
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fe fdc8 	bl	8006c84 <rtIOStreamBlockingRecv>
 80080f4:	6178      	str	r0, [r7, #20]
#ifdef HOST_BIG_ENDIAN_PROTOCOL_TESTING
    /* swap the bytes of the dataSize sent from the host */
    swapBytes((MemUnit_T*)(&dataSize), sizeof(dataSize));
#endif /*HOST_BIG_ENDIAN_PROTOCOL_TESTING*/

    if (rtIOStreamErrorStatus == RTIOSTREAM_ERROR)
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080fc:	d101      	bne.n	8008102 <rtiostreamReadMessage+0x4a>
		return COMMS_ERROR;
 80080fe:	2300      	movs	r3, #0
 8008100:	e00f      	b.n	8008122 <rtiostreamReadMessage+0x6a>
	 */
    dataSize *= MEM_UNIT_BYTES;
#endif

    /* receive the data */
    rtIOStreamErrorStatus = rtIOStreamBlockingRecv(streamID,
 8008102:	4b0a      	ldr	r3, [pc, #40]	; (800812c <rtiostreamReadMessage+0x74>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	4909      	ldr	r1, [pc, #36]	; (8008130 <rtiostreamReadMessage+0x78>)
 800810a:	4618      	mov	r0, r3
 800810c:	f7fe fdba 	bl	8006c84 <rtIOStreamBlockingRecv>
 8008110:	6178      	str	r0, [r7, #20]
        (void *) &(xilCommsBuffer[0]),
        dataSize);

    *currentBufferPosition = &(xilCommsBuffer[0]);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a06      	ldr	r2, [pc, #24]	; (8008130 <rtiostreamReadMessage+0x78>)
 8008116:	601a      	str	r2, [r3, #0]
    *currentBufSize = (uint16_T)dataSize;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	b29a      	uxth	r2, r3
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	801a      	strh	r2, [r3, #0]

    return COMMS_SUCCESS;
 8008120:	2301      	movs	r3, #1
}
 8008122:	4618      	mov	r0, r3
 8008124:	3718      	adds	r7, #24
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	20000250 	.word	0x20000250
 8008130:	20000254 	.word	0x20000254

08008134 <__errno>:
 8008134:	4b01      	ldr	r3, [pc, #4]	; (800813c <__errno+0x8>)
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	2000002c 	.word	0x2000002c

08008140 <__libc_init_array>:
 8008140:	b570      	push	{r4, r5, r6, lr}
 8008142:	4e0d      	ldr	r6, [pc, #52]	; (8008178 <__libc_init_array+0x38>)
 8008144:	4c0d      	ldr	r4, [pc, #52]	; (800817c <__libc_init_array+0x3c>)
 8008146:	1ba4      	subs	r4, r4, r6
 8008148:	10a4      	asrs	r4, r4, #2
 800814a:	2500      	movs	r5, #0
 800814c:	42a5      	cmp	r5, r4
 800814e:	d109      	bne.n	8008164 <__libc_init_array+0x24>
 8008150:	4e0b      	ldr	r6, [pc, #44]	; (8008180 <__libc_init_array+0x40>)
 8008152:	4c0c      	ldr	r4, [pc, #48]	; (8008184 <__libc_init_array+0x44>)
 8008154:	f001 fbfa 	bl	800994c <_init>
 8008158:	1ba4      	subs	r4, r4, r6
 800815a:	10a4      	asrs	r4, r4, #2
 800815c:	2500      	movs	r5, #0
 800815e:	42a5      	cmp	r5, r4
 8008160:	d105      	bne.n	800816e <__libc_init_array+0x2e>
 8008162:	bd70      	pop	{r4, r5, r6, pc}
 8008164:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008168:	4798      	blx	r3
 800816a:	3501      	adds	r5, #1
 800816c:	e7ee      	b.n	800814c <__libc_init_array+0xc>
 800816e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008172:	4798      	blx	r3
 8008174:	3501      	adds	r5, #1
 8008176:	e7f2      	b.n	800815e <__libc_init_array+0x1e>
 8008178:	08009c00 	.word	0x08009c00
 800817c:	08009c00 	.word	0x08009c00
 8008180:	08009c00 	.word	0x08009c00
 8008184:	08009c04 	.word	0x08009c04

08008188 <memcpy>:
 8008188:	b510      	push	{r4, lr}
 800818a:	1e43      	subs	r3, r0, #1
 800818c:	440a      	add	r2, r1
 800818e:	4291      	cmp	r1, r2
 8008190:	d100      	bne.n	8008194 <memcpy+0xc>
 8008192:	bd10      	pop	{r4, pc}
 8008194:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008198:	f803 4f01 	strb.w	r4, [r3, #1]!
 800819c:	e7f7      	b.n	800818e <memcpy+0x6>

0800819e <memset>:
 800819e:	4402      	add	r2, r0
 80081a0:	4603      	mov	r3, r0
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d100      	bne.n	80081a8 <memset+0xa>
 80081a6:	4770      	bx	lr
 80081a8:	f803 1b01 	strb.w	r1, [r3], #1
 80081ac:	e7f9      	b.n	80081a2 <memset+0x4>
	...

080081b0 <cos>:
 80081b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081b2:	ec51 0b10 	vmov	r0, r1, d0
 80081b6:	4a1e      	ldr	r2, [pc, #120]	; (8008230 <cos+0x80>)
 80081b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80081bc:	4293      	cmp	r3, r2
 80081be:	dc06      	bgt.n	80081ce <cos+0x1e>
 80081c0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8008228 <cos+0x78>
 80081c4:	f000 fca0 	bl	8008b08 <__kernel_cos>
 80081c8:	ec51 0b10 	vmov	r0, r1, d0
 80081cc:	e007      	b.n	80081de <cos+0x2e>
 80081ce:	4a19      	ldr	r2, [pc, #100]	; (8008234 <cos+0x84>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	dd09      	ble.n	80081e8 <cos+0x38>
 80081d4:	ee10 2a10 	vmov	r2, s0
 80081d8:	460b      	mov	r3, r1
 80081da:	f7f7 fffd 	bl	80001d8 <__aeabi_dsub>
 80081de:	ec41 0b10 	vmov	d0, r0, r1
 80081e2:	b005      	add	sp, #20
 80081e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80081e8:	4668      	mov	r0, sp
 80081ea:	f000 fa99 	bl	8008720 <__ieee754_rem_pio2>
 80081ee:	f000 0003 	and.w	r0, r0, #3
 80081f2:	2801      	cmp	r0, #1
 80081f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80081f8:	ed9d 0b00 	vldr	d0, [sp]
 80081fc:	d007      	beq.n	800820e <cos+0x5e>
 80081fe:	2802      	cmp	r0, #2
 8008200:	d00e      	beq.n	8008220 <cos+0x70>
 8008202:	2800      	cmp	r0, #0
 8008204:	d0de      	beq.n	80081c4 <cos+0x14>
 8008206:	2001      	movs	r0, #1
 8008208:	f001 f886 	bl	8009318 <__kernel_sin>
 800820c:	e7dc      	b.n	80081c8 <cos+0x18>
 800820e:	f001 f883 	bl	8009318 <__kernel_sin>
 8008212:	ec53 2b10 	vmov	r2, r3, d0
 8008216:	ee10 0a10 	vmov	r0, s0
 800821a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800821e:	e7de      	b.n	80081de <cos+0x2e>
 8008220:	f000 fc72 	bl	8008b08 <__kernel_cos>
 8008224:	e7f5      	b.n	8008212 <cos+0x62>
 8008226:	bf00      	nop
	...
 8008230:	3fe921fb 	.word	0x3fe921fb
 8008234:	7fefffff 	.word	0x7fefffff

08008238 <floor>:
 8008238:	ec51 0b10 	vmov	r0, r1, d0
 800823c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008240:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008244:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008248:	2e13      	cmp	r6, #19
 800824a:	460c      	mov	r4, r1
 800824c:	ee10 5a10 	vmov	r5, s0
 8008250:	4680      	mov	r8, r0
 8008252:	dc34      	bgt.n	80082be <floor+0x86>
 8008254:	2e00      	cmp	r6, #0
 8008256:	da16      	bge.n	8008286 <floor+0x4e>
 8008258:	a335      	add	r3, pc, #212	; (adr r3, 8008330 <floor+0xf8>)
 800825a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825e:	f7f7 ffbd 	bl	80001dc <__adddf3>
 8008262:	2200      	movs	r2, #0
 8008264:	2300      	movs	r3, #0
 8008266:	f7f8 fbff 	bl	8000a68 <__aeabi_dcmpgt>
 800826a:	b148      	cbz	r0, 8008280 <floor+0x48>
 800826c:	2c00      	cmp	r4, #0
 800826e:	da59      	bge.n	8008324 <floor+0xec>
 8008270:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008274:	4a30      	ldr	r2, [pc, #192]	; (8008338 <floor+0x100>)
 8008276:	432b      	orrs	r3, r5
 8008278:	2500      	movs	r5, #0
 800827a:	42ab      	cmp	r3, r5
 800827c:	bf18      	it	ne
 800827e:	4614      	movne	r4, r2
 8008280:	4621      	mov	r1, r4
 8008282:	4628      	mov	r0, r5
 8008284:	e025      	b.n	80082d2 <floor+0x9a>
 8008286:	4f2d      	ldr	r7, [pc, #180]	; (800833c <floor+0x104>)
 8008288:	4137      	asrs	r7, r6
 800828a:	ea01 0307 	and.w	r3, r1, r7
 800828e:	4303      	orrs	r3, r0
 8008290:	d01f      	beq.n	80082d2 <floor+0x9a>
 8008292:	a327      	add	r3, pc, #156	; (adr r3, 8008330 <floor+0xf8>)
 8008294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008298:	f7f7 ffa0 	bl	80001dc <__adddf3>
 800829c:	2200      	movs	r2, #0
 800829e:	2300      	movs	r3, #0
 80082a0:	f7f8 fbe2 	bl	8000a68 <__aeabi_dcmpgt>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	d0eb      	beq.n	8008280 <floor+0x48>
 80082a8:	2c00      	cmp	r4, #0
 80082aa:	bfbe      	ittt	lt
 80082ac:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80082b0:	fa43 f606 	asrlt.w	r6, r3, r6
 80082b4:	19a4      	addlt	r4, r4, r6
 80082b6:	ea24 0407 	bic.w	r4, r4, r7
 80082ba:	2500      	movs	r5, #0
 80082bc:	e7e0      	b.n	8008280 <floor+0x48>
 80082be:	2e33      	cmp	r6, #51	; 0x33
 80082c0:	dd0b      	ble.n	80082da <floor+0xa2>
 80082c2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80082c6:	d104      	bne.n	80082d2 <floor+0x9a>
 80082c8:	ee10 2a10 	vmov	r2, s0
 80082cc:	460b      	mov	r3, r1
 80082ce:	f7f7 ff85 	bl	80001dc <__adddf3>
 80082d2:	ec41 0b10 	vmov	d0, r0, r1
 80082d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082da:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80082de:	f04f 33ff 	mov.w	r3, #4294967295
 80082e2:	fa23 f707 	lsr.w	r7, r3, r7
 80082e6:	4207      	tst	r7, r0
 80082e8:	d0f3      	beq.n	80082d2 <floor+0x9a>
 80082ea:	a311      	add	r3, pc, #68	; (adr r3, 8008330 <floor+0xf8>)
 80082ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f0:	f7f7 ff74 	bl	80001dc <__adddf3>
 80082f4:	2200      	movs	r2, #0
 80082f6:	2300      	movs	r3, #0
 80082f8:	f7f8 fbb6 	bl	8000a68 <__aeabi_dcmpgt>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	d0bf      	beq.n	8008280 <floor+0x48>
 8008300:	2c00      	cmp	r4, #0
 8008302:	da02      	bge.n	800830a <floor+0xd2>
 8008304:	2e14      	cmp	r6, #20
 8008306:	d103      	bne.n	8008310 <floor+0xd8>
 8008308:	3401      	adds	r4, #1
 800830a:	ea25 0507 	bic.w	r5, r5, r7
 800830e:	e7b7      	b.n	8008280 <floor+0x48>
 8008310:	2301      	movs	r3, #1
 8008312:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008316:	fa03 f606 	lsl.w	r6, r3, r6
 800831a:	4435      	add	r5, r6
 800831c:	4545      	cmp	r5, r8
 800831e:	bf38      	it	cc
 8008320:	18e4      	addcc	r4, r4, r3
 8008322:	e7f2      	b.n	800830a <floor+0xd2>
 8008324:	2500      	movs	r5, #0
 8008326:	462c      	mov	r4, r5
 8008328:	e7aa      	b.n	8008280 <floor+0x48>
 800832a:	bf00      	nop
 800832c:	f3af 8000 	nop.w
 8008330:	8800759c 	.word	0x8800759c
 8008334:	7e37e43c 	.word	0x7e37e43c
 8008338:	bff00000 	.word	0xbff00000
 800833c:	000fffff 	.word	0x000fffff

08008340 <sin>:
 8008340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008342:	ec51 0b10 	vmov	r0, r1, d0
 8008346:	4a20      	ldr	r2, [pc, #128]	; (80083c8 <sin+0x88>)
 8008348:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800834c:	4293      	cmp	r3, r2
 800834e:	dc07      	bgt.n	8008360 <sin+0x20>
 8008350:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80083c0 <sin+0x80>
 8008354:	2000      	movs	r0, #0
 8008356:	f000 ffdf 	bl	8009318 <__kernel_sin>
 800835a:	ec51 0b10 	vmov	r0, r1, d0
 800835e:	e007      	b.n	8008370 <sin+0x30>
 8008360:	4a1a      	ldr	r2, [pc, #104]	; (80083cc <sin+0x8c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	dd09      	ble.n	800837a <sin+0x3a>
 8008366:	ee10 2a10 	vmov	r2, s0
 800836a:	460b      	mov	r3, r1
 800836c:	f7f7 ff34 	bl	80001d8 <__aeabi_dsub>
 8008370:	ec41 0b10 	vmov	d0, r0, r1
 8008374:	b005      	add	sp, #20
 8008376:	f85d fb04 	ldr.w	pc, [sp], #4
 800837a:	4668      	mov	r0, sp
 800837c:	f000 f9d0 	bl	8008720 <__ieee754_rem_pio2>
 8008380:	f000 0003 	and.w	r0, r0, #3
 8008384:	2801      	cmp	r0, #1
 8008386:	ed9d 1b02 	vldr	d1, [sp, #8]
 800838a:	ed9d 0b00 	vldr	d0, [sp]
 800838e:	d004      	beq.n	800839a <sin+0x5a>
 8008390:	2802      	cmp	r0, #2
 8008392:	d005      	beq.n	80083a0 <sin+0x60>
 8008394:	b970      	cbnz	r0, 80083b4 <sin+0x74>
 8008396:	2001      	movs	r0, #1
 8008398:	e7dd      	b.n	8008356 <sin+0x16>
 800839a:	f000 fbb5 	bl	8008b08 <__kernel_cos>
 800839e:	e7dc      	b.n	800835a <sin+0x1a>
 80083a0:	2001      	movs	r0, #1
 80083a2:	f000 ffb9 	bl	8009318 <__kernel_sin>
 80083a6:	ec53 2b10 	vmov	r2, r3, d0
 80083aa:	ee10 0a10 	vmov	r0, s0
 80083ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80083b2:	e7dd      	b.n	8008370 <sin+0x30>
 80083b4:	f000 fba8 	bl	8008b08 <__kernel_cos>
 80083b8:	e7f5      	b.n	80083a6 <sin+0x66>
 80083ba:	bf00      	nop
 80083bc:	f3af 8000 	nop.w
	...
 80083c8:	3fe921fb 	.word	0x3fe921fb
 80083cc:	7fefffff 	.word	0x7fefffff

080083d0 <tan>:
 80083d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083d2:	ec51 0b10 	vmov	r0, r1, d0
 80083d6:	4a14      	ldr	r2, [pc, #80]	; (8008428 <tan+0x58>)
 80083d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80083dc:	4293      	cmp	r3, r2
 80083de:	dc05      	bgt.n	80083ec <tan+0x1c>
 80083e0:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8008420 <tan+0x50>
 80083e4:	2001      	movs	r0, #1
 80083e6:	f001 f853 	bl	8009490 <__kernel_tan>
 80083ea:	e009      	b.n	8008400 <tan+0x30>
 80083ec:	4a0f      	ldr	r2, [pc, #60]	; (800842c <tan+0x5c>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	dd09      	ble.n	8008406 <tan+0x36>
 80083f2:	ee10 2a10 	vmov	r2, s0
 80083f6:	460b      	mov	r3, r1
 80083f8:	f7f7 feee 	bl	80001d8 <__aeabi_dsub>
 80083fc:	ec41 0b10 	vmov	d0, r0, r1
 8008400:	b005      	add	sp, #20
 8008402:	f85d fb04 	ldr.w	pc, [sp], #4
 8008406:	4668      	mov	r0, sp
 8008408:	f000 f98a 	bl	8008720 <__ieee754_rem_pio2>
 800840c:	0040      	lsls	r0, r0, #1
 800840e:	f000 0002 	and.w	r0, r0, #2
 8008412:	f1c0 0001 	rsb	r0, r0, #1
 8008416:	ed9d 1b02 	vldr	d1, [sp, #8]
 800841a:	ed9d 0b00 	vldr	d0, [sp]
 800841e:	e7e2      	b.n	80083e6 <tan+0x16>
	...
 8008428:	3fe921fb 	.word	0x3fe921fb
 800842c:	7fefffff 	.word	0x7fefffff

08008430 <fmod>:
 8008430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008434:	ed2d 8b02 	vpush	{d8}
 8008438:	b08b      	sub	sp, #44	; 0x2c
 800843a:	ec55 4b10 	vmov	r4, r5, d0
 800843e:	ec57 6b11 	vmov	r6, r7, d1
 8008442:	f000 f859 	bl	80084f8 <__ieee754_fmod>
 8008446:	4b2a      	ldr	r3, [pc, #168]	; (80084f0 <fmod+0xc0>)
 8008448:	eeb0 8a40 	vmov.f32	s16, s0
 800844c:	eef0 8a60 	vmov.f32	s17, s1
 8008450:	f993 8000 	ldrsb.w	r8, [r3]
 8008454:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008458:	d030      	beq.n	80084bc <fmod+0x8c>
 800845a:	4632      	mov	r2, r6
 800845c:	463b      	mov	r3, r7
 800845e:	4630      	mov	r0, r6
 8008460:	4639      	mov	r1, r7
 8008462:	f7f8 fb0b 	bl	8000a7c <__aeabi_dcmpun>
 8008466:	bb48      	cbnz	r0, 80084bc <fmod+0x8c>
 8008468:	4622      	mov	r2, r4
 800846a:	462b      	mov	r3, r5
 800846c:	4620      	mov	r0, r4
 800846e:	4629      	mov	r1, r5
 8008470:	f7f8 fb04 	bl	8000a7c <__aeabi_dcmpun>
 8008474:	4681      	mov	r9, r0
 8008476:	bb08      	cbnz	r0, 80084bc <fmod+0x8c>
 8008478:	2200      	movs	r2, #0
 800847a:	2300      	movs	r3, #0
 800847c:	4630      	mov	r0, r6
 800847e:	4639      	mov	r1, r7
 8008480:	f7f8 faca 	bl	8000a18 <__aeabi_dcmpeq>
 8008484:	b1d0      	cbz	r0, 80084bc <fmod+0x8c>
 8008486:	2301      	movs	r3, #1
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	4b1a      	ldr	r3, [pc, #104]	; (80084f4 <fmod+0xc4>)
 800848c:	9301      	str	r3, [sp, #4]
 800848e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008492:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008496:	f8cd 9020 	str.w	r9, [sp, #32]
 800849a:	f1b8 0f00 	cmp.w	r8, #0
 800849e:	d116      	bne.n	80084ce <fmod+0x9e>
 80084a0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80084a4:	4668      	mov	r0, sp
 80084a6:	f001 f9c8 	bl	800983a <matherr>
 80084aa:	b1d8      	cbz	r0, 80084e4 <fmod+0xb4>
 80084ac:	9b08      	ldr	r3, [sp, #32]
 80084ae:	b11b      	cbz	r3, 80084b8 <fmod+0x88>
 80084b0:	f7ff fe40 	bl	8008134 <__errno>
 80084b4:	9b08      	ldr	r3, [sp, #32]
 80084b6:	6003      	str	r3, [r0, #0]
 80084b8:	ed9d 8b06 	vldr	d8, [sp, #24]
 80084bc:	eeb0 0a48 	vmov.f32	s0, s16
 80084c0:	eef0 0a68 	vmov.f32	s1, s17
 80084c4:	b00b      	add	sp, #44	; 0x2c
 80084c6:	ecbd 8b02 	vpop	{d8}
 80084ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084ce:	2200      	movs	r2, #0
 80084d0:	2300      	movs	r3, #0
 80084d2:	4610      	mov	r0, r2
 80084d4:	4619      	mov	r1, r3
 80084d6:	f7f8 f961 	bl	800079c <__aeabi_ddiv>
 80084da:	f1b8 0f02 	cmp.w	r8, #2
 80084de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80084e2:	d1df      	bne.n	80084a4 <fmod+0x74>
 80084e4:	f7ff fe26 	bl	8008134 <__errno>
 80084e8:	2321      	movs	r3, #33	; 0x21
 80084ea:	6003      	str	r3, [r0, #0]
 80084ec:	e7de      	b.n	80084ac <fmod+0x7c>
 80084ee:	bf00      	nop
 80084f0:	20000090 	.word	0x20000090
 80084f4:	08009a08 	.word	0x08009a08

080084f8 <__ieee754_fmod>:
 80084f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084fc:	ec53 2b11 	vmov	r2, r3, d1
 8008500:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8008504:	ea5e 0402 	orrs.w	r4, lr, r2
 8008508:	ec51 0b10 	vmov	r0, r1, d0
 800850c:	461e      	mov	r6, r3
 800850e:	ee11 5a10 	vmov	r5, s2
 8008512:	4694      	mov	ip, r2
 8008514:	d00c      	beq.n	8008530 <__ieee754_fmod+0x38>
 8008516:	4c7a      	ldr	r4, [pc, #488]	; (8008700 <__ieee754_fmod+0x208>)
 8008518:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800851c:	45a0      	cmp	r8, r4
 800851e:	4689      	mov	r9, r1
 8008520:	dc06      	bgt.n	8008530 <__ieee754_fmod+0x38>
 8008522:	4254      	negs	r4, r2
 8008524:	4314      	orrs	r4, r2
 8008526:	4f77      	ldr	r7, [pc, #476]	; (8008704 <__ieee754_fmod+0x20c>)
 8008528:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800852c:	42bc      	cmp	r4, r7
 800852e:	d909      	bls.n	8008544 <__ieee754_fmod+0x4c>
 8008530:	f7f8 f80a 	bl	8000548 <__aeabi_dmul>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	f7f8 f930 	bl	800079c <__aeabi_ddiv>
 800853c:	ec41 0b10 	vmov	d0, r0, r1
 8008540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008544:	45f0      	cmp	r8, lr
 8008546:	ee10 2a10 	vmov	r2, s0
 800854a:	4607      	mov	r7, r0
 800854c:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8008550:	dc0a      	bgt.n	8008568 <__ieee754_fmod+0x70>
 8008552:	dbf3      	blt.n	800853c <__ieee754_fmod+0x44>
 8008554:	42a8      	cmp	r0, r5
 8008556:	d3f1      	bcc.n	800853c <__ieee754_fmod+0x44>
 8008558:	d106      	bne.n	8008568 <__ieee754_fmod+0x70>
 800855a:	496b      	ldr	r1, [pc, #428]	; (8008708 <__ieee754_fmod+0x210>)
 800855c:	0fe4      	lsrs	r4, r4, #31
 800855e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8008562:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008566:	e7e9      	b.n	800853c <__ieee754_fmod+0x44>
 8008568:	4b68      	ldr	r3, [pc, #416]	; (800870c <__ieee754_fmod+0x214>)
 800856a:	4598      	cmp	r8, r3
 800856c:	dc49      	bgt.n	8008602 <__ieee754_fmod+0x10a>
 800856e:	f1b8 0f00 	cmp.w	r8, #0
 8008572:	d13d      	bne.n	80085f0 <__ieee754_fmod+0xf8>
 8008574:	4866      	ldr	r0, [pc, #408]	; (8008710 <__ieee754_fmod+0x218>)
 8008576:	4611      	mov	r1, r2
 8008578:	2900      	cmp	r1, #0
 800857a:	dc36      	bgt.n	80085ea <__ieee754_fmod+0xf2>
 800857c:	459e      	cmp	lr, r3
 800857e:	dc51      	bgt.n	8008624 <__ieee754_fmod+0x12c>
 8008580:	f1be 0f00 	cmp.w	lr, #0
 8008584:	d145      	bne.n	8008612 <__ieee754_fmod+0x11a>
 8008586:	4b62      	ldr	r3, [pc, #392]	; (8008710 <__ieee754_fmod+0x218>)
 8008588:	4629      	mov	r1, r5
 800858a:	2900      	cmp	r1, #0
 800858c:	dc3e      	bgt.n	800860c <__ieee754_fmod+0x114>
 800858e:	4961      	ldr	r1, [pc, #388]	; (8008714 <__ieee754_fmod+0x21c>)
 8008590:	4288      	cmp	r0, r1
 8008592:	db4c      	blt.n	800862e <__ieee754_fmod+0x136>
 8008594:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8008598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800859c:	4a5d      	ldr	r2, [pc, #372]	; (8008714 <__ieee754_fmod+0x21c>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	db59      	blt.n	8008656 <__ieee754_fmod+0x15e>
 80085a2:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80085a6:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 80085aa:	1ac0      	subs	r0, r0, r3
 80085ac:	1b8a      	subs	r2, r1, r6
 80085ae:	eba7 050c 	sub.w	r5, r7, ip
 80085b2:	2800      	cmp	r0, #0
 80085b4:	d166      	bne.n	8008684 <__ieee754_fmod+0x18c>
 80085b6:	4567      	cmp	r7, ip
 80085b8:	bf38      	it	cc
 80085ba:	f102 32ff 	addcc.w	r2, r2, #4294967295
 80085be:	2a00      	cmp	r2, #0
 80085c0:	bfbc      	itt	lt
 80085c2:	463d      	movlt	r5, r7
 80085c4:	460a      	movlt	r2, r1
 80085c6:	ea52 0105 	orrs.w	r1, r2, r5
 80085ca:	d0c6      	beq.n	800855a <__ieee754_fmod+0x62>
 80085cc:	494f      	ldr	r1, [pc, #316]	; (800870c <__ieee754_fmod+0x214>)
 80085ce:	428a      	cmp	r2, r1
 80085d0:	dd6d      	ble.n	80086ae <__ieee754_fmod+0x1b6>
 80085d2:	4950      	ldr	r1, [pc, #320]	; (8008714 <__ieee754_fmod+0x21c>)
 80085d4:	428b      	cmp	r3, r1
 80085d6:	db70      	blt.n	80086ba <__ieee754_fmod+0x1c2>
 80085d8:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 80085dc:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80085e0:	4314      	orrs	r4, r2
 80085e2:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 80085e6:	4628      	mov	r0, r5
 80085e8:	e7a8      	b.n	800853c <__ieee754_fmod+0x44>
 80085ea:	3801      	subs	r0, #1
 80085ec:	0049      	lsls	r1, r1, #1
 80085ee:	e7c3      	b.n	8008578 <__ieee754_fmod+0x80>
 80085f0:	4848      	ldr	r0, [pc, #288]	; (8008714 <__ieee754_fmod+0x21c>)
 80085f2:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 80085f6:	0049      	lsls	r1, r1, #1
 80085f8:	2900      	cmp	r1, #0
 80085fa:	f100 30ff 	add.w	r0, r0, #4294967295
 80085fe:	dcfa      	bgt.n	80085f6 <__ieee754_fmod+0xfe>
 8008600:	e7bc      	b.n	800857c <__ieee754_fmod+0x84>
 8008602:	ea4f 5028 	mov.w	r0, r8, asr #20
 8008606:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800860a:	e7b7      	b.n	800857c <__ieee754_fmod+0x84>
 800860c:	3b01      	subs	r3, #1
 800860e:	0049      	lsls	r1, r1, #1
 8008610:	e7bb      	b.n	800858a <__ieee754_fmod+0x92>
 8008612:	4b40      	ldr	r3, [pc, #256]	; (8008714 <__ieee754_fmod+0x21c>)
 8008614:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8008618:	0049      	lsls	r1, r1, #1
 800861a:	2900      	cmp	r1, #0
 800861c:	f103 33ff 	add.w	r3, r3, #4294967295
 8008620:	dcfa      	bgt.n	8008618 <__ieee754_fmod+0x120>
 8008622:	e7b4      	b.n	800858e <__ieee754_fmod+0x96>
 8008624:	ea4f 532e 	mov.w	r3, lr, asr #20
 8008628:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800862c:	e7af      	b.n	800858e <__ieee754_fmod+0x96>
 800862e:	1a0f      	subs	r7, r1, r0
 8008630:	2f1f      	cmp	r7, #31
 8008632:	dc0a      	bgt.n	800864a <__ieee754_fmod+0x152>
 8008634:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8008638:	fa08 f807 	lsl.w	r8, r8, r7
 800863c:	fa22 f101 	lsr.w	r1, r2, r1
 8008640:	ea41 0108 	orr.w	r1, r1, r8
 8008644:	fa02 f707 	lsl.w	r7, r2, r7
 8008648:	e7a8      	b.n	800859c <__ieee754_fmod+0xa4>
 800864a:	4933      	ldr	r1, [pc, #204]	; (8008718 <__ieee754_fmod+0x220>)
 800864c:	1a09      	subs	r1, r1, r0
 800864e:	fa02 f101 	lsl.w	r1, r2, r1
 8008652:	2700      	movs	r7, #0
 8008654:	e7a2      	b.n	800859c <__ieee754_fmod+0xa4>
 8008656:	eba2 0c03 	sub.w	ip, r2, r3
 800865a:	f1bc 0f1f 	cmp.w	ip, #31
 800865e:	dc0a      	bgt.n	8008676 <__ieee754_fmod+0x17e>
 8008660:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8008664:	fa0e fe0c 	lsl.w	lr, lr, ip
 8008668:	fa25 f606 	lsr.w	r6, r5, r6
 800866c:	ea46 060e 	orr.w	r6, r6, lr
 8008670:	fa05 fc0c 	lsl.w	ip, r5, ip
 8008674:	e799      	b.n	80085aa <__ieee754_fmod+0xb2>
 8008676:	4e28      	ldr	r6, [pc, #160]	; (8008718 <__ieee754_fmod+0x220>)
 8008678:	1af6      	subs	r6, r6, r3
 800867a:	fa05 f606 	lsl.w	r6, r5, r6
 800867e:	f04f 0c00 	mov.w	ip, #0
 8008682:	e792      	b.n	80085aa <__ieee754_fmod+0xb2>
 8008684:	4567      	cmp	r7, ip
 8008686:	bf38      	it	cc
 8008688:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800868c:	2a00      	cmp	r2, #0
 800868e:	da05      	bge.n	800869c <__ieee754_fmod+0x1a4>
 8008690:	0ffa      	lsrs	r2, r7, #31
 8008692:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008696:	007f      	lsls	r7, r7, #1
 8008698:	3801      	subs	r0, #1
 800869a:	e787      	b.n	80085ac <__ieee754_fmod+0xb4>
 800869c:	ea52 0105 	orrs.w	r1, r2, r5
 80086a0:	f43f af5b 	beq.w	800855a <__ieee754_fmod+0x62>
 80086a4:	0fe9      	lsrs	r1, r5, #31
 80086a6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 80086aa:	006f      	lsls	r7, r5, #1
 80086ac:	e7f4      	b.n	8008698 <__ieee754_fmod+0x1a0>
 80086ae:	0fe8      	lsrs	r0, r5, #31
 80086b0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80086b4:	006d      	lsls	r5, r5, #1
 80086b6:	3b01      	subs	r3, #1
 80086b8:	e789      	b.n	80085ce <__ieee754_fmod+0xd6>
 80086ba:	1ac9      	subs	r1, r1, r3
 80086bc:	2914      	cmp	r1, #20
 80086be:	dc0a      	bgt.n	80086d6 <__ieee754_fmod+0x1de>
 80086c0:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80086c4:	fa02 f303 	lsl.w	r3, r2, r3
 80086c8:	40cd      	lsrs	r5, r1
 80086ca:	432b      	orrs	r3, r5
 80086cc:	410a      	asrs	r2, r1
 80086ce:	ea42 0104 	orr.w	r1, r2, r4
 80086d2:	4618      	mov	r0, r3
 80086d4:	e732      	b.n	800853c <__ieee754_fmod+0x44>
 80086d6:	291f      	cmp	r1, #31
 80086d8:	dc07      	bgt.n	80086ea <__ieee754_fmod+0x1f2>
 80086da:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80086de:	40cd      	lsrs	r5, r1
 80086e0:	fa02 f303 	lsl.w	r3, r2, r3
 80086e4:	432b      	orrs	r3, r5
 80086e6:	4622      	mov	r2, r4
 80086e8:	e7f1      	b.n	80086ce <__ieee754_fmod+0x1d6>
 80086ea:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80086ee:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80086f2:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80086f6:	33e2      	adds	r3, #226	; 0xe2
 80086f8:	fa42 f303 	asr.w	r3, r2, r3
 80086fc:	e7f3      	b.n	80086e6 <__ieee754_fmod+0x1ee>
 80086fe:	bf00      	nop
 8008700:	7fefffff 	.word	0x7fefffff
 8008704:	7ff00000 	.word	0x7ff00000
 8008708:	08009a10 	.word	0x08009a10
 800870c:	000fffff 	.word	0x000fffff
 8008710:	fffffbed 	.word	0xfffffbed
 8008714:	fffffc02 	.word	0xfffffc02
 8008718:	fffffbe2 	.word	0xfffffbe2
 800871c:	00000000 	.word	0x00000000

08008720 <__ieee754_rem_pio2>:
 8008720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008724:	ec57 6b10 	vmov	r6, r7, d0
 8008728:	4bc3      	ldr	r3, [pc, #780]	; (8008a38 <__ieee754_rem_pio2+0x318>)
 800872a:	b08d      	sub	sp, #52	; 0x34
 800872c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008730:	4598      	cmp	r8, r3
 8008732:	4604      	mov	r4, r0
 8008734:	9704      	str	r7, [sp, #16]
 8008736:	dc07      	bgt.n	8008748 <__ieee754_rem_pio2+0x28>
 8008738:	2200      	movs	r2, #0
 800873a:	2300      	movs	r3, #0
 800873c:	ed84 0b00 	vstr	d0, [r4]
 8008740:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008744:	2500      	movs	r5, #0
 8008746:	e027      	b.n	8008798 <__ieee754_rem_pio2+0x78>
 8008748:	4bbc      	ldr	r3, [pc, #752]	; (8008a3c <__ieee754_rem_pio2+0x31c>)
 800874a:	4598      	cmp	r8, r3
 800874c:	dc75      	bgt.n	800883a <__ieee754_rem_pio2+0x11a>
 800874e:	9b04      	ldr	r3, [sp, #16]
 8008750:	4dbb      	ldr	r5, [pc, #748]	; (8008a40 <__ieee754_rem_pio2+0x320>)
 8008752:	2b00      	cmp	r3, #0
 8008754:	ee10 0a10 	vmov	r0, s0
 8008758:	a3a9      	add	r3, pc, #676	; (adr r3, 8008a00 <__ieee754_rem_pio2+0x2e0>)
 800875a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875e:	4639      	mov	r1, r7
 8008760:	dd36      	ble.n	80087d0 <__ieee754_rem_pio2+0xb0>
 8008762:	f7f7 fd39 	bl	80001d8 <__aeabi_dsub>
 8008766:	45a8      	cmp	r8, r5
 8008768:	4606      	mov	r6, r0
 800876a:	460f      	mov	r7, r1
 800876c:	d018      	beq.n	80087a0 <__ieee754_rem_pio2+0x80>
 800876e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008a08 <__ieee754_rem_pio2+0x2e8>)
 8008770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008774:	f7f7 fd30 	bl	80001d8 <__aeabi_dsub>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	e9c4 2300 	strd	r2, r3, [r4]
 8008780:	4630      	mov	r0, r6
 8008782:	4639      	mov	r1, r7
 8008784:	f7f7 fd28 	bl	80001d8 <__aeabi_dsub>
 8008788:	a39f      	add	r3, pc, #636	; (adr r3, 8008a08 <__ieee754_rem_pio2+0x2e8>)
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	f7f7 fd23 	bl	80001d8 <__aeabi_dsub>
 8008792:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008796:	2501      	movs	r5, #1
 8008798:	4628      	mov	r0, r5
 800879a:	b00d      	add	sp, #52	; 0x34
 800879c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a0:	a39b      	add	r3, pc, #620	; (adr r3, 8008a10 <__ieee754_rem_pio2+0x2f0>)
 80087a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a6:	f7f7 fd17 	bl	80001d8 <__aeabi_dsub>
 80087aa:	a39b      	add	r3, pc, #620	; (adr r3, 8008a18 <__ieee754_rem_pio2+0x2f8>)
 80087ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b0:	4606      	mov	r6, r0
 80087b2:	460f      	mov	r7, r1
 80087b4:	f7f7 fd10 	bl	80001d8 <__aeabi_dsub>
 80087b8:	4602      	mov	r2, r0
 80087ba:	460b      	mov	r3, r1
 80087bc:	e9c4 2300 	strd	r2, r3, [r4]
 80087c0:	4630      	mov	r0, r6
 80087c2:	4639      	mov	r1, r7
 80087c4:	f7f7 fd08 	bl	80001d8 <__aeabi_dsub>
 80087c8:	a393      	add	r3, pc, #588	; (adr r3, 8008a18 <__ieee754_rem_pio2+0x2f8>)
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	e7de      	b.n	800878e <__ieee754_rem_pio2+0x6e>
 80087d0:	f7f7 fd04 	bl	80001dc <__adddf3>
 80087d4:	45a8      	cmp	r8, r5
 80087d6:	4606      	mov	r6, r0
 80087d8:	460f      	mov	r7, r1
 80087da:	d016      	beq.n	800880a <__ieee754_rem_pio2+0xea>
 80087dc:	a38a      	add	r3, pc, #552	; (adr r3, 8008a08 <__ieee754_rem_pio2+0x2e8>)
 80087de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e2:	f7f7 fcfb 	bl	80001dc <__adddf3>
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	e9c4 2300 	strd	r2, r3, [r4]
 80087ee:	4630      	mov	r0, r6
 80087f0:	4639      	mov	r1, r7
 80087f2:	f7f7 fcf1 	bl	80001d8 <__aeabi_dsub>
 80087f6:	a384      	add	r3, pc, #528	; (adr r3, 8008a08 <__ieee754_rem_pio2+0x2e8>)
 80087f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fc:	f7f7 fcee 	bl	80001dc <__adddf3>
 8008800:	f04f 35ff 	mov.w	r5, #4294967295
 8008804:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008808:	e7c6      	b.n	8008798 <__ieee754_rem_pio2+0x78>
 800880a:	a381      	add	r3, pc, #516	; (adr r3, 8008a10 <__ieee754_rem_pio2+0x2f0>)
 800880c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008810:	f7f7 fce4 	bl	80001dc <__adddf3>
 8008814:	a380      	add	r3, pc, #512	; (adr r3, 8008a18 <__ieee754_rem_pio2+0x2f8>)
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881a:	4606      	mov	r6, r0
 800881c:	460f      	mov	r7, r1
 800881e:	f7f7 fcdd 	bl	80001dc <__adddf3>
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	e9c4 2300 	strd	r2, r3, [r4]
 800882a:	4630      	mov	r0, r6
 800882c:	4639      	mov	r1, r7
 800882e:	f7f7 fcd3 	bl	80001d8 <__aeabi_dsub>
 8008832:	a379      	add	r3, pc, #484	; (adr r3, 8008a18 <__ieee754_rem_pio2+0x2f8>)
 8008834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008838:	e7e0      	b.n	80087fc <__ieee754_rem_pio2+0xdc>
 800883a:	4b82      	ldr	r3, [pc, #520]	; (8008a44 <__ieee754_rem_pio2+0x324>)
 800883c:	4598      	cmp	r8, r3
 800883e:	f300 80d0 	bgt.w	80089e2 <__ieee754_rem_pio2+0x2c2>
 8008842:	f000 fff1 	bl	8009828 <fabs>
 8008846:	ec57 6b10 	vmov	r6, r7, d0
 800884a:	ee10 0a10 	vmov	r0, s0
 800884e:	a374      	add	r3, pc, #464	; (adr r3, 8008a20 <__ieee754_rem_pio2+0x300>)
 8008850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008854:	4639      	mov	r1, r7
 8008856:	f7f7 fe77 	bl	8000548 <__aeabi_dmul>
 800885a:	2200      	movs	r2, #0
 800885c:	4b7a      	ldr	r3, [pc, #488]	; (8008a48 <__ieee754_rem_pio2+0x328>)
 800885e:	f7f7 fcbd 	bl	80001dc <__adddf3>
 8008862:	f7f8 f921 	bl	8000aa8 <__aeabi_d2iz>
 8008866:	4605      	mov	r5, r0
 8008868:	f7f7 fe04 	bl	8000474 <__aeabi_i2d>
 800886c:	a364      	add	r3, pc, #400	; (adr r3, 8008a00 <__ieee754_rem_pio2+0x2e0>)
 800886e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008872:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008876:	f7f7 fe67 	bl	8000548 <__aeabi_dmul>
 800887a:	4602      	mov	r2, r0
 800887c:	460b      	mov	r3, r1
 800887e:	4630      	mov	r0, r6
 8008880:	4639      	mov	r1, r7
 8008882:	f7f7 fca9 	bl	80001d8 <__aeabi_dsub>
 8008886:	a360      	add	r3, pc, #384	; (adr r3, 8008a08 <__ieee754_rem_pio2+0x2e8>)
 8008888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888c:	4682      	mov	sl, r0
 800888e:	468b      	mov	fp, r1
 8008890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008894:	f7f7 fe58 	bl	8000548 <__aeabi_dmul>
 8008898:	2d1f      	cmp	r5, #31
 800889a:	4606      	mov	r6, r0
 800889c:	460f      	mov	r7, r1
 800889e:	dc0c      	bgt.n	80088ba <__ieee754_rem_pio2+0x19a>
 80088a0:	1e6a      	subs	r2, r5, #1
 80088a2:	4b6a      	ldr	r3, [pc, #424]	; (8008a4c <__ieee754_rem_pio2+0x32c>)
 80088a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a8:	4543      	cmp	r3, r8
 80088aa:	d006      	beq.n	80088ba <__ieee754_rem_pio2+0x19a>
 80088ac:	4632      	mov	r2, r6
 80088ae:	463b      	mov	r3, r7
 80088b0:	4650      	mov	r0, sl
 80088b2:	4659      	mov	r1, fp
 80088b4:	f7f7 fc90 	bl	80001d8 <__aeabi_dsub>
 80088b8:	e00e      	b.n	80088d8 <__ieee754_rem_pio2+0x1b8>
 80088ba:	4632      	mov	r2, r6
 80088bc:	463b      	mov	r3, r7
 80088be:	4650      	mov	r0, sl
 80088c0:	4659      	mov	r1, fp
 80088c2:	f7f7 fc89 	bl	80001d8 <__aeabi_dsub>
 80088c6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80088ca:	9305      	str	r3, [sp, #20]
 80088cc:	9a05      	ldr	r2, [sp, #20]
 80088ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	2b10      	cmp	r3, #16
 80088d6:	dc02      	bgt.n	80088de <__ieee754_rem_pio2+0x1be>
 80088d8:	e9c4 0100 	strd	r0, r1, [r4]
 80088dc:	e039      	b.n	8008952 <__ieee754_rem_pio2+0x232>
 80088de:	a34c      	add	r3, pc, #304	; (adr r3, 8008a10 <__ieee754_rem_pio2+0x2f0>)
 80088e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088e8:	f7f7 fe2e 	bl	8000548 <__aeabi_dmul>
 80088ec:	4606      	mov	r6, r0
 80088ee:	460f      	mov	r7, r1
 80088f0:	4602      	mov	r2, r0
 80088f2:	460b      	mov	r3, r1
 80088f4:	4650      	mov	r0, sl
 80088f6:	4659      	mov	r1, fp
 80088f8:	f7f7 fc6e 	bl	80001d8 <__aeabi_dsub>
 80088fc:	4602      	mov	r2, r0
 80088fe:	460b      	mov	r3, r1
 8008900:	4680      	mov	r8, r0
 8008902:	4689      	mov	r9, r1
 8008904:	4650      	mov	r0, sl
 8008906:	4659      	mov	r1, fp
 8008908:	f7f7 fc66 	bl	80001d8 <__aeabi_dsub>
 800890c:	4632      	mov	r2, r6
 800890e:	463b      	mov	r3, r7
 8008910:	f7f7 fc62 	bl	80001d8 <__aeabi_dsub>
 8008914:	a340      	add	r3, pc, #256	; (adr r3, 8008a18 <__ieee754_rem_pio2+0x2f8>)
 8008916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891a:	4606      	mov	r6, r0
 800891c:	460f      	mov	r7, r1
 800891e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008922:	f7f7 fe11 	bl	8000548 <__aeabi_dmul>
 8008926:	4632      	mov	r2, r6
 8008928:	463b      	mov	r3, r7
 800892a:	f7f7 fc55 	bl	80001d8 <__aeabi_dsub>
 800892e:	4602      	mov	r2, r0
 8008930:	460b      	mov	r3, r1
 8008932:	4606      	mov	r6, r0
 8008934:	460f      	mov	r7, r1
 8008936:	4640      	mov	r0, r8
 8008938:	4649      	mov	r1, r9
 800893a:	f7f7 fc4d 	bl	80001d8 <__aeabi_dsub>
 800893e:	9a05      	ldr	r2, [sp, #20]
 8008940:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	2b31      	cmp	r3, #49	; 0x31
 8008948:	dc20      	bgt.n	800898c <__ieee754_rem_pio2+0x26c>
 800894a:	e9c4 0100 	strd	r0, r1, [r4]
 800894e:	46c2      	mov	sl, r8
 8008950:	46cb      	mov	fp, r9
 8008952:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008956:	4650      	mov	r0, sl
 8008958:	4642      	mov	r2, r8
 800895a:	464b      	mov	r3, r9
 800895c:	4659      	mov	r1, fp
 800895e:	f7f7 fc3b 	bl	80001d8 <__aeabi_dsub>
 8008962:	463b      	mov	r3, r7
 8008964:	4632      	mov	r2, r6
 8008966:	f7f7 fc37 	bl	80001d8 <__aeabi_dsub>
 800896a:	9b04      	ldr	r3, [sp, #16]
 800896c:	2b00      	cmp	r3, #0
 800896e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008972:	f6bf af11 	bge.w	8008798 <__ieee754_rem_pio2+0x78>
 8008976:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800897a:	6063      	str	r3, [r4, #4]
 800897c:	f8c4 8000 	str.w	r8, [r4]
 8008980:	60a0      	str	r0, [r4, #8]
 8008982:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008986:	60e3      	str	r3, [r4, #12]
 8008988:	426d      	negs	r5, r5
 800898a:	e705      	b.n	8008798 <__ieee754_rem_pio2+0x78>
 800898c:	a326      	add	r3, pc, #152	; (adr r3, 8008a28 <__ieee754_rem_pio2+0x308>)
 800898e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008992:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008996:	f7f7 fdd7 	bl	8000548 <__aeabi_dmul>
 800899a:	4606      	mov	r6, r0
 800899c:	460f      	mov	r7, r1
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	4640      	mov	r0, r8
 80089a4:	4649      	mov	r1, r9
 80089a6:	f7f7 fc17 	bl	80001d8 <__aeabi_dsub>
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	4682      	mov	sl, r0
 80089b0:	468b      	mov	fp, r1
 80089b2:	4640      	mov	r0, r8
 80089b4:	4649      	mov	r1, r9
 80089b6:	f7f7 fc0f 	bl	80001d8 <__aeabi_dsub>
 80089ba:	4632      	mov	r2, r6
 80089bc:	463b      	mov	r3, r7
 80089be:	f7f7 fc0b 	bl	80001d8 <__aeabi_dsub>
 80089c2:	a31b      	add	r3, pc, #108	; (adr r3, 8008a30 <__ieee754_rem_pio2+0x310>)
 80089c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c8:	4606      	mov	r6, r0
 80089ca:	460f      	mov	r7, r1
 80089cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089d0:	f7f7 fdba 	bl	8000548 <__aeabi_dmul>
 80089d4:	4632      	mov	r2, r6
 80089d6:	463b      	mov	r3, r7
 80089d8:	f7f7 fbfe 	bl	80001d8 <__aeabi_dsub>
 80089dc:	4606      	mov	r6, r0
 80089de:	460f      	mov	r7, r1
 80089e0:	e764      	b.n	80088ac <__ieee754_rem_pio2+0x18c>
 80089e2:	4b1b      	ldr	r3, [pc, #108]	; (8008a50 <__ieee754_rem_pio2+0x330>)
 80089e4:	4598      	cmp	r8, r3
 80089e6:	dd35      	ble.n	8008a54 <__ieee754_rem_pio2+0x334>
 80089e8:	ee10 2a10 	vmov	r2, s0
 80089ec:	463b      	mov	r3, r7
 80089ee:	4630      	mov	r0, r6
 80089f0:	4639      	mov	r1, r7
 80089f2:	f7f7 fbf1 	bl	80001d8 <__aeabi_dsub>
 80089f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80089fa:	e9c4 0100 	strd	r0, r1, [r4]
 80089fe:	e6a1      	b.n	8008744 <__ieee754_rem_pio2+0x24>
 8008a00:	54400000 	.word	0x54400000
 8008a04:	3ff921fb 	.word	0x3ff921fb
 8008a08:	1a626331 	.word	0x1a626331
 8008a0c:	3dd0b461 	.word	0x3dd0b461
 8008a10:	1a600000 	.word	0x1a600000
 8008a14:	3dd0b461 	.word	0x3dd0b461
 8008a18:	2e037073 	.word	0x2e037073
 8008a1c:	3ba3198a 	.word	0x3ba3198a
 8008a20:	6dc9c883 	.word	0x6dc9c883
 8008a24:	3fe45f30 	.word	0x3fe45f30
 8008a28:	2e000000 	.word	0x2e000000
 8008a2c:	3ba3198a 	.word	0x3ba3198a
 8008a30:	252049c1 	.word	0x252049c1
 8008a34:	397b839a 	.word	0x397b839a
 8008a38:	3fe921fb 	.word	0x3fe921fb
 8008a3c:	4002d97b 	.word	0x4002d97b
 8008a40:	3ff921fb 	.word	0x3ff921fb
 8008a44:	413921fb 	.word	0x413921fb
 8008a48:	3fe00000 	.word	0x3fe00000
 8008a4c:	08009a20 	.word	0x08009a20
 8008a50:	7fefffff 	.word	0x7fefffff
 8008a54:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008a58:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008a5c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008a60:	4630      	mov	r0, r6
 8008a62:	460f      	mov	r7, r1
 8008a64:	f7f8 f820 	bl	8000aa8 <__aeabi_d2iz>
 8008a68:	f7f7 fd04 	bl	8000474 <__aeabi_i2d>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	460b      	mov	r3, r1
 8008a70:	4630      	mov	r0, r6
 8008a72:	4639      	mov	r1, r7
 8008a74:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008a78:	f7f7 fbae 	bl	80001d8 <__aeabi_dsub>
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	4b1f      	ldr	r3, [pc, #124]	; (8008afc <__ieee754_rem_pio2+0x3dc>)
 8008a80:	f7f7 fd62 	bl	8000548 <__aeabi_dmul>
 8008a84:	460f      	mov	r7, r1
 8008a86:	4606      	mov	r6, r0
 8008a88:	f7f8 f80e 	bl	8000aa8 <__aeabi_d2iz>
 8008a8c:	f7f7 fcf2 	bl	8000474 <__aeabi_i2d>
 8008a90:	4602      	mov	r2, r0
 8008a92:	460b      	mov	r3, r1
 8008a94:	4630      	mov	r0, r6
 8008a96:	4639      	mov	r1, r7
 8008a98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008a9c:	f7f7 fb9c 	bl	80001d8 <__aeabi_dsub>
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	4b16      	ldr	r3, [pc, #88]	; (8008afc <__ieee754_rem_pio2+0x3dc>)
 8008aa4:	f7f7 fd50 	bl	8000548 <__aeabi_dmul>
 8008aa8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008aac:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008ab0:	f04f 0803 	mov.w	r8, #3
 8008ab4:	2600      	movs	r6, #0
 8008ab6:	2700      	movs	r7, #0
 8008ab8:	4632      	mov	r2, r6
 8008aba:	463b      	mov	r3, r7
 8008abc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008ac0:	f108 3aff 	add.w	sl, r8, #4294967295
 8008ac4:	f7f7 ffa8 	bl	8000a18 <__aeabi_dcmpeq>
 8008ac8:	b9b0      	cbnz	r0, 8008af8 <__ieee754_rem_pio2+0x3d8>
 8008aca:	4b0d      	ldr	r3, [pc, #52]	; (8008b00 <__ieee754_rem_pio2+0x3e0>)
 8008acc:	9301      	str	r3, [sp, #4]
 8008ace:	2302      	movs	r3, #2
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	462a      	mov	r2, r5
 8008ad4:	4643      	mov	r3, r8
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	a806      	add	r0, sp, #24
 8008ada:	f000 f8dd 	bl	8008c98 <__kernel_rem_pio2>
 8008ade:	9b04      	ldr	r3, [sp, #16]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	4605      	mov	r5, r0
 8008ae4:	f6bf ae58 	bge.w	8008798 <__ieee754_rem_pio2+0x78>
 8008ae8:	6863      	ldr	r3, [r4, #4]
 8008aea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008aee:	6063      	str	r3, [r4, #4]
 8008af0:	68e3      	ldr	r3, [r4, #12]
 8008af2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008af6:	e746      	b.n	8008986 <__ieee754_rem_pio2+0x266>
 8008af8:	46d0      	mov	r8, sl
 8008afa:	e7dd      	b.n	8008ab8 <__ieee754_rem_pio2+0x398>
 8008afc:	41700000 	.word	0x41700000
 8008b00:	08009aa0 	.word	0x08009aa0
 8008b04:	00000000 	.word	0x00000000

08008b08 <__kernel_cos>:
 8008b08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0c:	ec59 8b10 	vmov	r8, r9, d0
 8008b10:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8008b14:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008b18:	ed2d 8b02 	vpush	{d8}
 8008b1c:	eeb0 8a41 	vmov.f32	s16, s2
 8008b20:	eef0 8a61 	vmov.f32	s17, s3
 8008b24:	da07      	bge.n	8008b36 <__kernel_cos+0x2e>
 8008b26:	ee10 0a10 	vmov	r0, s0
 8008b2a:	4649      	mov	r1, r9
 8008b2c:	f7f7 ffbc 	bl	8000aa8 <__aeabi_d2iz>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	f000 8089 	beq.w	8008c48 <__kernel_cos+0x140>
 8008b36:	4642      	mov	r2, r8
 8008b38:	464b      	mov	r3, r9
 8008b3a:	4640      	mov	r0, r8
 8008b3c:	4649      	mov	r1, r9
 8008b3e:	f7f7 fd03 	bl	8000548 <__aeabi_dmul>
 8008b42:	2200      	movs	r2, #0
 8008b44:	4b4e      	ldr	r3, [pc, #312]	; (8008c80 <__kernel_cos+0x178>)
 8008b46:	4604      	mov	r4, r0
 8008b48:	460d      	mov	r5, r1
 8008b4a:	f7f7 fcfd 	bl	8000548 <__aeabi_dmul>
 8008b4e:	a340      	add	r3, pc, #256	; (adr r3, 8008c50 <__kernel_cos+0x148>)
 8008b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b54:	4682      	mov	sl, r0
 8008b56:	468b      	mov	fp, r1
 8008b58:	4620      	mov	r0, r4
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	f7f7 fcf4 	bl	8000548 <__aeabi_dmul>
 8008b60:	a33d      	add	r3, pc, #244	; (adr r3, 8008c58 <__kernel_cos+0x150>)
 8008b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b66:	f7f7 fb39 	bl	80001dc <__adddf3>
 8008b6a:	4622      	mov	r2, r4
 8008b6c:	462b      	mov	r3, r5
 8008b6e:	f7f7 fceb 	bl	8000548 <__aeabi_dmul>
 8008b72:	a33b      	add	r3, pc, #236	; (adr r3, 8008c60 <__kernel_cos+0x158>)
 8008b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b78:	f7f7 fb2e 	bl	80001d8 <__aeabi_dsub>
 8008b7c:	4622      	mov	r2, r4
 8008b7e:	462b      	mov	r3, r5
 8008b80:	f7f7 fce2 	bl	8000548 <__aeabi_dmul>
 8008b84:	a338      	add	r3, pc, #224	; (adr r3, 8008c68 <__kernel_cos+0x160>)
 8008b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8a:	f7f7 fb27 	bl	80001dc <__adddf3>
 8008b8e:	4622      	mov	r2, r4
 8008b90:	462b      	mov	r3, r5
 8008b92:	f7f7 fcd9 	bl	8000548 <__aeabi_dmul>
 8008b96:	a336      	add	r3, pc, #216	; (adr r3, 8008c70 <__kernel_cos+0x168>)
 8008b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9c:	f7f7 fb1c 	bl	80001d8 <__aeabi_dsub>
 8008ba0:	4622      	mov	r2, r4
 8008ba2:	462b      	mov	r3, r5
 8008ba4:	f7f7 fcd0 	bl	8000548 <__aeabi_dmul>
 8008ba8:	a333      	add	r3, pc, #204	; (adr r3, 8008c78 <__kernel_cos+0x170>)
 8008baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bae:	f7f7 fb15 	bl	80001dc <__adddf3>
 8008bb2:	4622      	mov	r2, r4
 8008bb4:	462b      	mov	r3, r5
 8008bb6:	f7f7 fcc7 	bl	8000548 <__aeabi_dmul>
 8008bba:	4622      	mov	r2, r4
 8008bbc:	462b      	mov	r3, r5
 8008bbe:	f7f7 fcc3 	bl	8000548 <__aeabi_dmul>
 8008bc2:	ec53 2b18 	vmov	r2, r3, d8
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	460d      	mov	r5, r1
 8008bca:	4640      	mov	r0, r8
 8008bcc:	4649      	mov	r1, r9
 8008bce:	f7f7 fcbb 	bl	8000548 <__aeabi_dmul>
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	4629      	mov	r1, r5
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f7f7 fafd 	bl	80001d8 <__aeabi_dsub>
 8008bde:	4b29      	ldr	r3, [pc, #164]	; (8008c84 <__kernel_cos+0x17c>)
 8008be0:	429e      	cmp	r6, r3
 8008be2:	4680      	mov	r8, r0
 8008be4:	4689      	mov	r9, r1
 8008be6:	dc11      	bgt.n	8008c0c <__kernel_cos+0x104>
 8008be8:	4602      	mov	r2, r0
 8008bea:	460b      	mov	r3, r1
 8008bec:	4650      	mov	r0, sl
 8008bee:	4659      	mov	r1, fp
 8008bf0:	f7f7 faf2 	bl	80001d8 <__aeabi_dsub>
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	4924      	ldr	r1, [pc, #144]	; (8008c88 <__kernel_cos+0x180>)
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	f7f7 faec 	bl	80001d8 <__aeabi_dsub>
 8008c00:	ecbd 8b02 	vpop	{d8}
 8008c04:	ec41 0b10 	vmov	d0, r0, r1
 8008c08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c0c:	4b1f      	ldr	r3, [pc, #124]	; (8008c8c <__kernel_cos+0x184>)
 8008c0e:	491e      	ldr	r1, [pc, #120]	; (8008c88 <__kernel_cos+0x180>)
 8008c10:	429e      	cmp	r6, r3
 8008c12:	bfcc      	ite	gt
 8008c14:	4d1e      	ldrgt	r5, [pc, #120]	; (8008c90 <__kernel_cos+0x188>)
 8008c16:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008c1a:	2400      	movs	r4, #0
 8008c1c:	4622      	mov	r2, r4
 8008c1e:	462b      	mov	r3, r5
 8008c20:	2000      	movs	r0, #0
 8008c22:	f7f7 fad9 	bl	80001d8 <__aeabi_dsub>
 8008c26:	4622      	mov	r2, r4
 8008c28:	4606      	mov	r6, r0
 8008c2a:	460f      	mov	r7, r1
 8008c2c:	462b      	mov	r3, r5
 8008c2e:	4650      	mov	r0, sl
 8008c30:	4659      	mov	r1, fp
 8008c32:	f7f7 fad1 	bl	80001d8 <__aeabi_dsub>
 8008c36:	4642      	mov	r2, r8
 8008c38:	464b      	mov	r3, r9
 8008c3a:	f7f7 facd 	bl	80001d8 <__aeabi_dsub>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	460b      	mov	r3, r1
 8008c42:	4630      	mov	r0, r6
 8008c44:	4639      	mov	r1, r7
 8008c46:	e7d9      	b.n	8008bfc <__kernel_cos+0xf4>
 8008c48:	2000      	movs	r0, #0
 8008c4a:	490f      	ldr	r1, [pc, #60]	; (8008c88 <__kernel_cos+0x180>)
 8008c4c:	e7d8      	b.n	8008c00 <__kernel_cos+0xf8>
 8008c4e:	bf00      	nop
 8008c50:	be8838d4 	.word	0xbe8838d4
 8008c54:	bda8fae9 	.word	0xbda8fae9
 8008c58:	bdb4b1c4 	.word	0xbdb4b1c4
 8008c5c:	3e21ee9e 	.word	0x3e21ee9e
 8008c60:	809c52ad 	.word	0x809c52ad
 8008c64:	3e927e4f 	.word	0x3e927e4f
 8008c68:	19cb1590 	.word	0x19cb1590
 8008c6c:	3efa01a0 	.word	0x3efa01a0
 8008c70:	16c15177 	.word	0x16c15177
 8008c74:	3f56c16c 	.word	0x3f56c16c
 8008c78:	5555554c 	.word	0x5555554c
 8008c7c:	3fa55555 	.word	0x3fa55555
 8008c80:	3fe00000 	.word	0x3fe00000
 8008c84:	3fd33332 	.word	0x3fd33332
 8008c88:	3ff00000 	.word	0x3ff00000
 8008c8c:	3fe90000 	.word	0x3fe90000
 8008c90:	3fd20000 	.word	0x3fd20000
 8008c94:	00000000 	.word	0x00000000

08008c98 <__kernel_rem_pio2>:
 8008c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9c:	ed2d 8b02 	vpush	{d8}
 8008ca0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008ca4:	1ed4      	subs	r4, r2, #3
 8008ca6:	9308      	str	r3, [sp, #32]
 8008ca8:	9101      	str	r1, [sp, #4]
 8008caa:	4bc5      	ldr	r3, [pc, #788]	; (8008fc0 <__kernel_rem_pio2+0x328>)
 8008cac:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008cae:	9009      	str	r0, [sp, #36]	; 0x24
 8008cb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008cb4:	9304      	str	r3, [sp, #16]
 8008cb6:	9b08      	ldr	r3, [sp, #32]
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	9307      	str	r3, [sp, #28]
 8008cbc:	2318      	movs	r3, #24
 8008cbe:	fb94 f4f3 	sdiv	r4, r4, r3
 8008cc2:	f06f 0317 	mvn.w	r3, #23
 8008cc6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8008cca:	fb04 3303 	mla	r3, r4, r3, r3
 8008cce:	eb03 0a02 	add.w	sl, r3, r2
 8008cd2:	9b04      	ldr	r3, [sp, #16]
 8008cd4:	9a07      	ldr	r2, [sp, #28]
 8008cd6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008fb0 <__kernel_rem_pio2+0x318>
 8008cda:	eb03 0802 	add.w	r8, r3, r2
 8008cde:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008ce0:	1aa7      	subs	r7, r4, r2
 8008ce2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008ce6:	ae22      	add	r6, sp, #136	; 0x88
 8008ce8:	2500      	movs	r5, #0
 8008cea:	4545      	cmp	r5, r8
 8008cec:	dd13      	ble.n	8008d16 <__kernel_rem_pio2+0x7e>
 8008cee:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8008fb0 <__kernel_rem_pio2+0x318>
 8008cf2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008cf6:	2600      	movs	r6, #0
 8008cf8:	9b04      	ldr	r3, [sp, #16]
 8008cfa:	429e      	cmp	r6, r3
 8008cfc:	dc32      	bgt.n	8008d64 <__kernel_rem_pio2+0xcc>
 8008cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d00:	9302      	str	r3, [sp, #8]
 8008d02:	9b08      	ldr	r3, [sp, #32]
 8008d04:	199d      	adds	r5, r3, r6
 8008d06:	ab22      	add	r3, sp, #136	; 0x88
 8008d08:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008d0c:	9306      	str	r3, [sp, #24]
 8008d0e:	ec59 8b18 	vmov	r8, r9, d8
 8008d12:	2700      	movs	r7, #0
 8008d14:	e01f      	b.n	8008d56 <__kernel_rem_pio2+0xbe>
 8008d16:	42ef      	cmn	r7, r5
 8008d18:	d407      	bmi.n	8008d2a <__kernel_rem_pio2+0x92>
 8008d1a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008d1e:	f7f7 fba9 	bl	8000474 <__aeabi_i2d>
 8008d22:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008d26:	3501      	adds	r5, #1
 8008d28:	e7df      	b.n	8008cea <__kernel_rem_pio2+0x52>
 8008d2a:	ec51 0b18 	vmov	r0, r1, d8
 8008d2e:	e7f8      	b.n	8008d22 <__kernel_rem_pio2+0x8a>
 8008d30:	9906      	ldr	r1, [sp, #24]
 8008d32:	9d02      	ldr	r5, [sp, #8]
 8008d34:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8008d38:	9106      	str	r1, [sp, #24]
 8008d3a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8008d3e:	9502      	str	r5, [sp, #8]
 8008d40:	f7f7 fc02 	bl	8000548 <__aeabi_dmul>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	4640      	mov	r0, r8
 8008d4a:	4649      	mov	r1, r9
 8008d4c:	f7f7 fa46 	bl	80001dc <__adddf3>
 8008d50:	3701      	adds	r7, #1
 8008d52:	4680      	mov	r8, r0
 8008d54:	4689      	mov	r9, r1
 8008d56:	9b07      	ldr	r3, [sp, #28]
 8008d58:	429f      	cmp	r7, r3
 8008d5a:	dde9      	ble.n	8008d30 <__kernel_rem_pio2+0x98>
 8008d5c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8008d60:	3601      	adds	r6, #1
 8008d62:	e7c9      	b.n	8008cf8 <__kernel_rem_pio2+0x60>
 8008d64:	9b04      	ldr	r3, [sp, #16]
 8008d66:	aa0e      	add	r2, sp, #56	; 0x38
 8008d68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d6c:	930c      	str	r3, [sp, #48]	; 0x30
 8008d6e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008d70:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008d74:	9c04      	ldr	r4, [sp, #16]
 8008d76:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d78:	ab9a      	add	r3, sp, #616	; 0x268
 8008d7a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8008d7e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d86:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8008d8a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8008d8e:	ab9a      	add	r3, sp, #616	; 0x268
 8008d90:	445b      	add	r3, fp
 8008d92:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8008d96:	2500      	movs	r5, #0
 8008d98:	1b63      	subs	r3, r4, r5
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	dc78      	bgt.n	8008e90 <__kernel_rem_pio2+0x1f8>
 8008d9e:	4650      	mov	r0, sl
 8008da0:	ec49 8b10 	vmov	d0, r8, r9
 8008da4:	f000 fd4c 	bl	8009840 <scalbn>
 8008da8:	ec57 6b10 	vmov	r6, r7, d0
 8008dac:	2200      	movs	r2, #0
 8008dae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008db2:	ee10 0a10 	vmov	r0, s0
 8008db6:	4639      	mov	r1, r7
 8008db8:	f7f7 fbc6 	bl	8000548 <__aeabi_dmul>
 8008dbc:	ec41 0b10 	vmov	d0, r0, r1
 8008dc0:	f7ff fa3a 	bl	8008238 <floor>
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	ec51 0b10 	vmov	r0, r1, d0
 8008dca:	4b7e      	ldr	r3, [pc, #504]	; (8008fc4 <__kernel_rem_pio2+0x32c>)
 8008dcc:	f7f7 fbbc 	bl	8000548 <__aeabi_dmul>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	4639      	mov	r1, r7
 8008dd8:	f7f7 f9fe 	bl	80001d8 <__aeabi_dsub>
 8008ddc:	460f      	mov	r7, r1
 8008dde:	4606      	mov	r6, r0
 8008de0:	f7f7 fe62 	bl	8000aa8 <__aeabi_d2iz>
 8008de4:	9006      	str	r0, [sp, #24]
 8008de6:	f7f7 fb45 	bl	8000474 <__aeabi_i2d>
 8008dea:	4602      	mov	r2, r0
 8008dec:	460b      	mov	r3, r1
 8008dee:	4630      	mov	r0, r6
 8008df0:	4639      	mov	r1, r7
 8008df2:	f7f7 f9f1 	bl	80001d8 <__aeabi_dsub>
 8008df6:	f1ba 0f00 	cmp.w	sl, #0
 8008dfa:	4606      	mov	r6, r0
 8008dfc:	460f      	mov	r7, r1
 8008dfe:	dd6c      	ble.n	8008eda <__kernel_rem_pio2+0x242>
 8008e00:	1e62      	subs	r2, r4, #1
 8008e02:	ab0e      	add	r3, sp, #56	; 0x38
 8008e04:	f1ca 0118 	rsb	r1, sl, #24
 8008e08:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008e0c:	9d06      	ldr	r5, [sp, #24]
 8008e0e:	fa40 f301 	asr.w	r3, r0, r1
 8008e12:	441d      	add	r5, r3
 8008e14:	408b      	lsls	r3, r1
 8008e16:	1ac0      	subs	r0, r0, r3
 8008e18:	ab0e      	add	r3, sp, #56	; 0x38
 8008e1a:	9506      	str	r5, [sp, #24]
 8008e1c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008e20:	f1ca 0317 	rsb	r3, sl, #23
 8008e24:	fa40 f303 	asr.w	r3, r0, r3
 8008e28:	9302      	str	r3, [sp, #8]
 8008e2a:	9b02      	ldr	r3, [sp, #8]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	dd62      	ble.n	8008ef6 <__kernel_rem_pio2+0x25e>
 8008e30:	9b06      	ldr	r3, [sp, #24]
 8008e32:	2200      	movs	r2, #0
 8008e34:	3301      	adds	r3, #1
 8008e36:	9306      	str	r3, [sp, #24]
 8008e38:	4615      	mov	r5, r2
 8008e3a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008e3e:	4294      	cmp	r4, r2
 8008e40:	f300 8095 	bgt.w	8008f6e <__kernel_rem_pio2+0x2d6>
 8008e44:	f1ba 0f00 	cmp.w	sl, #0
 8008e48:	dd07      	ble.n	8008e5a <__kernel_rem_pio2+0x1c2>
 8008e4a:	f1ba 0f01 	cmp.w	sl, #1
 8008e4e:	f000 80a2 	beq.w	8008f96 <__kernel_rem_pio2+0x2fe>
 8008e52:	f1ba 0f02 	cmp.w	sl, #2
 8008e56:	f000 80c1 	beq.w	8008fdc <__kernel_rem_pio2+0x344>
 8008e5a:	9b02      	ldr	r3, [sp, #8]
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d14a      	bne.n	8008ef6 <__kernel_rem_pio2+0x25e>
 8008e60:	4632      	mov	r2, r6
 8008e62:	463b      	mov	r3, r7
 8008e64:	2000      	movs	r0, #0
 8008e66:	4958      	ldr	r1, [pc, #352]	; (8008fc8 <__kernel_rem_pio2+0x330>)
 8008e68:	f7f7 f9b6 	bl	80001d8 <__aeabi_dsub>
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	460f      	mov	r7, r1
 8008e70:	2d00      	cmp	r5, #0
 8008e72:	d040      	beq.n	8008ef6 <__kernel_rem_pio2+0x25e>
 8008e74:	4650      	mov	r0, sl
 8008e76:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008fb8 <__kernel_rem_pio2+0x320>
 8008e7a:	f000 fce1 	bl	8009840 <scalbn>
 8008e7e:	4630      	mov	r0, r6
 8008e80:	4639      	mov	r1, r7
 8008e82:	ec53 2b10 	vmov	r2, r3, d0
 8008e86:	f7f7 f9a7 	bl	80001d8 <__aeabi_dsub>
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	460f      	mov	r7, r1
 8008e8e:	e032      	b.n	8008ef6 <__kernel_rem_pio2+0x25e>
 8008e90:	2200      	movs	r2, #0
 8008e92:	4b4e      	ldr	r3, [pc, #312]	; (8008fcc <__kernel_rem_pio2+0x334>)
 8008e94:	4640      	mov	r0, r8
 8008e96:	4649      	mov	r1, r9
 8008e98:	f7f7 fb56 	bl	8000548 <__aeabi_dmul>
 8008e9c:	f7f7 fe04 	bl	8000aa8 <__aeabi_d2iz>
 8008ea0:	f7f7 fae8 	bl	8000474 <__aeabi_i2d>
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	4b4a      	ldr	r3, [pc, #296]	; (8008fd0 <__kernel_rem_pio2+0x338>)
 8008ea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eac:	f7f7 fb4c 	bl	8000548 <__aeabi_dmul>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4640      	mov	r0, r8
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	f7f7 f98e 	bl	80001d8 <__aeabi_dsub>
 8008ebc:	f7f7 fdf4 	bl	8000aa8 <__aeabi_d2iz>
 8008ec0:	ab0e      	add	r3, sp, #56	; 0x38
 8008ec2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8008ec6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008eca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ece:	f7f7 f985 	bl	80001dc <__adddf3>
 8008ed2:	3501      	adds	r5, #1
 8008ed4:	4680      	mov	r8, r0
 8008ed6:	4689      	mov	r9, r1
 8008ed8:	e75e      	b.n	8008d98 <__kernel_rem_pio2+0x100>
 8008eda:	d105      	bne.n	8008ee8 <__kernel_rem_pio2+0x250>
 8008edc:	1e63      	subs	r3, r4, #1
 8008ede:	aa0e      	add	r2, sp, #56	; 0x38
 8008ee0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008ee4:	15c3      	asrs	r3, r0, #23
 8008ee6:	e79f      	b.n	8008e28 <__kernel_rem_pio2+0x190>
 8008ee8:	2200      	movs	r2, #0
 8008eea:	4b3a      	ldr	r3, [pc, #232]	; (8008fd4 <__kernel_rem_pio2+0x33c>)
 8008eec:	f7f7 fdb2 	bl	8000a54 <__aeabi_dcmpge>
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d139      	bne.n	8008f68 <__kernel_rem_pio2+0x2d0>
 8008ef4:	9002      	str	r0, [sp, #8]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	2300      	movs	r3, #0
 8008efa:	4630      	mov	r0, r6
 8008efc:	4639      	mov	r1, r7
 8008efe:	f7f7 fd8b 	bl	8000a18 <__aeabi_dcmpeq>
 8008f02:	2800      	cmp	r0, #0
 8008f04:	f000 80c7 	beq.w	8009096 <__kernel_rem_pio2+0x3fe>
 8008f08:	1e65      	subs	r5, r4, #1
 8008f0a:	462b      	mov	r3, r5
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	9904      	ldr	r1, [sp, #16]
 8008f10:	428b      	cmp	r3, r1
 8008f12:	da6a      	bge.n	8008fea <__kernel_rem_pio2+0x352>
 8008f14:	2a00      	cmp	r2, #0
 8008f16:	f000 8088 	beq.w	800902a <__kernel_rem_pio2+0x392>
 8008f1a:	ab0e      	add	r3, sp, #56	; 0x38
 8008f1c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008f20:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f000 80b4 	beq.w	8009092 <__kernel_rem_pio2+0x3fa>
 8008f2a:	4650      	mov	r0, sl
 8008f2c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8008fb8 <__kernel_rem_pio2+0x320>
 8008f30:	f000 fc86 	bl	8009840 <scalbn>
 8008f34:	00ec      	lsls	r4, r5, #3
 8008f36:	ab72      	add	r3, sp, #456	; 0x1c8
 8008f38:	191e      	adds	r6, r3, r4
 8008f3a:	ec59 8b10 	vmov	r8, r9, d0
 8008f3e:	f106 0a08 	add.w	sl, r6, #8
 8008f42:	462f      	mov	r7, r5
 8008f44:	2f00      	cmp	r7, #0
 8008f46:	f280 80df 	bge.w	8009108 <__kernel_rem_pio2+0x470>
 8008f4a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8008fb0 <__kernel_rem_pio2+0x318>
 8008f4e:	f04f 0a00 	mov.w	sl, #0
 8008f52:	eba5 030a 	sub.w	r3, r5, sl
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f2c0 810a 	blt.w	8009170 <__kernel_rem_pio2+0x4d8>
 8008f5c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8008fd8 <__kernel_rem_pio2+0x340>
 8008f60:	ec59 8b18 	vmov	r8, r9, d8
 8008f64:	2700      	movs	r7, #0
 8008f66:	e0f5      	b.n	8009154 <__kernel_rem_pio2+0x4bc>
 8008f68:	2302      	movs	r3, #2
 8008f6a:	9302      	str	r3, [sp, #8]
 8008f6c:	e760      	b.n	8008e30 <__kernel_rem_pio2+0x198>
 8008f6e:	ab0e      	add	r3, sp, #56	; 0x38
 8008f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f74:	b94d      	cbnz	r5, 8008f8a <__kernel_rem_pio2+0x2f2>
 8008f76:	b12b      	cbz	r3, 8008f84 <__kernel_rem_pio2+0x2ec>
 8008f78:	a80e      	add	r0, sp, #56	; 0x38
 8008f7a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008f7e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8008f82:	2301      	movs	r3, #1
 8008f84:	3201      	adds	r2, #1
 8008f86:	461d      	mov	r5, r3
 8008f88:	e759      	b.n	8008e3e <__kernel_rem_pio2+0x1a6>
 8008f8a:	a80e      	add	r0, sp, #56	; 0x38
 8008f8c:	1acb      	subs	r3, r1, r3
 8008f8e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8008f92:	462b      	mov	r3, r5
 8008f94:	e7f6      	b.n	8008f84 <__kernel_rem_pio2+0x2ec>
 8008f96:	1e62      	subs	r2, r4, #1
 8008f98:	ab0e      	add	r3, sp, #56	; 0x38
 8008f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f9e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008fa2:	a90e      	add	r1, sp, #56	; 0x38
 8008fa4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008fa8:	e757      	b.n	8008e5a <__kernel_rem_pio2+0x1c2>
 8008faa:	bf00      	nop
 8008fac:	f3af 8000 	nop.w
	...
 8008fbc:	3ff00000 	.word	0x3ff00000
 8008fc0:	08009be8 	.word	0x08009be8
 8008fc4:	40200000 	.word	0x40200000
 8008fc8:	3ff00000 	.word	0x3ff00000
 8008fcc:	3e700000 	.word	0x3e700000
 8008fd0:	41700000 	.word	0x41700000
 8008fd4:	3fe00000 	.word	0x3fe00000
 8008fd8:	08009ba8 	.word	0x08009ba8
 8008fdc:	1e62      	subs	r2, r4, #1
 8008fde:	ab0e      	add	r3, sp, #56	; 0x38
 8008fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008fe8:	e7db      	b.n	8008fa2 <__kernel_rem_pio2+0x30a>
 8008fea:	a90e      	add	r1, sp, #56	; 0x38
 8008fec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	430a      	orrs	r2, r1
 8008ff4:	e78b      	b.n	8008f0e <__kernel_rem_pio2+0x276>
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008ffc:	2900      	cmp	r1, #0
 8008ffe:	d0fa      	beq.n	8008ff6 <__kernel_rem_pio2+0x35e>
 8009000:	9a08      	ldr	r2, [sp, #32]
 8009002:	4422      	add	r2, r4
 8009004:	00d2      	lsls	r2, r2, #3
 8009006:	a922      	add	r1, sp, #136	; 0x88
 8009008:	18e3      	adds	r3, r4, r3
 800900a:	9206      	str	r2, [sp, #24]
 800900c:	440a      	add	r2, r1
 800900e:	9302      	str	r3, [sp, #8]
 8009010:	f10b 0108 	add.w	r1, fp, #8
 8009014:	f102 0308 	add.w	r3, r2, #8
 8009018:	1c66      	adds	r6, r4, #1
 800901a:	910a      	str	r1, [sp, #40]	; 0x28
 800901c:	2500      	movs	r5, #0
 800901e:	930d      	str	r3, [sp, #52]	; 0x34
 8009020:	9b02      	ldr	r3, [sp, #8]
 8009022:	42b3      	cmp	r3, r6
 8009024:	da04      	bge.n	8009030 <__kernel_rem_pio2+0x398>
 8009026:	461c      	mov	r4, r3
 8009028:	e6a6      	b.n	8008d78 <__kernel_rem_pio2+0xe0>
 800902a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800902c:	2301      	movs	r3, #1
 800902e:	e7e3      	b.n	8008ff8 <__kernel_rem_pio2+0x360>
 8009030:	9b06      	ldr	r3, [sp, #24]
 8009032:	18ef      	adds	r7, r5, r3
 8009034:	ab22      	add	r3, sp, #136	; 0x88
 8009036:	441f      	add	r7, r3
 8009038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800903a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800903e:	f7f7 fa19 	bl	8000474 <__aeabi_i2d>
 8009042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009044:	461c      	mov	r4, r3
 8009046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009048:	e9c7 0100 	strd	r0, r1, [r7]
 800904c:	eb03 0b05 	add.w	fp, r3, r5
 8009050:	2700      	movs	r7, #0
 8009052:	f04f 0800 	mov.w	r8, #0
 8009056:	f04f 0900 	mov.w	r9, #0
 800905a:	9b07      	ldr	r3, [sp, #28]
 800905c:	429f      	cmp	r7, r3
 800905e:	dd08      	ble.n	8009072 <__kernel_rem_pio2+0x3da>
 8009060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009062:	aa72      	add	r2, sp, #456	; 0x1c8
 8009064:	18eb      	adds	r3, r5, r3
 8009066:	4413      	add	r3, r2
 8009068:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800906c:	3601      	adds	r6, #1
 800906e:	3508      	adds	r5, #8
 8009070:	e7d6      	b.n	8009020 <__kernel_rem_pio2+0x388>
 8009072:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009076:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800907a:	f7f7 fa65 	bl	8000548 <__aeabi_dmul>
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	4640      	mov	r0, r8
 8009084:	4649      	mov	r1, r9
 8009086:	f7f7 f8a9 	bl	80001dc <__adddf3>
 800908a:	3701      	adds	r7, #1
 800908c:	4680      	mov	r8, r0
 800908e:	4689      	mov	r9, r1
 8009090:	e7e3      	b.n	800905a <__kernel_rem_pio2+0x3c2>
 8009092:	3d01      	subs	r5, #1
 8009094:	e741      	b.n	8008f1a <__kernel_rem_pio2+0x282>
 8009096:	f1ca 0000 	rsb	r0, sl, #0
 800909a:	ec47 6b10 	vmov	d0, r6, r7
 800909e:	f000 fbcf 	bl	8009840 <scalbn>
 80090a2:	ec57 6b10 	vmov	r6, r7, d0
 80090a6:	2200      	movs	r2, #0
 80090a8:	4b99      	ldr	r3, [pc, #612]	; (8009310 <__kernel_rem_pio2+0x678>)
 80090aa:	ee10 0a10 	vmov	r0, s0
 80090ae:	4639      	mov	r1, r7
 80090b0:	f7f7 fcd0 	bl	8000a54 <__aeabi_dcmpge>
 80090b4:	b1f8      	cbz	r0, 80090f6 <__kernel_rem_pio2+0x45e>
 80090b6:	2200      	movs	r2, #0
 80090b8:	4b96      	ldr	r3, [pc, #600]	; (8009314 <__kernel_rem_pio2+0x67c>)
 80090ba:	4630      	mov	r0, r6
 80090bc:	4639      	mov	r1, r7
 80090be:	f7f7 fa43 	bl	8000548 <__aeabi_dmul>
 80090c2:	f7f7 fcf1 	bl	8000aa8 <__aeabi_d2iz>
 80090c6:	4680      	mov	r8, r0
 80090c8:	f7f7 f9d4 	bl	8000474 <__aeabi_i2d>
 80090cc:	2200      	movs	r2, #0
 80090ce:	4b90      	ldr	r3, [pc, #576]	; (8009310 <__kernel_rem_pio2+0x678>)
 80090d0:	f7f7 fa3a 	bl	8000548 <__aeabi_dmul>
 80090d4:	460b      	mov	r3, r1
 80090d6:	4602      	mov	r2, r0
 80090d8:	4639      	mov	r1, r7
 80090da:	4630      	mov	r0, r6
 80090dc:	f7f7 f87c 	bl	80001d8 <__aeabi_dsub>
 80090e0:	f7f7 fce2 	bl	8000aa8 <__aeabi_d2iz>
 80090e4:	1c65      	adds	r5, r4, #1
 80090e6:	ab0e      	add	r3, sp, #56	; 0x38
 80090e8:	f10a 0a18 	add.w	sl, sl, #24
 80090ec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80090f0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80090f4:	e719      	b.n	8008f2a <__kernel_rem_pio2+0x292>
 80090f6:	4630      	mov	r0, r6
 80090f8:	4639      	mov	r1, r7
 80090fa:	f7f7 fcd5 	bl	8000aa8 <__aeabi_d2iz>
 80090fe:	ab0e      	add	r3, sp, #56	; 0x38
 8009100:	4625      	mov	r5, r4
 8009102:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009106:	e710      	b.n	8008f2a <__kernel_rem_pio2+0x292>
 8009108:	ab0e      	add	r3, sp, #56	; 0x38
 800910a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800910e:	f7f7 f9b1 	bl	8000474 <__aeabi_i2d>
 8009112:	4642      	mov	r2, r8
 8009114:	464b      	mov	r3, r9
 8009116:	f7f7 fa17 	bl	8000548 <__aeabi_dmul>
 800911a:	2200      	movs	r2, #0
 800911c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8009120:	4b7c      	ldr	r3, [pc, #496]	; (8009314 <__kernel_rem_pio2+0x67c>)
 8009122:	4640      	mov	r0, r8
 8009124:	4649      	mov	r1, r9
 8009126:	f7f7 fa0f 	bl	8000548 <__aeabi_dmul>
 800912a:	3f01      	subs	r7, #1
 800912c:	4680      	mov	r8, r0
 800912e:	4689      	mov	r9, r1
 8009130:	e708      	b.n	8008f44 <__kernel_rem_pio2+0x2ac>
 8009132:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800913e:	f7f7 fa03 	bl	8000548 <__aeabi_dmul>
 8009142:	4602      	mov	r2, r0
 8009144:	460b      	mov	r3, r1
 8009146:	4640      	mov	r0, r8
 8009148:	4649      	mov	r1, r9
 800914a:	f7f7 f847 	bl	80001dc <__adddf3>
 800914e:	3701      	adds	r7, #1
 8009150:	4680      	mov	r8, r0
 8009152:	4689      	mov	r9, r1
 8009154:	9b04      	ldr	r3, [sp, #16]
 8009156:	429f      	cmp	r7, r3
 8009158:	dc01      	bgt.n	800915e <__kernel_rem_pio2+0x4c6>
 800915a:	45ba      	cmp	sl, r7
 800915c:	dae9      	bge.n	8009132 <__kernel_rem_pio2+0x49a>
 800915e:	ab4a      	add	r3, sp, #296	; 0x128
 8009160:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009164:	e9c3 8900 	strd	r8, r9, [r3]
 8009168:	f10a 0a01 	add.w	sl, sl, #1
 800916c:	3e08      	subs	r6, #8
 800916e:	e6f0      	b.n	8008f52 <__kernel_rem_pio2+0x2ba>
 8009170:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009172:	2b03      	cmp	r3, #3
 8009174:	d85b      	bhi.n	800922e <__kernel_rem_pio2+0x596>
 8009176:	e8df f003 	tbb	[pc, r3]
 800917a:	264a      	.short	0x264a
 800917c:	0226      	.short	0x0226
 800917e:	ab9a      	add	r3, sp, #616	; 0x268
 8009180:	441c      	add	r4, r3
 8009182:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009186:	46a2      	mov	sl, r4
 8009188:	46ab      	mov	fp, r5
 800918a:	f1bb 0f00 	cmp.w	fp, #0
 800918e:	dc6c      	bgt.n	800926a <__kernel_rem_pio2+0x5d2>
 8009190:	46a2      	mov	sl, r4
 8009192:	46ab      	mov	fp, r5
 8009194:	f1bb 0f01 	cmp.w	fp, #1
 8009198:	f300 8086 	bgt.w	80092a8 <__kernel_rem_pio2+0x610>
 800919c:	2000      	movs	r0, #0
 800919e:	2100      	movs	r1, #0
 80091a0:	2d01      	cmp	r5, #1
 80091a2:	f300 80a0 	bgt.w	80092e6 <__kernel_rem_pio2+0x64e>
 80091a6:	9b02      	ldr	r3, [sp, #8]
 80091a8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80091ac:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f040 809e 	bne.w	80092f2 <__kernel_rem_pio2+0x65a>
 80091b6:	9b01      	ldr	r3, [sp, #4]
 80091b8:	e9c3 7800 	strd	r7, r8, [r3]
 80091bc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80091c0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80091c4:	e033      	b.n	800922e <__kernel_rem_pio2+0x596>
 80091c6:	3408      	adds	r4, #8
 80091c8:	ab4a      	add	r3, sp, #296	; 0x128
 80091ca:	441c      	add	r4, r3
 80091cc:	462e      	mov	r6, r5
 80091ce:	2000      	movs	r0, #0
 80091d0:	2100      	movs	r1, #0
 80091d2:	2e00      	cmp	r6, #0
 80091d4:	da3a      	bge.n	800924c <__kernel_rem_pio2+0x5b4>
 80091d6:	9b02      	ldr	r3, [sp, #8]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d03d      	beq.n	8009258 <__kernel_rem_pio2+0x5c0>
 80091dc:	4602      	mov	r2, r0
 80091de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091e2:	9c01      	ldr	r4, [sp, #4]
 80091e4:	e9c4 2300 	strd	r2, r3, [r4]
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80091f0:	f7f6 fff2 	bl	80001d8 <__aeabi_dsub>
 80091f4:	ae4c      	add	r6, sp, #304	; 0x130
 80091f6:	2401      	movs	r4, #1
 80091f8:	42a5      	cmp	r5, r4
 80091fa:	da30      	bge.n	800925e <__kernel_rem_pio2+0x5c6>
 80091fc:	9b02      	ldr	r3, [sp, #8]
 80091fe:	b113      	cbz	r3, 8009206 <__kernel_rem_pio2+0x56e>
 8009200:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009204:	4619      	mov	r1, r3
 8009206:	9b01      	ldr	r3, [sp, #4]
 8009208:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800920c:	e00f      	b.n	800922e <__kernel_rem_pio2+0x596>
 800920e:	ab9a      	add	r3, sp, #616	; 0x268
 8009210:	441c      	add	r4, r3
 8009212:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009216:	2000      	movs	r0, #0
 8009218:	2100      	movs	r1, #0
 800921a:	2d00      	cmp	r5, #0
 800921c:	da10      	bge.n	8009240 <__kernel_rem_pio2+0x5a8>
 800921e:	9b02      	ldr	r3, [sp, #8]
 8009220:	b113      	cbz	r3, 8009228 <__kernel_rem_pio2+0x590>
 8009222:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009226:	4619      	mov	r1, r3
 8009228:	9b01      	ldr	r3, [sp, #4]
 800922a:	e9c3 0100 	strd	r0, r1, [r3]
 800922e:	9b06      	ldr	r3, [sp, #24]
 8009230:	f003 0007 	and.w	r0, r3, #7
 8009234:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009238:	ecbd 8b02 	vpop	{d8}
 800923c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009240:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009244:	f7f6 ffca 	bl	80001dc <__adddf3>
 8009248:	3d01      	subs	r5, #1
 800924a:	e7e6      	b.n	800921a <__kernel_rem_pio2+0x582>
 800924c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009250:	f7f6 ffc4 	bl	80001dc <__adddf3>
 8009254:	3e01      	subs	r6, #1
 8009256:	e7bc      	b.n	80091d2 <__kernel_rem_pio2+0x53a>
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	e7c1      	b.n	80091e2 <__kernel_rem_pio2+0x54a>
 800925e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009262:	f7f6 ffbb 	bl	80001dc <__adddf3>
 8009266:	3401      	adds	r4, #1
 8009268:	e7c6      	b.n	80091f8 <__kernel_rem_pio2+0x560>
 800926a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800926e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8009272:	4640      	mov	r0, r8
 8009274:	ec53 2b17 	vmov	r2, r3, d7
 8009278:	4649      	mov	r1, r9
 800927a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800927e:	f7f6 ffad 	bl	80001dc <__adddf3>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	4606      	mov	r6, r0
 8009288:	460f      	mov	r7, r1
 800928a:	4640      	mov	r0, r8
 800928c:	4649      	mov	r1, r9
 800928e:	f7f6 ffa3 	bl	80001d8 <__aeabi_dsub>
 8009292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009296:	f7f6 ffa1 	bl	80001dc <__adddf3>
 800929a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800929e:	e9ca 0100 	strd	r0, r1, [sl]
 80092a2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80092a6:	e770      	b.n	800918a <__kernel_rem_pio2+0x4f2>
 80092a8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80092ac:	ed3a 7b02 	vldmdb	sl!, {d7}
 80092b0:	4630      	mov	r0, r6
 80092b2:	ec53 2b17 	vmov	r2, r3, d7
 80092b6:	4639      	mov	r1, r7
 80092b8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80092bc:	f7f6 ff8e 	bl	80001dc <__adddf3>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	4680      	mov	r8, r0
 80092c6:	4689      	mov	r9, r1
 80092c8:	4630      	mov	r0, r6
 80092ca:	4639      	mov	r1, r7
 80092cc:	f7f6 ff84 	bl	80001d8 <__aeabi_dsub>
 80092d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092d4:	f7f6 ff82 	bl	80001dc <__adddf3>
 80092d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80092dc:	e9ca 0100 	strd	r0, r1, [sl]
 80092e0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80092e4:	e756      	b.n	8009194 <__kernel_rem_pio2+0x4fc>
 80092e6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80092ea:	f7f6 ff77 	bl	80001dc <__adddf3>
 80092ee:	3d01      	subs	r5, #1
 80092f0:	e756      	b.n	80091a0 <__kernel_rem_pio2+0x508>
 80092f2:	9b01      	ldr	r3, [sp, #4]
 80092f4:	9a01      	ldr	r2, [sp, #4]
 80092f6:	601f      	str	r7, [r3, #0]
 80092f8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80092fc:	605c      	str	r4, [r3, #4]
 80092fe:	609d      	str	r5, [r3, #8]
 8009300:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009304:	60d3      	str	r3, [r2, #12]
 8009306:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800930a:	6110      	str	r0, [r2, #16]
 800930c:	6153      	str	r3, [r2, #20]
 800930e:	e78e      	b.n	800922e <__kernel_rem_pio2+0x596>
 8009310:	41700000 	.word	0x41700000
 8009314:	3e700000 	.word	0x3e700000

08009318 <__kernel_sin>:
 8009318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931c:	ec55 4b10 	vmov	r4, r5, d0
 8009320:	b085      	sub	sp, #20
 8009322:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009326:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800932a:	ed8d 1b00 	vstr	d1, [sp]
 800932e:	9002      	str	r0, [sp, #8]
 8009330:	da06      	bge.n	8009340 <__kernel_sin+0x28>
 8009332:	ee10 0a10 	vmov	r0, s0
 8009336:	4629      	mov	r1, r5
 8009338:	f7f7 fbb6 	bl	8000aa8 <__aeabi_d2iz>
 800933c:	2800      	cmp	r0, #0
 800933e:	d051      	beq.n	80093e4 <__kernel_sin+0xcc>
 8009340:	4622      	mov	r2, r4
 8009342:	462b      	mov	r3, r5
 8009344:	4620      	mov	r0, r4
 8009346:	4629      	mov	r1, r5
 8009348:	f7f7 f8fe 	bl	8000548 <__aeabi_dmul>
 800934c:	4682      	mov	sl, r0
 800934e:	468b      	mov	fp, r1
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	4620      	mov	r0, r4
 8009356:	4629      	mov	r1, r5
 8009358:	f7f7 f8f6 	bl	8000548 <__aeabi_dmul>
 800935c:	a341      	add	r3, pc, #260	; (adr r3, 8009464 <__kernel_sin+0x14c>)
 800935e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009362:	4680      	mov	r8, r0
 8009364:	4689      	mov	r9, r1
 8009366:	4650      	mov	r0, sl
 8009368:	4659      	mov	r1, fp
 800936a:	f7f7 f8ed 	bl	8000548 <__aeabi_dmul>
 800936e:	a33f      	add	r3, pc, #252	; (adr r3, 800946c <__kernel_sin+0x154>)
 8009370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009374:	f7f6 ff30 	bl	80001d8 <__aeabi_dsub>
 8009378:	4652      	mov	r2, sl
 800937a:	465b      	mov	r3, fp
 800937c:	f7f7 f8e4 	bl	8000548 <__aeabi_dmul>
 8009380:	a33c      	add	r3, pc, #240	; (adr r3, 8009474 <__kernel_sin+0x15c>)
 8009382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009386:	f7f6 ff29 	bl	80001dc <__adddf3>
 800938a:	4652      	mov	r2, sl
 800938c:	465b      	mov	r3, fp
 800938e:	f7f7 f8db 	bl	8000548 <__aeabi_dmul>
 8009392:	a33a      	add	r3, pc, #232	; (adr r3, 800947c <__kernel_sin+0x164>)
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	f7f6 ff1e 	bl	80001d8 <__aeabi_dsub>
 800939c:	4652      	mov	r2, sl
 800939e:	465b      	mov	r3, fp
 80093a0:	f7f7 f8d2 	bl	8000548 <__aeabi_dmul>
 80093a4:	a337      	add	r3, pc, #220	; (adr r3, 8009484 <__kernel_sin+0x16c>)
 80093a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093aa:	f7f6 ff17 	bl	80001dc <__adddf3>
 80093ae:	9b02      	ldr	r3, [sp, #8]
 80093b0:	4606      	mov	r6, r0
 80093b2:	460f      	mov	r7, r1
 80093b4:	b9db      	cbnz	r3, 80093ee <__kernel_sin+0xd6>
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	4650      	mov	r0, sl
 80093bc:	4659      	mov	r1, fp
 80093be:	f7f7 f8c3 	bl	8000548 <__aeabi_dmul>
 80093c2:	a325      	add	r3, pc, #148	; (adr r3, 8009458 <__kernel_sin+0x140>)
 80093c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c8:	f7f6 ff06 	bl	80001d8 <__aeabi_dsub>
 80093cc:	4642      	mov	r2, r8
 80093ce:	464b      	mov	r3, r9
 80093d0:	f7f7 f8ba 	bl	8000548 <__aeabi_dmul>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	4620      	mov	r0, r4
 80093da:	4629      	mov	r1, r5
 80093dc:	f7f6 fefe 	bl	80001dc <__adddf3>
 80093e0:	4604      	mov	r4, r0
 80093e2:	460d      	mov	r5, r1
 80093e4:	ec45 4b10 	vmov	d0, r4, r5
 80093e8:	b005      	add	sp, #20
 80093ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ee:	2200      	movs	r2, #0
 80093f0:	4b1b      	ldr	r3, [pc, #108]	; (8009460 <__kernel_sin+0x148>)
 80093f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093f6:	f7f7 f8a7 	bl	8000548 <__aeabi_dmul>
 80093fa:	4632      	mov	r2, r6
 80093fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009400:	463b      	mov	r3, r7
 8009402:	4640      	mov	r0, r8
 8009404:	4649      	mov	r1, r9
 8009406:	f7f7 f89f 	bl	8000548 <__aeabi_dmul>
 800940a:	4602      	mov	r2, r0
 800940c:	460b      	mov	r3, r1
 800940e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009412:	f7f6 fee1 	bl	80001d8 <__aeabi_dsub>
 8009416:	4652      	mov	r2, sl
 8009418:	465b      	mov	r3, fp
 800941a:	f7f7 f895 	bl	8000548 <__aeabi_dmul>
 800941e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009422:	f7f6 fed9 	bl	80001d8 <__aeabi_dsub>
 8009426:	a30c      	add	r3, pc, #48	; (adr r3, 8009458 <__kernel_sin+0x140>)
 8009428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942c:	4606      	mov	r6, r0
 800942e:	460f      	mov	r7, r1
 8009430:	4640      	mov	r0, r8
 8009432:	4649      	mov	r1, r9
 8009434:	f7f7 f888 	bl	8000548 <__aeabi_dmul>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	4630      	mov	r0, r6
 800943e:	4639      	mov	r1, r7
 8009440:	f7f6 fecc 	bl	80001dc <__adddf3>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	4620      	mov	r0, r4
 800944a:	4629      	mov	r1, r5
 800944c:	f7f6 fec4 	bl	80001d8 <__aeabi_dsub>
 8009450:	e7c6      	b.n	80093e0 <__kernel_sin+0xc8>
 8009452:	bf00      	nop
 8009454:	f3af 8000 	nop.w
 8009458:	55555549 	.word	0x55555549
 800945c:	3fc55555 	.word	0x3fc55555
 8009460:	3fe00000 	.word	0x3fe00000
 8009464:	5acfd57c 	.word	0x5acfd57c
 8009468:	3de5d93a 	.word	0x3de5d93a
 800946c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009470:	3e5ae5e6 	.word	0x3e5ae5e6
 8009474:	57b1fe7d 	.word	0x57b1fe7d
 8009478:	3ec71de3 	.word	0x3ec71de3
 800947c:	19c161d5 	.word	0x19c161d5
 8009480:	3f2a01a0 	.word	0x3f2a01a0
 8009484:	1110f8a6 	.word	0x1110f8a6
 8009488:	3f811111 	.word	0x3f811111
 800948c:	00000000 	.word	0x00000000

08009490 <__kernel_tan>:
 8009490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009494:	ec5b ab10 	vmov	sl, fp, d0
 8009498:	4bbf      	ldr	r3, [pc, #764]	; (8009798 <__kernel_tan+0x308>)
 800949a:	b089      	sub	sp, #36	; 0x24
 800949c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80094a0:	429f      	cmp	r7, r3
 80094a2:	ec59 8b11 	vmov	r8, r9, d1
 80094a6:	4606      	mov	r6, r0
 80094a8:	f8cd b008 	str.w	fp, [sp, #8]
 80094ac:	dc22      	bgt.n	80094f4 <__kernel_tan+0x64>
 80094ae:	ee10 0a10 	vmov	r0, s0
 80094b2:	4659      	mov	r1, fp
 80094b4:	f7f7 faf8 	bl	8000aa8 <__aeabi_d2iz>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d145      	bne.n	8009548 <__kernel_tan+0xb8>
 80094bc:	1c73      	adds	r3, r6, #1
 80094be:	4652      	mov	r2, sl
 80094c0:	4313      	orrs	r3, r2
 80094c2:	433b      	orrs	r3, r7
 80094c4:	d110      	bne.n	80094e8 <__kernel_tan+0x58>
 80094c6:	ec4b ab10 	vmov	d0, sl, fp
 80094ca:	f000 f9ad 	bl	8009828 <fabs>
 80094ce:	49b3      	ldr	r1, [pc, #716]	; (800979c <__kernel_tan+0x30c>)
 80094d0:	ec53 2b10 	vmov	r2, r3, d0
 80094d4:	2000      	movs	r0, #0
 80094d6:	f7f7 f961 	bl	800079c <__aeabi_ddiv>
 80094da:	4682      	mov	sl, r0
 80094dc:	468b      	mov	fp, r1
 80094de:	ec4b ab10 	vmov	d0, sl, fp
 80094e2:	b009      	add	sp, #36	; 0x24
 80094e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e8:	2e01      	cmp	r6, #1
 80094ea:	d0f8      	beq.n	80094de <__kernel_tan+0x4e>
 80094ec:	465b      	mov	r3, fp
 80094ee:	2000      	movs	r0, #0
 80094f0:	49ab      	ldr	r1, [pc, #684]	; (80097a0 <__kernel_tan+0x310>)
 80094f2:	e7f0      	b.n	80094d6 <__kernel_tan+0x46>
 80094f4:	4bab      	ldr	r3, [pc, #684]	; (80097a4 <__kernel_tan+0x314>)
 80094f6:	429f      	cmp	r7, r3
 80094f8:	dd26      	ble.n	8009548 <__kernel_tan+0xb8>
 80094fa:	9b02      	ldr	r3, [sp, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	da09      	bge.n	8009514 <__kernel_tan+0x84>
 8009500:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009504:	469b      	mov	fp, r3
 8009506:	ee10 aa10 	vmov	sl, s0
 800950a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800950e:	ee11 8a10 	vmov	r8, s2
 8009512:	4699      	mov	r9, r3
 8009514:	4652      	mov	r2, sl
 8009516:	465b      	mov	r3, fp
 8009518:	a181      	add	r1, pc, #516	; (adr r1, 8009720 <__kernel_tan+0x290>)
 800951a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800951e:	f7f6 fe5b 	bl	80001d8 <__aeabi_dsub>
 8009522:	4642      	mov	r2, r8
 8009524:	464b      	mov	r3, r9
 8009526:	4604      	mov	r4, r0
 8009528:	460d      	mov	r5, r1
 800952a:	a17f      	add	r1, pc, #508	; (adr r1, 8009728 <__kernel_tan+0x298>)
 800952c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009530:	f7f6 fe52 	bl	80001d8 <__aeabi_dsub>
 8009534:	4622      	mov	r2, r4
 8009536:	462b      	mov	r3, r5
 8009538:	f7f6 fe50 	bl	80001dc <__adddf3>
 800953c:	f04f 0800 	mov.w	r8, #0
 8009540:	4682      	mov	sl, r0
 8009542:	468b      	mov	fp, r1
 8009544:	f04f 0900 	mov.w	r9, #0
 8009548:	4652      	mov	r2, sl
 800954a:	465b      	mov	r3, fp
 800954c:	4650      	mov	r0, sl
 800954e:	4659      	mov	r1, fp
 8009550:	f7f6 fffa 	bl	8000548 <__aeabi_dmul>
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	e9cd 0100 	strd	r0, r1, [sp]
 800955c:	f7f6 fff4 	bl	8000548 <__aeabi_dmul>
 8009560:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009564:	4604      	mov	r4, r0
 8009566:	460d      	mov	r5, r1
 8009568:	4650      	mov	r0, sl
 800956a:	4659      	mov	r1, fp
 800956c:	f7f6 ffec 	bl	8000548 <__aeabi_dmul>
 8009570:	a36f      	add	r3, pc, #444	; (adr r3, 8009730 <__kernel_tan+0x2a0>)
 8009572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009576:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800957a:	4620      	mov	r0, r4
 800957c:	4629      	mov	r1, r5
 800957e:	f7f6 ffe3 	bl	8000548 <__aeabi_dmul>
 8009582:	a36d      	add	r3, pc, #436	; (adr r3, 8009738 <__kernel_tan+0x2a8>)
 8009584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009588:	f7f6 fe28 	bl	80001dc <__adddf3>
 800958c:	4622      	mov	r2, r4
 800958e:	462b      	mov	r3, r5
 8009590:	f7f6 ffda 	bl	8000548 <__aeabi_dmul>
 8009594:	a36a      	add	r3, pc, #424	; (adr r3, 8009740 <__kernel_tan+0x2b0>)
 8009596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959a:	f7f6 fe1f 	bl	80001dc <__adddf3>
 800959e:	4622      	mov	r2, r4
 80095a0:	462b      	mov	r3, r5
 80095a2:	f7f6 ffd1 	bl	8000548 <__aeabi_dmul>
 80095a6:	a368      	add	r3, pc, #416	; (adr r3, 8009748 <__kernel_tan+0x2b8>)
 80095a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ac:	f7f6 fe16 	bl	80001dc <__adddf3>
 80095b0:	4622      	mov	r2, r4
 80095b2:	462b      	mov	r3, r5
 80095b4:	f7f6 ffc8 	bl	8000548 <__aeabi_dmul>
 80095b8:	a365      	add	r3, pc, #404	; (adr r3, 8009750 <__kernel_tan+0x2c0>)
 80095ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095be:	f7f6 fe0d 	bl	80001dc <__adddf3>
 80095c2:	4622      	mov	r2, r4
 80095c4:	462b      	mov	r3, r5
 80095c6:	f7f6 ffbf 	bl	8000548 <__aeabi_dmul>
 80095ca:	a363      	add	r3, pc, #396	; (adr r3, 8009758 <__kernel_tan+0x2c8>)
 80095cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d0:	f7f6 fe04 	bl	80001dc <__adddf3>
 80095d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095d8:	f7f6 ffb6 	bl	8000548 <__aeabi_dmul>
 80095dc:	a360      	add	r3, pc, #384	; (adr r3, 8009760 <__kernel_tan+0x2d0>)
 80095de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80095e6:	4620      	mov	r0, r4
 80095e8:	4629      	mov	r1, r5
 80095ea:	f7f6 ffad 	bl	8000548 <__aeabi_dmul>
 80095ee:	a35e      	add	r3, pc, #376	; (adr r3, 8009768 <__kernel_tan+0x2d8>)
 80095f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f4:	f7f6 fdf2 	bl	80001dc <__adddf3>
 80095f8:	4622      	mov	r2, r4
 80095fa:	462b      	mov	r3, r5
 80095fc:	f7f6 ffa4 	bl	8000548 <__aeabi_dmul>
 8009600:	a35b      	add	r3, pc, #364	; (adr r3, 8009770 <__kernel_tan+0x2e0>)
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	f7f6 fde9 	bl	80001dc <__adddf3>
 800960a:	4622      	mov	r2, r4
 800960c:	462b      	mov	r3, r5
 800960e:	f7f6 ff9b 	bl	8000548 <__aeabi_dmul>
 8009612:	a359      	add	r3, pc, #356	; (adr r3, 8009778 <__kernel_tan+0x2e8>)
 8009614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009618:	f7f6 fde0 	bl	80001dc <__adddf3>
 800961c:	4622      	mov	r2, r4
 800961e:	462b      	mov	r3, r5
 8009620:	f7f6 ff92 	bl	8000548 <__aeabi_dmul>
 8009624:	a356      	add	r3, pc, #344	; (adr r3, 8009780 <__kernel_tan+0x2f0>)
 8009626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962a:	f7f6 fdd7 	bl	80001dc <__adddf3>
 800962e:	4622      	mov	r2, r4
 8009630:	462b      	mov	r3, r5
 8009632:	f7f6 ff89 	bl	8000548 <__aeabi_dmul>
 8009636:	a354      	add	r3, pc, #336	; (adr r3, 8009788 <__kernel_tan+0x2f8>)
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	f7f6 fdce 	bl	80001dc <__adddf3>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009648:	f7f6 fdc8 	bl	80001dc <__adddf3>
 800964c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009650:	f7f6 ff7a 	bl	8000548 <__aeabi_dmul>
 8009654:	4642      	mov	r2, r8
 8009656:	464b      	mov	r3, r9
 8009658:	f7f6 fdc0 	bl	80001dc <__adddf3>
 800965c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009660:	f7f6 ff72 	bl	8000548 <__aeabi_dmul>
 8009664:	4642      	mov	r2, r8
 8009666:	464b      	mov	r3, r9
 8009668:	f7f6 fdb8 	bl	80001dc <__adddf3>
 800966c:	a348      	add	r3, pc, #288	; (adr r3, 8009790 <__kernel_tan+0x300>)
 800966e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009672:	4604      	mov	r4, r0
 8009674:	460d      	mov	r5, r1
 8009676:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800967a:	f7f6 ff65 	bl	8000548 <__aeabi_dmul>
 800967e:	4622      	mov	r2, r4
 8009680:	462b      	mov	r3, r5
 8009682:	f7f6 fdab 	bl	80001dc <__adddf3>
 8009686:	e9cd 0100 	strd	r0, r1, [sp]
 800968a:	460b      	mov	r3, r1
 800968c:	4602      	mov	r2, r0
 800968e:	4659      	mov	r1, fp
 8009690:	4650      	mov	r0, sl
 8009692:	f7f6 fda3 	bl	80001dc <__adddf3>
 8009696:	4b43      	ldr	r3, [pc, #268]	; (80097a4 <__kernel_tan+0x314>)
 8009698:	429f      	cmp	r7, r3
 800969a:	4604      	mov	r4, r0
 800969c:	460d      	mov	r5, r1
 800969e:	f340 8083 	ble.w	80097a8 <__kernel_tan+0x318>
 80096a2:	4630      	mov	r0, r6
 80096a4:	f7f6 fee6 	bl	8000474 <__aeabi_i2d>
 80096a8:	4622      	mov	r2, r4
 80096aa:	4680      	mov	r8, r0
 80096ac:	4689      	mov	r9, r1
 80096ae:	462b      	mov	r3, r5
 80096b0:	4620      	mov	r0, r4
 80096b2:	4629      	mov	r1, r5
 80096b4:	f7f6 ff48 	bl	8000548 <__aeabi_dmul>
 80096b8:	4642      	mov	r2, r8
 80096ba:	4606      	mov	r6, r0
 80096bc:	460f      	mov	r7, r1
 80096be:	464b      	mov	r3, r9
 80096c0:	4620      	mov	r0, r4
 80096c2:	4629      	mov	r1, r5
 80096c4:	f7f6 fd8a 	bl	80001dc <__adddf3>
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	4630      	mov	r0, r6
 80096ce:	4639      	mov	r1, r7
 80096d0:	f7f7 f864 	bl	800079c <__aeabi_ddiv>
 80096d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096d8:	f7f6 fd7e 	bl	80001d8 <__aeabi_dsub>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	4650      	mov	r0, sl
 80096e2:	4659      	mov	r1, fp
 80096e4:	f7f6 fd78 	bl	80001d8 <__aeabi_dsub>
 80096e8:	4602      	mov	r2, r0
 80096ea:	460b      	mov	r3, r1
 80096ec:	f7f6 fd76 	bl	80001dc <__adddf3>
 80096f0:	4602      	mov	r2, r0
 80096f2:	460b      	mov	r3, r1
 80096f4:	4640      	mov	r0, r8
 80096f6:	4649      	mov	r1, r9
 80096f8:	f7f6 fd6e 	bl	80001d8 <__aeabi_dsub>
 80096fc:	9b02      	ldr	r3, [sp, #8]
 80096fe:	4604      	mov	r4, r0
 8009700:	1798      	asrs	r0, r3, #30
 8009702:	f000 0002 	and.w	r0, r0, #2
 8009706:	f1c0 0001 	rsb	r0, r0, #1
 800970a:	460d      	mov	r5, r1
 800970c:	f7f6 feb2 	bl	8000474 <__aeabi_i2d>
 8009710:	4602      	mov	r2, r0
 8009712:	460b      	mov	r3, r1
 8009714:	4620      	mov	r0, r4
 8009716:	4629      	mov	r1, r5
 8009718:	f7f6 ff16 	bl	8000548 <__aeabi_dmul>
 800971c:	e6dd      	b.n	80094da <__kernel_tan+0x4a>
 800971e:	bf00      	nop
 8009720:	54442d18 	.word	0x54442d18
 8009724:	3fe921fb 	.word	0x3fe921fb
 8009728:	33145c07 	.word	0x33145c07
 800972c:	3c81a626 	.word	0x3c81a626
 8009730:	74bf7ad4 	.word	0x74bf7ad4
 8009734:	3efb2a70 	.word	0x3efb2a70
 8009738:	32f0a7e9 	.word	0x32f0a7e9
 800973c:	3f12b80f 	.word	0x3f12b80f
 8009740:	1a8d1068 	.word	0x1a8d1068
 8009744:	3f3026f7 	.word	0x3f3026f7
 8009748:	fee08315 	.word	0xfee08315
 800974c:	3f57dbc8 	.word	0x3f57dbc8
 8009750:	e96e8493 	.word	0xe96e8493
 8009754:	3f8226e3 	.word	0x3f8226e3
 8009758:	1bb341fe 	.word	0x1bb341fe
 800975c:	3faba1ba 	.word	0x3faba1ba
 8009760:	db605373 	.word	0xdb605373
 8009764:	bef375cb 	.word	0xbef375cb
 8009768:	a03792a6 	.word	0xa03792a6
 800976c:	3f147e88 	.word	0x3f147e88
 8009770:	f2f26501 	.word	0xf2f26501
 8009774:	3f4344d8 	.word	0x3f4344d8
 8009778:	c9560328 	.word	0xc9560328
 800977c:	3f6d6d22 	.word	0x3f6d6d22
 8009780:	8406d637 	.word	0x8406d637
 8009784:	3f9664f4 	.word	0x3f9664f4
 8009788:	1110fe7a 	.word	0x1110fe7a
 800978c:	3fc11111 	.word	0x3fc11111
 8009790:	55555563 	.word	0x55555563
 8009794:	3fd55555 	.word	0x3fd55555
 8009798:	3e2fffff 	.word	0x3e2fffff
 800979c:	3ff00000 	.word	0x3ff00000
 80097a0:	bff00000 	.word	0xbff00000
 80097a4:	3fe59427 	.word	0x3fe59427
 80097a8:	2e01      	cmp	r6, #1
 80097aa:	d036      	beq.n	800981a <__kernel_tan+0x38a>
 80097ac:	460f      	mov	r7, r1
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	2000      	movs	r0, #0
 80097b4:	491a      	ldr	r1, [pc, #104]	; (8009820 <__kernel_tan+0x390>)
 80097b6:	f7f6 fff1 	bl	800079c <__aeabi_ddiv>
 80097ba:	2600      	movs	r6, #0
 80097bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097c0:	4652      	mov	r2, sl
 80097c2:	465b      	mov	r3, fp
 80097c4:	4630      	mov	r0, r6
 80097c6:	4639      	mov	r1, r7
 80097c8:	f7f6 fd06 	bl	80001d8 <__aeabi_dsub>
 80097cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80097d0:	4602      	mov	r2, r0
 80097d2:	460b      	mov	r3, r1
 80097d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097d8:	f7f6 fcfe 	bl	80001d8 <__aeabi_dsub>
 80097dc:	4632      	mov	r2, r6
 80097de:	462b      	mov	r3, r5
 80097e0:	f7f6 feb2 	bl	8000548 <__aeabi_dmul>
 80097e4:	4632      	mov	r2, r6
 80097e6:	4682      	mov	sl, r0
 80097e8:	468b      	mov	fp, r1
 80097ea:	462b      	mov	r3, r5
 80097ec:	4630      	mov	r0, r6
 80097ee:	4639      	mov	r1, r7
 80097f0:	f7f6 feaa 	bl	8000548 <__aeabi_dmul>
 80097f4:	2200      	movs	r2, #0
 80097f6:	4b0b      	ldr	r3, [pc, #44]	; (8009824 <__kernel_tan+0x394>)
 80097f8:	f7f6 fcf0 	bl	80001dc <__adddf3>
 80097fc:	4602      	mov	r2, r0
 80097fe:	460b      	mov	r3, r1
 8009800:	4650      	mov	r0, sl
 8009802:	4659      	mov	r1, fp
 8009804:	f7f6 fcea 	bl	80001dc <__adddf3>
 8009808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800980c:	f7f6 fe9c 	bl	8000548 <__aeabi_dmul>
 8009810:	4632      	mov	r2, r6
 8009812:	462b      	mov	r3, r5
 8009814:	f7f6 fce2 	bl	80001dc <__adddf3>
 8009818:	e65f      	b.n	80094da <__kernel_tan+0x4a>
 800981a:	4682      	mov	sl, r0
 800981c:	468b      	mov	fp, r1
 800981e:	e65e      	b.n	80094de <__kernel_tan+0x4e>
 8009820:	bff00000 	.word	0xbff00000
 8009824:	3ff00000 	.word	0x3ff00000

08009828 <fabs>:
 8009828:	ec51 0b10 	vmov	r0, r1, d0
 800982c:	ee10 2a10 	vmov	r2, s0
 8009830:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009834:	ec43 2b10 	vmov	d0, r2, r3
 8009838:	4770      	bx	lr

0800983a <matherr>:
 800983a:	2000      	movs	r0, #0
 800983c:	4770      	bx	lr
	...

08009840 <scalbn>:
 8009840:	b570      	push	{r4, r5, r6, lr}
 8009842:	ec55 4b10 	vmov	r4, r5, d0
 8009846:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800984a:	4606      	mov	r6, r0
 800984c:	462b      	mov	r3, r5
 800984e:	b9aa      	cbnz	r2, 800987c <scalbn+0x3c>
 8009850:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009854:	4323      	orrs	r3, r4
 8009856:	d03b      	beq.n	80098d0 <scalbn+0x90>
 8009858:	4b31      	ldr	r3, [pc, #196]	; (8009920 <scalbn+0xe0>)
 800985a:	4629      	mov	r1, r5
 800985c:	2200      	movs	r2, #0
 800985e:	ee10 0a10 	vmov	r0, s0
 8009862:	f7f6 fe71 	bl	8000548 <__aeabi_dmul>
 8009866:	4b2f      	ldr	r3, [pc, #188]	; (8009924 <scalbn+0xe4>)
 8009868:	429e      	cmp	r6, r3
 800986a:	4604      	mov	r4, r0
 800986c:	460d      	mov	r5, r1
 800986e:	da12      	bge.n	8009896 <scalbn+0x56>
 8009870:	a327      	add	r3, pc, #156	; (adr r3, 8009910 <scalbn+0xd0>)
 8009872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009876:	f7f6 fe67 	bl	8000548 <__aeabi_dmul>
 800987a:	e009      	b.n	8009890 <scalbn+0x50>
 800987c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009880:	428a      	cmp	r2, r1
 8009882:	d10c      	bne.n	800989e <scalbn+0x5e>
 8009884:	ee10 2a10 	vmov	r2, s0
 8009888:	4620      	mov	r0, r4
 800988a:	4629      	mov	r1, r5
 800988c:	f7f6 fca6 	bl	80001dc <__adddf3>
 8009890:	4604      	mov	r4, r0
 8009892:	460d      	mov	r5, r1
 8009894:	e01c      	b.n	80098d0 <scalbn+0x90>
 8009896:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800989a:	460b      	mov	r3, r1
 800989c:	3a36      	subs	r2, #54	; 0x36
 800989e:	4432      	add	r2, r6
 80098a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80098a4:	428a      	cmp	r2, r1
 80098a6:	dd0b      	ble.n	80098c0 <scalbn+0x80>
 80098a8:	ec45 4b11 	vmov	d1, r4, r5
 80098ac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009918 <scalbn+0xd8>
 80098b0:	f000 f83c 	bl	800992c <copysign>
 80098b4:	a318      	add	r3, pc, #96	; (adr r3, 8009918 <scalbn+0xd8>)
 80098b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ba:	ec51 0b10 	vmov	r0, r1, d0
 80098be:	e7da      	b.n	8009876 <scalbn+0x36>
 80098c0:	2a00      	cmp	r2, #0
 80098c2:	dd08      	ble.n	80098d6 <scalbn+0x96>
 80098c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80098d0:	ec45 4b10 	vmov	d0, r4, r5
 80098d4:	bd70      	pop	{r4, r5, r6, pc}
 80098d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80098da:	da0d      	bge.n	80098f8 <scalbn+0xb8>
 80098dc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80098e0:	429e      	cmp	r6, r3
 80098e2:	ec45 4b11 	vmov	d1, r4, r5
 80098e6:	dce1      	bgt.n	80098ac <scalbn+0x6c>
 80098e8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009910 <scalbn+0xd0>
 80098ec:	f000 f81e 	bl	800992c <copysign>
 80098f0:	a307      	add	r3, pc, #28	; (adr r3, 8009910 <scalbn+0xd0>)
 80098f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f6:	e7e0      	b.n	80098ba <scalbn+0x7a>
 80098f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098fc:	3236      	adds	r2, #54	; 0x36
 80098fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009902:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009906:	4620      	mov	r0, r4
 8009908:	4629      	mov	r1, r5
 800990a:	2200      	movs	r2, #0
 800990c:	4b06      	ldr	r3, [pc, #24]	; (8009928 <scalbn+0xe8>)
 800990e:	e7b2      	b.n	8009876 <scalbn+0x36>
 8009910:	c2f8f359 	.word	0xc2f8f359
 8009914:	01a56e1f 	.word	0x01a56e1f
 8009918:	8800759c 	.word	0x8800759c
 800991c:	7e37e43c 	.word	0x7e37e43c
 8009920:	43500000 	.word	0x43500000
 8009924:	ffff3cb0 	.word	0xffff3cb0
 8009928:	3c900000 	.word	0x3c900000

0800992c <copysign>:
 800992c:	ec51 0b10 	vmov	r0, r1, d0
 8009930:	ee11 0a90 	vmov	r0, s3
 8009934:	ee10 2a10 	vmov	r2, s0
 8009938:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800993c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009940:	ea41 0300 	orr.w	r3, r1, r0
 8009944:	ec43 2b10 	vmov	d0, r2, r3
 8009948:	4770      	bx	lr
	...

0800994c <_init>:
 800994c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994e:	bf00      	nop
 8009950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009952:	bc08      	pop	{r3}
 8009954:	469e      	mov	lr, r3
 8009956:	4770      	bx	lr

08009958 <_fini>:
 8009958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995a:	bf00      	nop
 800995c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800995e:	bc08      	pop	{r3}
 8009960:	469e      	mov	lr, r3
 8009962:	4770      	bx	lr
